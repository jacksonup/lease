package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class PlaceContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b50612464806100296000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806389ec5b061161007157806389ec5b06146101b9578063954aae64146101d55780639e4c78f4146101f3578063aab01b1814610223578063f22956151461023f578063f3bfddb71461025b576100b4565b80631f7b6d32146100b957806327ede887146100d7578063465c4105146101075780634bba74d114610137578063610ed5db1461015557806374386a8414610185575b600080fd5b6100c161028b565b6040516100ce91906116b9565b60405180910390f35b6100f160048036038101906100ec9190611714565b610291565b6040516100fe91906117da565b60405180910390f35b610121600480360381019061011c9190611931565b61033d565b60405161012e91906119c4565b60405180910390f35b61013f61041a565b60405161014c9190611b85565b60405180910390f35b61016f600480360381019061016a9190611ba7565b6107bb565b60405161017c91906117da565b60405180910390f35b61019f600480360381019061019a9190611ba7565b6108a5565b6040516101b0959493929190611bf0565b60405180910390f35b6101d360048036038101906101ce9190611714565b610b11565b005b6101dd610bcb565b6040516101ea9190611cea565b60405180910390f35b61020d60048036038101906102089190611ba7565b610e51565b60405161021a91906119c4565b60405180910390f35b61023d60048036038101906102389190611d6a565b610e87565b005b61025960048036038101906102549190611f0f565b611112565b005b61027560048036038101906102709190611ba7565b611280565b6040516102829190611cea565b60405180910390f35b60035481565b600281815481106102a157600080fd5b9060005260206000200160009150905080546102bc90611f87565b80601f01602080910402602001604051908101604052809291908181526020018280546102e890611f87565b80156103355780601f1061030a57610100808354040283529160200191610335565b820191906000526020600020905b81548152906001019060200180831161031857829003601f168201915b505050505081565b6000808390506000839050805182511461035c57600092505050610414565b60005b825181101561040c5781818151811061037b5761037a611fb9565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168382815181106103bb576103ba611fb9565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146103f95760009350505050610414565b808061040490612017565b91505061035f565b506001925050505b92915050565b6060600060035467ffffffffffffffff81111561043a57610439611806565b5b60405190808252806020026020018201604052801561047357816020015b610460611541565b8152602001906001900390816104585790505b5090506000805b6003548110156107b25760016002828154811061049a57610499611fb9565b5b906000526020600020016040516104b191906120ff565b908152602001604051809103902060009054906101000a900460ff1615610799576000600282815481106104e8576104e7611fb9565b5b906000526020600020016040516104ff91906120ff565b90815260200160405180910390206040518060a001604052908160008201805461052890611f87565b80601f016020809104026020016040519081016040528092919081815260200182805461055490611f87565b80156105a15780601f10610576576101008083540402835291602001916105a1565b820191906000526020600020905b81548152906001019060200180831161058457829003601f168201915b505050505081526020016001820180546105ba90611f87565b80601f01602080910402602001604051908101604052809291908181526020018280546105e690611f87565b80156106335780601f1061060857610100808354040283529160200191610633565b820191906000526020600020905b81548152906001019060200180831161061657829003601f168201915b5050505050815260200160028201805461064c90611f87565b80601f016020809104026020016040519081016040528092919081815260200182805461067890611f87565b80156106c55780601f1061069a576101008083540402835291602001916106c5565b820191906000526020600020905b8154815290600101906020018083116106a857829003601f168201915b505050505081526020016003820180546106de90611f87565b80601f016020809104026020016040519081016040528092919081815260200182805461070a90611f87565b80156107575780601f1061072c57610100808354040283529160200191610757565b820191906000526020600020905b81548152906001019060200180831161073a57829003601f168201915b5050505050815260200160048201548152505083838061077690612017565b94508151811061078957610788611fb9565b5b602002602001018190525061079e565b61079f565b5b80806107aa90612017565b91505061047a565b50819250505090565b60606001826040516107cd9190612147565b908152602001604051809103902060009054906101000a900460ff161561089f576000826040516107fe9190612147565b9081526020016040518091039020600101805461081a90611f87565b80601f016020809104026020016040519081016040528092919081815260200182805461084690611f87565b80156108935780601f1061086857610100808354040283529160200191610893565b820191906000526020600020905b81548152906001019060200180831161087657829003601f168201915b505050505090506108a0565b5b919050565b6000818051602081018201805184825260208301602085012081835280955050505050506000915090508060000180546108de90611f87565b80601f016020809104026020016040519081016040528092919081815260200182805461090a90611f87565b80156109575780601f1061092c57610100808354040283529160200191610957565b820191906000526020600020905b81548152906001019060200180831161093a57829003601f168201915b50505050509080600101805461096c90611f87565b80601f016020809104026020016040519081016040528092919081815260200182805461099890611f87565b80156109e55780601f106109ba576101008083540402835291602001916109e5565b820191906000526020600020905b8154815290600101906020018083116109c857829003601f168201915b5050505050908060020180546109fa90611f87565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2690611f87565b8015610a735780601f10610a4857610100808354040283529160200191610a73565b820191906000526020600020905b815481529060010190602001808311610a5657829003601f168201915b505050505090806003018054610a8890611f87565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab490611f87565b8015610b015780601f10610ad657610100808354040283529160200191610b01565b820191906000526020600020905b815481529060010190602001808311610ae457829003601f168201915b5050505050908060040154905085565b6003548110610b1f57610bc8565b60008190505b6001600354610b34919061215e565b811015610bae576002600182610b4a9190612192565b81548110610b5b57610b5a611fb9565b5b9060005260206000200160028281548110610b7957610b78611fb9565b5b90600052602060002001908054610b8f90611f87565b610b9a929190611570565b508080610ba690612017565b915050610b25565b5060036000815480929190610bc2906121e8565b91905055505b50565b610bd3611541565b6000604051610be19061225e565b90815260200160405180910390206040518060a0016040529081600082018054610c0a90611f87565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3690611f87565b8015610c835780601f10610c5857610100808354040283529160200191610c83565b820191906000526020600020905b815481529060010190602001808311610c6657829003601f168201915b50505050508152602001600182018054610c9c90611f87565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc890611f87565b8015610d155780601f10610cea57610100808354040283529160200191610d15565b820191906000526020600020905b815481529060010190602001808311610cf857829003601f168201915b50505050508152602001600282018054610d2e90611f87565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5a90611f87565b8015610da75780601f10610d7c57610100808354040283529160200191610da7565b820191906000526020600020905b815481529060010190602001808311610d8a57829003601f168201915b50505050508152602001600382018054610dc090611f87565b80601f0160208091040260200160405190810160405280929190818152602001828054610dec90611f87565b8015610e395780601f10610e0e57610100808354040283529160200191610e39565b820191906000526020600020905b815481529060010190602001808311610e1c57829003601f168201915b50505050508152602001600482015481525050905090565b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b8373ffffffffffffffffffffffffffffffffffffffff166367f58d19836040518263ffffffff1660e01b8152600401610ec091906117da565b602060405180830381865afa158015610edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f01919061229f565b156110cd578273ffffffffffffffffffffffffffffffffffffffff16637ce7f1b7826040518263ffffffff1660e01b8152600401610f3f91906117da565b602060405180830381865afa158015610f5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f80919061229f565b15610fc3577f336e99f32272d4426ebd480dfe71e2f6e58927962f100ca4569e432447366320612712604051610fb69190612311565b60405180910390a161110c565b600181604051610fd39190612147565b908152602001604051809103902060009054906101000a900460ff161561108f5760016000826040516110069190612147565b908152602001604051809103902060040181905550600060018260405161102d9190612147565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507f336e99f32272d4426ebd480dfe71e2f6e58927962f100ca4569e43244736632060c86040516110829190612367565b60405180910390a161110c565b7f336e99f32272d4426ebd480dfe71e2f6e58927962f100ca4569e4324473663206127136040516110c091906123bd565b60405180910390a161110b565b7f336e99f32272d4426ebd480dfe71e2f6e58927962f100ca4569e4324473663206127116040516110fe9190612413565b60405180910390a161110c565b5b50505050565b600181600001516040516111269190612147565b908152602001604051809103902060009054906101000a900460ff1661127d57806000826000015160405161115b9190612147565b908152602001604051809103902060008201518160000190805190602001906111859291906115fd565b5060208201518160010190805190602001906111a29291906115fd565b5060408201518160020190805190602001906111bf9291906115fd565b5060608201518160030190805190602001906111dc9291906115fd565b506080820151816004015590505060018082600001516040516111ff9190612147565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600281600001519080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906112639291906115fd565b506003600081548092919061127790612017565b91905055505b50565b611288611541565b6001826040516112989190612147565b908152602001604051809103902060009054906101000a900460ff161561153b576000826040516112c99190612147565b90815260200160405180910390206040518060a00160405290816000820180546112f290611f87565b80601f016020809104026020016040519081016040528092919081815260200182805461131e90611f87565b801561136b5780601f106113405761010080835404028352916020019161136b565b820191906000526020600020905b81548152906001019060200180831161134e57829003601f168201915b5050505050815260200160018201805461138490611f87565b80601f01602080910402602001604051908101604052809291908181526020018280546113b090611f87565b80156113fd5780601f106113d2576101008083540402835291602001916113fd565b820191906000526020600020905b8154815290600101906020018083116113e057829003601f168201915b5050505050815260200160028201805461141690611f87565b80601f016020809104026020016040519081016040528092919081815260200182805461144290611f87565b801561148f5780601f106114645761010080835404028352916020019161148f565b820191906000526020600020905b81548152906001019060200180831161147257829003601f168201915b505050505081526020016003820180546114a890611f87565b80601f01602080910402602001604051908101604052809291908181526020018280546114d490611f87565b80156115215780601f106114f657610100808354040283529160200191611521565b820191906000526020600020905b81548152906001019060200180831161150457829003601f168201915b50505050508152602001600482015481525050905061153c565b5b919050565b6040518060a0016040528060608152602001606081526020016060815260200160608152602001600081525090565b82805461157c90611f87565b90600052602060002090601f01602090048101928261159e57600085556115ec565b82601f106115af57805485556115ec565b828001600101855582156115ec57600052602060002091601f016020900482015b828111156115eb5782548255916001019190600101906115d0565b5b5090506115f99190611683565b5090565b82805461160990611f87565b90600052602060002090601f01602090048101928261162b5760008555611672565b82601f1061164457805160ff1916838001178555611672565b82800160010185558215611672579182015b82811115611671578251825591602001919060010190611656565b5b50905061167f9190611683565b5090565b5b8082111561169c576000816000905550600101611684565b5090565b6000819050919050565b6116b3816116a0565b82525050565b60006020820190506116ce60008301846116aa565b92915050565b6000604051905090565b600080fd5b600080fd5b6116f1816116a0565b81146116fc57600080fd5b50565b60008135905061170e816116e8565b92915050565b60006020828403121561172a576117296116de565b5b6000611738848285016116ff565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561177b578082015181840152602081019050611760565b8381111561178a576000848401525b50505050565b6000601f19601f8301169050919050565b60006117ac82611741565b6117b6818561174c565b93506117c681856020860161175d565b6117cf81611790565b840191505092915050565b600060208201905081810360008301526117f481846117a1565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61183e82611790565b810181811067ffffffffffffffff8211171561185d5761185c611806565b5b80604052505050565b60006118706116d4565b905061187c8282611835565b919050565b600067ffffffffffffffff82111561189c5761189b611806565b5b6118a582611790565b9050602081019050919050565b82818337600083830152505050565b60006118d46118cf84611881565b611866565b9050828152602081018484840111156118f0576118ef611801565b5b6118fb8482856118b2565b509392505050565b600082601f830112611918576119176117fc565b5b81356119288482602086016118c1565b91505092915050565b60008060408385031215611948576119476116de565b5b600083013567ffffffffffffffff811115611966576119656116e3565b5b61197285828601611903565b925050602083013567ffffffffffffffff811115611993576119926116e3565b5b61199f85828601611903565b9150509250929050565b60008115159050919050565b6119be816119a9565b82525050565b60006020820190506119d960008301846119b5565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000611a2782611741565b611a318185611a0b565b9350611a4181856020860161175d565b611a4a81611790565b840191505092915050565b611a5e816116a0565b82525050565b600060a0830160008301518482036000860152611a818282611a1c565b91505060208301518482036020860152611a9b8282611a1c565b91505060408301518482036040860152611ab58282611a1c565b91505060608301518482036060860152611acf8282611a1c565b9150506080830151611ae46080860182611a55565b508091505092915050565b6000611afb8383611a64565b905092915050565b6000602082019050919050565b6000611b1b826119df565b611b2581856119ea565b935083602082028501611b37856119fb565b8060005b85811015611b735784840389528151611b548582611aef565b9450611b5f83611b03565b925060208a01995050600181019050611b3b565b50829750879550505050505092915050565b60006020820190508181036000830152611b9f8184611b10565b905092915050565b600060208284031215611bbd57611bbc6116de565b5b600082013567ffffffffffffffff811115611bdb57611bda6116e3565b5b611be784828501611903565b91505092915050565b600060a0820190508181036000830152611c0a81886117a1565b90508181036020830152611c1e81876117a1565b90508181036040830152611c3281866117a1565b90508181036060830152611c4681856117a1565b9050611c5560808301846116aa565b9695505050505050565b600060a0830160008301518482036000860152611c7c8282611a1c565b91505060208301518482036020860152611c968282611a1c565b91505060408301518482036040860152611cb08282611a1c565b91505060608301518482036060860152611cca8282611a1c565b9150506080830151611cdf6080860182611a55565b508091505092915050565b60006020820190508181036000830152611d048184611c5f565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d3782611d0c565b9050919050565b611d4781611d2c565b8114611d5257600080fd5b50565b600081359050611d6481611d3e565b92915050565b60008060008060808587031215611d8457611d836116de565b5b6000611d9287828801611d55565b9450506020611da387828801611d55565b935050604085013567ffffffffffffffff811115611dc457611dc36116e3565b5b611dd087828801611903565b925050606085013567ffffffffffffffff811115611df157611df06116e3565b5b611dfd87828801611903565b91505092959194509250565b600080fd5b600080fd5b600060a08284031215611e2957611e28611e09565b5b611e3360a0611866565b9050600082013567ffffffffffffffff811115611e5357611e52611e0e565b5b611e5f84828501611903565b600083015250602082013567ffffffffffffffff811115611e8357611e82611e0e565b5b611e8f84828501611903565b602083015250604082013567ffffffffffffffff811115611eb357611eb2611e0e565b5b611ebf84828501611903565b604083015250606082013567ffffffffffffffff811115611ee357611ee2611e0e565b5b611eef84828501611903565b6060830152506080611f03848285016116ff565b60808301525092915050565b600060208284031215611f2557611f246116de565b5b600082013567ffffffffffffffff811115611f4357611f426116e3565b5b611f4f84828501611e13565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611f9f57607f821691505b60208210811415611fb357611fb2611f58565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612022826116a0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561205557612054611fe8565b5b600182019050919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461208d81611f87565b6120978186612060565b945060018216600081146120b257600181146120c3576120f6565b60ff198316865281860193506120f6565b6120cc8561206b565b60005b838110156120ee578154818901526001820191506020810190506120cf565b838801955050505b50505092915050565b600061210b8284612080565b915081905092915050565b600061212182611741565b61212b8185612060565b935061213b81856020860161175d565b80840191505092915050565b60006121538284612116565b915081905092915050565b6000612169826116a0565b9150612174836116a0565b92508282101561218757612186611fe8565b5b828203905092915050565b600061219d826116a0565b91506121a8836116a0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156121dd576121dc611fe8565b5b828201905092915050565b60006121f3826116a0565b9150600082141561220757612206611fe8565b5b600182039050919050565b7f3100000000000000000000000000000000000000000000000000000000000000600082015250565b6000612248600183612060565b915061225382612212565b600182019050919050565b60006122698261223b565b9150819050919050565b61227c816119a9565b811461228757600080fd5b50565b60008151905061229981612273565b92915050565b6000602082840312156122b5576122b46116de565b5b60006122c38482850161228a565b91505092915050565b6000819050919050565b6000819050919050565b60006122fb6122f66122f1846122cc565b6122d6565b6116a0565b9050919050565b61230b816122e0565b82525050565b60006020820190506123266000830184612302565b92915050565b6000819050919050565b600061235161234c6123478461232c565b6122d6565b6116a0565b9050919050565b61236181612336565b82525050565b600060208201905061237c6000830184612358565b92915050565b6000819050919050565b60006123a76123a261239d84612382565b6122d6565b6116a0565b9050919050565b6123b78161238c565b82525050565b60006020820190506123d260008301846123ae565b92915050565b6000819050919050565b60006123fd6123f86123f3846123d8565b6122d6565b6116a0565b9050919050565b61240d816123e2565b82525050565b60006020820190506124286000830184612404565b9291505056fea2646970667358221220644cb1014614eb076ccfd29c539f11f49bf958f3af706d4f92f27dbf69662dea64736f6c634300080a0033";

    public static final String FUNC_CREATEPLACE = "createPlace";

    public static final String FUNC_DELETEPLACE = "deletePlace";

    public static final String FUNC_GETALLPLACELIST = "getAllPlaceList";

    public static final String FUNC_GETBYID = "getById";

    public static final String FUNC_GETPLACEINFO = "getPlaceInfo";

    public static final String FUNC_GETPLACENAMEBYPLACEID = "getPlaceNameByPlaceId";

    public static final String FUNC_ISEQUAL = "isEqual";

    public static final String FUNC_LENGTH = "length";

    public static final String FUNC_PLACEINSERTED = "placeInserted";

    public static final String FUNC_PLACEKEY = "placeKey";

    public static final String FUNC_PLACES = "places";

    public static final String FUNC_REMOVEPLACEKEYATINDEX = "removePlaceKeyAtIndex";

    public static final Event DELETEMSG_EVENT = new Event("DeleteMsg",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected PlaceContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PlaceContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PlaceContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PlaceContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DeleteMsgEventResponse> getDeleteMsgEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEMSG_EVENT, transactionReceipt);
        ArrayList<DeleteMsgEventResponse> responses = new ArrayList<DeleteMsgEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DeleteMsgEventResponse>() {
            @Override
            public DeleteMsgEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEMSG_EVENT, log);
                DeleteMsgEventResponse typedResponse = new DeleteMsgEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DeleteMsgEventResponse> deleteMsgEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEMSG_EVENT));
        return deleteMsgEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> createPlace(Place _place) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEPLACE,
                Arrays.<Type>asList(_place),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deletePlace(String _userContract, String _placeAssetContract, String _account, String _placeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETEPLACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _userContract),
                        new org.web3j.abi.datatypes.Address(160, _placeAssetContract),
                        new org.web3j.abi.datatypes.Utf8String(_account),
                        new org.web3j.abi.datatypes.Utf8String(_placeId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAllPlaceList() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALLPLACELIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Place>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Place> getById(String _placeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBYID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_placeId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Place>() {}));
        return executeRemoteCallSingleValueReturn(function, Place.class);
    }

    public RemoteFunctionCall<Place> getPlaceInfo() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPLACEINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Place>() {}));
        return executeRemoteCallSingleValueReturn(function, Place.class);
    }

    public RemoteFunctionCall<String> getPlaceNameByPlaceId(String _placeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPLACENAMEBYPLACEID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_placeId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isEqual(String a, String b) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISEQUAL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a),
                        new org.web3j.abi.datatypes.Utf8String(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> length() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LENGTH,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> placeInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PLACEINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> placeKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PLACEKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, String, BigInteger>> places(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PLACES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, String, BigInteger>>(function,
                new Callable<Tuple5<String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> removePlaceKeyAtIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEPLACEKEYATINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static PlaceContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PlaceContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PlaceContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PlaceContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PlaceContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PlaceContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PlaceContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PlaceContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PlaceContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PlaceContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PlaceContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PlaceContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<PlaceContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PlaceContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PlaceContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PlaceContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
    @Getter
    @Setter
    @ToString
    public static class Place extends DynamicStruct {
        public String placeId;

        public String placeName;

        public String placeAddress;

        public String placeManagerAccount;

        public BigInteger status;

        public Place(String placeId, String placeName, String placeAddress, String placeManagerAccount, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(placeId),new org.web3j.abi.datatypes.Utf8String(placeName),new org.web3j.abi.datatypes.Utf8String(placeAddress),new org.web3j.abi.datatypes.Utf8String(placeManagerAccount),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.placeId = placeId;
            this.placeName = placeName;
            this.placeAddress = placeAddress;
            this.placeManagerAccount = placeManagerAccount;
            this.status = status;
        }

        public Place(Utf8String placeId, Utf8String placeName, Utf8String placeAddress, Utf8String placeManagerAccount, Uint256 status) {
            super(placeId,placeName,placeAddress,placeManagerAccount,status);
            this.placeId = placeId.getValue();
            this.placeName = placeName.getValue();
            this.placeAddress = placeAddress.getValue();
            this.placeManagerAccount = placeManagerAccount.getValue();
            this.status = status.getValue();
        }
    }
    @Getter
    public static class DeleteMsgEventResponse extends BaseEventResponse {
        public BigInteger code;
    }
}
