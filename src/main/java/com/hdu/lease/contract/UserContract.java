package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.*;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class UserContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b506127c3806100296000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806381842aa61161007157806381842aa61461019057806391bbec1a146101c057806394ed7fd8146101f05780639e4135211461020e578063d02119681461022a578063dec632ad14610246576100a9565b806351911a8d146100ae57806367f58d19146100ca578063689e1c03146100fa5780636f1bd1a5146101305780637c9b7fdd14610160575b600080fd5b6100c860048036038101906100c3919061198e565b610262565b005b6100e460048036038101906100df9190611a06565b610353565b6040516100f19190611a6a565b60405180910390f35b610114600480360381019061010f9190611a06565b6103c6565b6040516101279796959493929190611b26565b60405180910390f35b61014a60048036038101906101459190611a06565b61063e565b6040516101579190611a6a565b60405180910390f35b61017a60048036038101906101759190611a06565b610674565b6040516101879190611cbb565b60405180910390f35b6101aa60048036038101906101a59190611d09565b610949565b6040516101b79190611d36565b60405180910390f35b6101da60048036038101906101d59190611d09565b6109f5565b6040516101e79190611ecb565b60405180910390f35b6101f8610ead565b6040516102059190611ecb565b60405180910390f35b6102286004803603810190610223919061201b565b6112cf565b005b610244600480360381019061023f919061198e565b611445565b005b610260600480360381019061025b919061214a565b611536565b005b600060018360405161027491906121cf565b908152602001604051809103902060009054906101000a900460ff16156102d05760019050816000846040516102aa91906121cf565b908152602001604051809103902060020190805190602001906102ce929190611754565b505b8015610314577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b5612710604051610307919061229d565b60405180910390a161034e565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127116040516103459190612378565b60405180910390a15b505050565b600060018260405161036591906121cf565b908152602001604051809103902060009054906101000a900460ff1680156103ae5750600260008360405161039a91906121cf565b908152602001604051809103902060050154145b156103bc57600190506103c1565b600090505b919050565b6000818051602081018201805184825260208301602085012081835280955050505050506000915090508060000180546103ff906123d5565b80601f016020809104026020016040519081016040528092919081815260200182805461042b906123d5565b80156104785780601f1061044d57610100808354040283529160200191610478565b820191906000526020600020905b81548152906001019060200180831161045b57829003601f168201915b50505050509080600101805461048d906123d5565b80601f01602080910402602001604051908101604052809291908181526020018280546104b9906123d5565b80156105065780601f106104db57610100808354040283529160200191610506565b820191906000526020600020905b8154815290600101906020018083116104e957829003601f168201915b50505050509080600201805461051b906123d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610547906123d5565b80156105945780601f1061056957610100808354040283529160200191610594565b820191906000526020600020905b81548152906001019060200180831161057757829003601f168201915b5050505050908060030180546105a9906123d5565b80601f01602080910402602001604051908101604052809291908181526020018280546105d5906123d5565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b5050505050908060040154908060050154908060060154905087565b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b61067c6117da565b60018260405161068c91906121cf565b908152602001604051809103902060009054906101000a900460ff1615610943576000826040516106bd91906121cf565b90815260200160405180910390206040518060e00160405290816000820180546106e6906123d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610712906123d5565b801561075f5780601f106107345761010080835404028352916020019161075f565b820191906000526020600020905b81548152906001019060200180831161074257829003601f168201915b50505050508152602001600182018054610778906123d5565b80601f01602080910402602001604051908101604052809291908181526020018280546107a4906123d5565b80156107f15780601f106107c6576101008083540402835291602001916107f1565b820191906000526020600020905b8154815290600101906020018083116107d457829003601f168201915b5050505050815260200160028201805461080a906123d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610836906123d5565b80156108835780601f1061085857610100808354040283529160200191610883565b820191906000526020600020905b81548152906001019060200180831161086657829003601f168201915b5050505050815260200160038201805461089c906123d5565b80601f01602080910402602001604051908101604052809291908181526020018280546108c8906123d5565b80156109155780601f106108ea57610100808354040283529160200191610915565b820191906000526020600020905b8154815290600101906020018083116108f857829003601f168201915b5050505050815260200160048201548152602001600582015481526020016006820154815250509050610944565b5b919050565b6002818154811061095957600080fd5b906000526020600020016000915090508054610974906123d5565b80601f01602080910402602001604051908101604052809291908181526020018280546109a0906123d5565b80156109ed5780601f106109c2576101008083540402835291602001916109ed565b820191906000526020600020905b8154815290600101906020018083116109d057829003601f168201915b505050505081565b60606000600a67ffffffffffffffff811115610a1457610a13611863565b5b604051908082528060200260200182016040528015610a4d57816020015b610a3a6117da565b815260200190600190039081610a325790505b509050610a586117da565b60606000808690505b60035481108015610a725750600a82105b15610def5760028181548110610a8b57610a8a612407565b5b906000526020600020018054610aa0906123d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610acc906123d5565b8015610b195780601f10610aee57610100808354040283529160200191610b19565b820191906000526020600020905b815481529060010190602001808311610afc57829003601f168201915b50505050509250600083604051610b3091906121cf565b90815260200160405180910390206040518060e0016040529081600082018054610b59906123d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610b85906123d5565b8015610bd25780601f10610ba757610100808354040283529160200191610bd2565b820191906000526020600020905b815481529060010190602001808311610bb557829003601f168201915b50505050508152602001600182018054610beb906123d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610c17906123d5565b8015610c645780601f10610c3957610100808354040283529160200191610c64565b820191906000526020600020905b815481529060010190602001808311610c4757829003601f168201915b50505050508152602001600282018054610c7d906123d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca9906123d5565b8015610cf65780601f10610ccb57610100808354040283529160200191610cf6565b820191906000526020600020905b815481529060010190602001808311610cd957829003601f168201915b50505050508152602001600382018054610d0f906123d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3b906123d5565b8015610d885780601f10610d5d57610100808354040283529160200191610d88565b820191906000526020600020905b815481529060010190602001808311610d6b57829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682015481525050935083858380610dbe90612465565b945081518110610dd157610dd0612407565b5b60200260200101819052508080610de790612465565b915050610a61565b5060008167ffffffffffffffff811115610e0c57610e0b611863565b5b604051908082528060200260200182016040528015610e4557816020015b610e326117da565b815260200190600190039081610e2a5790505b50905060005b82811015610e9f57858181518110610e6657610e65612407565b5b6020026020010151828281518110610e8157610e80612407565b5b60200260200101819052508080610e9790612465565b915050610e4b565b508095505050505050919050565b60606000600a67ffffffffffffffff811115610ecc57610ecb611863565b5b604051908082528060200260200182016040528015610f0557816020015b610ef26117da565b815260200190600190039081610eea5790505b509050610f106117da565b610f186117da565b6040518060400160405280600781526020017f74686520656e640000000000000000000000000000000000000000000000000081525081602001819052506000805b6002805490508110156112a5576001600060028381548110610f7f57610f7e612407565b5b90600052602060002001604051610f969190612542565b908152602001604051809103902060050154141561128c57600060028281548110610fc457610fc3612407565b5b90600052602060002001604051610fdb9190612542565b90815260200160405180910390206040518060e0016040529081600082018054611004906123d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611030906123d5565b801561107d5780601f106110525761010080835404028352916020019161107d565b820191906000526020600020905b81548152906001019060200180831161106057829003601f168201915b50505050508152602001600182018054611096906123d5565b80601f01602080910402602001604051908101604052809291908181526020018280546110c2906123d5565b801561110f5780601f106110e45761010080835404028352916020019161110f565b820191906000526020600020905b8154815290600101906020018083116110f257829003601f168201915b50505050508152602001600282018054611128906123d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611154906123d5565b80156111a15780601f10611176576101008083540402835291602001916111a1565b820191906000526020600020905b81548152906001019060200180831161118457829003601f168201915b505050505081526020016003820180546111ba906123d5565b80601f01602080910402602001604051908101604052809291908181526020018280546111e6906123d5565b80156112335780601f1061120857610100808354040283529160200191611233565b820191906000526020600020905b81548152906001019060200180831161121657829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505093508385838061126990612465565b94508151811061127c5761127b612407565b5b6020026020010181905250611291565b611292565b5b808061129d90612465565b915050610f5a565b50818482815181106112ba576112b9612407565b5b60200260200101819052508394505050505090565b6000600182600001516040516112e591906121cf565b908152602001604051809103902060009054906101000a900460ff16156113c357816000836000015160405161131b91906121cf565b90815260200160405180910390206000820151816000019080519060200190611345929190611754565b506020820151816001019080519060200190611362929190611754565b50604082015181600201908051906020019061137f929190611754565b50606082015181600301908051906020019061139c929190611754565b506080820151816004015560a0820151816005015560c08201518160060155905050600190505b8015611407577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127106040516113fa91906125a5565b60405180910390a1611441565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b5612711604051611438919061261f565b60405180910390a15b5050565b600060018360405161145791906121cf565b908152602001604051809103902060009054906101000a900460ff16156114b357600190508160008460405161148d91906121cf565b908152602001604051809103902060030190805190602001906114b1929190611754565b505b80156114f7577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127106040516114ea91906126bf565b60405180910390a1611531565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b5612711604051611528919061275f565b60405180910390a15b505050565b60005b815181101561175057600182828151811061155757611556612407565b5b60200260200101516000015160405161157091906121cf565b908152602001604051809103902060009054906101000a900460ff16156115965761173d565b8181815181106115a9576115a8612407565b5b602002602001015160008383815181106115c6576115c5612407565b5b6020026020010151600001516040516115df91906121cf565b90815260200160405180910390206000820151816000019080519060200190611609929190611754565b506020820151816001019080519060200190611626929190611754565b506040820151816002019080519060200190611643929190611754565b506060820151816003019080519060200190611660929190611754565b506080820151816004015560a0820151816005015560c0820151816006015590505060018083838151811061169857611697612407565b5b6020026020010151600001516040516116b191906121cf565b908152602001604051809103902060006101000a81548160ff02191690831515021790555060028282815181106116eb576116ea612407565b5b60200260200101516000015190806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061172f929190611754565b506002805490506003819055505b808061174890612465565b915050611539565b5050565b828054611760906123d5565b90600052602060002090601f01602090048101928261178257600085556117c9565b82601f1061179b57805160ff19168380011785556117c9565b828001600101855582156117c9579182015b828111156117c85782518255916020019190600101906117ad565b5b5090506117d69190611817565b5090565b6040518060e00160405280606081526020016060815260200160608152602001606081526020016000815260200160008152602001600081525090565b5b80821115611830576000816000905550600101611818565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61189b82611852565b810181811067ffffffffffffffff821117156118ba576118b9611863565b5b80604052505050565b60006118cd611834565b90506118d98282611892565b919050565b600067ffffffffffffffff8211156118f9576118f8611863565b5b61190282611852565b9050602081019050919050565b82818337600083830152505050565b600061193161192c846118de565b6118c3565b90508281526020810184848401111561194d5761194c61184d565b5b61195884828561190f565b509392505050565b600082601f83011261197557611974611848565b5b813561198584826020860161191e565b91505092915050565b600080604083850312156119a5576119a461183e565b5b600083013567ffffffffffffffff8111156119c3576119c2611843565b5b6119cf85828601611960565b925050602083013567ffffffffffffffff8111156119f0576119ef611843565b5b6119fc85828601611960565b9150509250929050565b600060208284031215611a1c57611a1b61183e565b5b600082013567ffffffffffffffff811115611a3a57611a39611843565b5b611a4684828501611960565b91505092915050565b60008115159050919050565b611a6481611a4f565b82525050565b6000602082019050611a7f6000830184611a5b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611abf578082015181840152602081019050611aa4565b83811115611ace576000848401525b50505050565b6000611adf82611a85565b611ae98185611a90565b9350611af9818560208601611aa1565b611b0281611852565b840191505092915050565b6000819050919050565b611b2081611b0d565b82525050565b600060e0820190508181036000830152611b40818a611ad4565b90508181036020830152611b548189611ad4565b90508181036040830152611b688188611ad4565b90508181036060830152611b7c8187611ad4565b9050611b8b6080830186611b17565b611b9860a0830185611b17565b611ba560c0830184611b17565b98975050505050505050565b600082825260208201905092915050565b6000611bcd82611a85565b611bd78185611bb1565b9350611be7818560208601611aa1565b611bf081611852565b840191505092915050565b611c0481611b0d565b82525050565b600060e0830160008301518482036000860152611c278282611bc2565b91505060208301518482036020860152611c418282611bc2565b91505060408301518482036040860152611c5b8282611bc2565b91505060608301518482036060860152611c758282611bc2565b9150506080830151611c8a6080860182611bfb565b5060a0830151611c9d60a0860182611bfb565b5060c0830151611cb060c0860182611bfb565b508091505092915050565b60006020820190508181036000830152611cd58184611c0a565b905092915050565b611ce681611b0d565b8114611cf157600080fd5b50565b600081359050611d0381611cdd565b92915050565b600060208284031215611d1f57611d1e61183e565b5b6000611d2d84828501611cf4565b91505092915050565b60006020820190508181036000830152611d508184611ad4565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060e0830160008301518482036000860152611da18282611bc2565b91505060208301518482036020860152611dbb8282611bc2565b91505060408301518482036040860152611dd58282611bc2565b91505060608301518482036060860152611def8282611bc2565b9150506080830151611e046080860182611bfb565b5060a0830151611e1760a0860182611bfb565b5060c0830151611e2a60c0860182611bfb565b508091505092915050565b6000611e418383611d84565b905092915050565b6000602082019050919050565b6000611e6182611d58565b611e6b8185611d63565b935083602082028501611e7d85611d74565b8060005b85811015611eb95784840389528151611e9a8582611e35565b9450611ea583611e49565b925060208a01995050600181019050611e81565b50829750879550505050505092915050565b60006020820190508181036000830152611ee58184611e56565b905092915050565b600080fd5b600080fd5b600060e08284031215611f0d57611f0c611eed565b5b611f1760e06118c3565b9050600082013567ffffffffffffffff811115611f3757611f36611ef2565b5b611f4384828501611960565b600083015250602082013567ffffffffffffffff811115611f6757611f66611ef2565b5b611f7384828501611960565b602083015250604082013567ffffffffffffffff811115611f9757611f96611ef2565b5b611fa384828501611960565b604083015250606082013567ffffffffffffffff811115611fc757611fc6611ef2565b5b611fd384828501611960565b6060830152506080611fe784828501611cf4565b60808301525060a0611ffb84828501611cf4565b60a08301525060c061200f84828501611cf4565b60c08301525092915050565b6000602082840312156120315761203061183e565b5b600082013567ffffffffffffffff81111561204f5761204e611843565b5b61205b84828501611ef7565b91505092915050565b600067ffffffffffffffff82111561207f5761207e611863565b5b602082029050602081019050919050565b600080fd5b60006120a86120a384612064565b6118c3565b905080838252602082019050602084028301858111156120cb576120ca612090565b5b835b8181101561211257803567ffffffffffffffff8111156120f0576120ef611848565b5b8086016120fd8982611ef7565b855260208501945050506020810190506120cd565b5050509392505050565b600082601f83011261213157612130611848565b5b8135612141848260208601612095565b91505092915050565b6000602082840312156121605761215f61183e565b5b600082013567ffffffffffffffff81111561217e5761217d611843565b5b61218a8482850161211c565b91505092915050565b600081905092915050565b60006121a982611a85565b6121b38185612193565b93506121c3818560208601611aa1565b80840191505092915050565b60006121db828461219e565b915081905092915050565b7f6d6f64696679205573657227732070686f6e65206279206163636f756e74207360008201527f7563636573732100000000000000000000000000000000000000000000000000602082015250565b6000612242602783611a90565b915061224d826121e6565b604082019050919050565b6000819050919050565b6000819050919050565b600061228761228261227d84612258565b612262565b611b0d565b9050919050565b6122978161226c565b82525050565b600060408201905081810360008301526122b681612235565b90506122c5602083018461228e565b92915050565b7f6d6f64696679205573657227732070686f6e65206279206163636f756e74206660008201527f61696c6564210000000000000000000000000000000000000000000000000000602082015250565b6000612327602683611a90565b9150612332826122cb565b604082019050919050565b6000819050919050565b600061236261235d6123588461233d565b612262565b611b0d565b9050919050565b61237281612347565b82525050565b600060408201905081810360008301526123918161231a565b90506123a06020830184612369565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806123ed57607f821691505b60208210811415612401576124006123a6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061247082611b0d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156124a3576124a2612436565b5b600182019050919050565b60008190508160005260206000209050919050565b600081546124d0816123d5565b6124da8186612193565b945060018216600081146124f5576001811461250657612539565b60ff19831686528186019350612539565b61250f856124ae565b60005b8381101561253157815481890152600182019150602081019050612512565b838801955050505b50505092915050565b600061254e82846124c3565b915081905092915050565b7f6d6f646966792075736572696e666f2062792069642073756363657373210000600082015250565b600061258f601e83611a90565b915061259a82612559565b602082019050919050565b600060408201905081810360008301526125be81612582565b90506125cd602083018461228e565b92915050565b7f6d6f646966792075736572696e666f206279206964206661696c656421000000600082015250565b6000612609601d83611a90565b9150612614826125d3565b602082019050919050565b60006040820190508181036000830152612638816125fc565b90506126476020830184612369565b92915050565b7f6d6f64696679207573657227732070617373776f7264206279206163636f756e60008201527f7420737563636573732100000000000000000000000000000000000000000000602082015250565b60006126a9602a83611a90565b91506126b48261264d565b604082019050919050565b600060408201905081810360008301526126d88161269c565b90506126e7602083018461228e565b92915050565b7f6d6f64696679207573657227732070617373776f7264206279206163636f756e60008201527f74206661696c6564210000000000000000000000000000000000000000000000602082015250565b6000612749602983611a90565b9150612754826126ed565b604082019050919050565b600060408201905081810360008301526127788161273c565b90506127876020830184612369565b9291505056fea2646970667358221220aff5675e1108626ccb80153ce39da3214ae3985d4a2f7f95c7c080dbc623de9064736f6c634300080a0033";

    public static final String FUNC_BATCHADDUSER = "batchAddUser";

    public static final String FUNC_GETROLELIST = "getRoleList";

    public static final String FUNC_GETUSERINFO = "getUserInfo";

    public static final String FUNC_GETUSERLIST = "getUserList";

    public static final String FUNC_ISROLLER2 = "isRoller2";

    public static final String FUNC_MODIFYPASSWORDBYACCOUNT = "modifyPasswordByAccount";

    public static final String FUNC_MODIFYPHONEBYACCOUNT = "modifyPhoneByAccount";

    public static final String FUNC_MODIFYUSERINFOBYID = "modifyUserInfoById";

    public static final String FUNC_USERINSERTED = "userInserted";

    public static final String FUNC_USERKEY = "userKey";

    public static final String FUNC_USERS = "users";

    public static final Event LOG_EVENT = new Event("Log",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RETURNUSERINFO_EVENT = new Event("returnUserInfo",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<User>() {}));
    ;

    @Deprecated
    protected UserContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected UserContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected UserContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected UserContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<LogEventResponse> getLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOG_EVENT, transactionReceipt);
        ArrayList<LogEventResponse> responses = new ArrayList<LogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogEventResponse typedResponse = new LogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogEventResponse> logEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogEventResponse>() {
            @Override
            public LogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOG_EVENT, log);
                LogEventResponse typedResponse = new LogEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogEventResponse> logEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOG_EVENT));
        return logEventFlowable(filter);
    }

    public List<ReturnUserInfoEventResponse> getReturnUserInfoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETURNUSERINFO_EVENT, transactionReceipt);
        ArrayList<ReturnUserInfoEventResponse> responses = new ArrayList<ReturnUserInfoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReturnUserInfoEventResponse typedResponse = new ReturnUserInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (User) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReturnUserInfoEventResponse> returnUserInfoEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReturnUserInfoEventResponse>() {
            @Override
            public ReturnUserInfoEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RETURNUSERINFO_EVENT, log);
                ReturnUserInfoEventResponse typedResponse = new ReturnUserInfoEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (User) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ReturnUserInfoEventResponse> returnUserInfoEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RETURNUSERINFO_EVENT));
        return returnUserInfoEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> batchAddUser(List<User> _users) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHADDUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<User>(User.class, _users)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getRoleList() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLELIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<User> getUserInfo(String _account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERINFO,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<User>() {}));
        return executeRemoteCallSingleValueReturn(function, User.class);
    }

    public RemoteFunctionCall<List> getUserList(BigInteger _from) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_from)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isRoller2(String _account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISROLLER2,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyPasswordByAccount(String _account, String _password) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYPASSWORDBYACCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account),
                        new org.web3j.abi.datatypes.Utf8String(_password)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyPhoneByAccount(String _account, String _phone) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYPHONEBYACCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account),
                        new org.web3j.abi.datatypes.Utf8String(_phone)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyUserInfoById(User _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYUSERINFOBYID,
                Arrays.<Type>asList(_user),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> userInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> userKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>> users(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    @Deprecated
    public static UserContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static UserContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static UserContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new UserContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static UserContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new UserContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<UserContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<UserContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
    @Getter
    @Setter
    @ToString
    public static class User extends DynamicStruct {
        public String account;

        public String name;

        public String phone;

        public String password;

        public BigInteger isBindPhone;

        public BigInteger role;

        public BigInteger status;

        public User(String account, String name, String phone, String password, BigInteger isBindPhone, BigInteger role, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(account),new org.web3j.abi.datatypes.Utf8String(name),new org.web3j.abi.datatypes.Utf8String(phone),new org.web3j.abi.datatypes.Utf8String(password),new org.web3j.abi.datatypes.generated.Uint256(isBindPhone),new org.web3j.abi.datatypes.generated.Uint256(role),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.account = account;
            this.name = name;
            this.phone = phone;
            this.password = password;
            this.isBindPhone = isBindPhone;
            this.role = role;
            this.status = status;
        }

        public User(Utf8String account, Utf8String name, Utf8String phone, Utf8String password, Uint256 isBindPhone, Uint256 role, Uint256 status) {
            super(account,name,phone,password,isBindPhone,role,status);
            this.account = account.getValue();
            this.name = name.getValue();
            this.phone = phone.getValue();
            this.password = password.getValue();
            this.isBindPhone = isBindPhone.getValue();
            this.role = role.getValue();
            this.status = status.getValue();
        }
    }

    public static class LogEventResponse extends BaseEventResponse {
        public String message;

        public BigInteger value;
    }

    public static class ReturnUserInfoEventResponse extends BaseEventResponse {
        public String message;

        public User user;
    }
}
