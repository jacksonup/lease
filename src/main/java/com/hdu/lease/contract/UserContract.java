package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class UserContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b506132a0806100296000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806391bbec1a1161008c5780639f9d06a9116100665780639f9d06a914610289578063a8c5f884146102a7578063d0211968146102d7578063dec632ad146102f3576100ea565b806391bbec1a1461021f57806394ed7fd81461024f5780639e4135211461026d576100ea565b8063689e1c03116100c8578063689e1c03146101595780636f1bd1a51461018f5780637c9b7fdd146101bf57806381842aa6146101ef576100ea565b806306661abd146100ef57806351911a8d1461010d57806367f58d1914610129575b600080fd5b6100f761030f565b6040516101049190612153565b60405180910390f35b610127600480360381019061012291906122c8565b610319565b005b610143600480360381019061013e9190612340565b61040a565b60405161015091906123a4565b60405180910390f35b610173600480360381019061016e9190612340565b61047d565b6040516101869796959493929190612447565b60405180910390f35b6101a960048036038101906101a49190612340565b6106f5565b6040516101b691906123a4565b60405180910390f35b6101d960048036038101906101d49190612340565b61072b565b6040516101e691906125dc565b60405180910390f35b6102096004803603810190610204919061262a565b610a00565b6040516102169190612657565b60405180910390f35b6102396004803603810190610234919061262a565b610aac565b60405161024691906127ec565b60405180910390f35b610257610f64565b60405161026491906127ec565b60405180910390f35b6102876004803603810190610282919061293c565b611383565b005b6102916114f9565b60405161029e91906127ec565b60405180910390f35b6102c160048036038101906102bc9190612a4d565b611852565b6040516102ce91906127ec565b60405180910390f35b6102f160048036038101906102ec91906122c8565b611d42565b005b61030d60048036038101906103089190612b9d565b611e33565b005b6000600354905090565b600060018360405161032b9190612c22565b908152602001604051809103902060009054906101000a900460ff16156103875760019050816000846040516103619190612c22565b9081526020016040518091039020600201908051906020019061038592919061205a565b505b80156103cb577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127106040516103be9190612cf0565b60405180910390a1610405565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127116040516103fc9190612dcb565b60405180910390a15b505050565b600060018260405161041c9190612c22565b908152602001604051809103902060009054906101000a900460ff168015610465575060026000836040516104519190612c22565b908152602001604051809103902060050154145b156104735760019050610478565b600090505b919050565b6000818051602081018201805184825260208301602085012081835280955050505050506000915090508060000180546104b690612e28565b80601f01602080910402602001604051908101604052809291908181526020018280546104e290612e28565b801561052f5780601f106105045761010080835404028352916020019161052f565b820191906000526020600020905b81548152906001019060200180831161051257829003601f168201915b50505050509080600101805461054490612e28565b80601f016020809104026020016040519081016040528092919081815260200182805461057090612e28565b80156105bd5780601f10610592576101008083540402835291602001916105bd565b820191906000526020600020905b8154815290600101906020018083116105a057829003601f168201915b5050505050908060020180546105d290612e28565b80601f01602080910402602001604051908101604052809291908181526020018280546105fe90612e28565b801561064b5780601f106106205761010080835404028352916020019161064b565b820191906000526020600020905b81548152906001019060200180831161062e57829003601f168201915b50505050509080600301805461066090612e28565b80601f016020809104026020016040519081016040528092919081815260200182805461068c90612e28565b80156106d95780601f106106ae576101008083540402835291602001916106d9565b820191906000526020600020905b8154815290600101906020018083116106bc57829003601f168201915b5050505050908060040154908060050154908060060154905087565b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6107336120e0565b6001826040516107439190612c22565b908152602001604051809103902060009054906101000a900460ff16156109fa576000826040516107749190612c22565b90815260200160405180910390206040518060e001604052908160008201805461079d90612e28565b80601f01602080910402602001604051908101604052809291908181526020018280546107c990612e28565b80156108165780601f106107eb57610100808354040283529160200191610816565b820191906000526020600020905b8154815290600101906020018083116107f957829003601f168201915b5050505050815260200160018201805461082f90612e28565b80601f016020809104026020016040519081016040528092919081815260200182805461085b90612e28565b80156108a85780601f1061087d576101008083540402835291602001916108a8565b820191906000526020600020905b81548152906001019060200180831161088b57829003601f168201915b505050505081526020016002820180546108c190612e28565b80601f01602080910402602001604051908101604052809291908181526020018280546108ed90612e28565b801561093a5780601f1061090f5761010080835404028352916020019161093a565b820191906000526020600020905b81548152906001019060200180831161091d57829003601f168201915b5050505050815260200160038201805461095390612e28565b80601f016020809104026020016040519081016040528092919081815260200182805461097f90612e28565b80156109cc5780601f106109a1576101008083540402835291602001916109cc565b820191906000526020600020905b8154815290600101906020018083116109af57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505090506109fb565b5b919050565b60028181548110610a1057600080fd5b906000526020600020016000915090508054610a2b90612e28565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5790612e28565b8015610aa45780601f10610a7957610100808354040283529160200191610aa4565b820191906000526020600020905b815481529060010190602001808311610a8757829003601f168201915b505050505081565b60606000600a67ffffffffffffffff811115610acb57610aca61219d565b5b604051908082528060200260200182016040528015610b0457816020015b610af16120e0565b815260200190600190039081610ae95790505b509050610b0f6120e0565b60606000808690505b60035481108015610b295750600a82105b15610ea65760028181548110610b4257610b41612e5a565b5b906000526020600020018054610b5790612e28565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8390612e28565b8015610bd05780601f10610ba557610100808354040283529160200191610bd0565b820191906000526020600020905b815481529060010190602001808311610bb357829003601f168201915b50505050509250600083604051610be79190612c22565b90815260200160405180910390206040518060e0016040529081600082018054610c1090612e28565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3c90612e28565b8015610c895780601f10610c5e57610100808354040283529160200191610c89565b820191906000526020600020905b815481529060010190602001808311610c6c57829003601f168201915b50505050508152602001600182018054610ca290612e28565b80601f0160208091040260200160405190810160405280929190818152602001828054610cce90612e28565b8015610d1b5780601f10610cf057610100808354040283529160200191610d1b565b820191906000526020600020905b815481529060010190602001808311610cfe57829003601f168201915b50505050508152602001600282018054610d3490612e28565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6090612e28565b8015610dad5780601f10610d8257610100808354040283529160200191610dad565b820191906000526020600020905b815481529060010190602001808311610d9057829003601f168201915b50505050508152602001600382018054610dc690612e28565b80601f0160208091040260200160405190810160405280929190818152602001828054610df290612e28565b8015610e3f5780601f10610e1457610100808354040283529160200191610e3f565b820191906000526020600020905b815481529060010190602001808311610e2257829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682015481525050935083858380610e7590612eb8565b945081518110610e8857610e87612e5a565b5b60200260200101819052508080610e9e90612eb8565b915050610b18565b5060008167ffffffffffffffff811115610ec357610ec261219d565b5b604051908082528060200260200182016040528015610efc57816020015b610ee96120e0565b815260200190600190039081610ee15790505b50905060005b82811015610f5657858181518110610f1d57610f1c612e5a565b5b6020026020010151828281518110610f3857610f37612e5a565b5b60200260200101819052508080610f4e90612eb8565b915050610f02565b508095505050505050919050565b60606000600a67ffffffffffffffff811115610f8357610f8261219d565b5b604051908082528060200260200182016040528015610fbc57816020015b610fa96120e0565b815260200190600190039081610fa15790505b509050610fc76120e0565b610fcf6120e0565b6040518060400160405280600781526020017f74686520656e640000000000000000000000000000000000000000000000000081525081602001819052506000805b60035481101561135957600160006002838154811061103357611032612e5a565b5b9060005260206000200160405161104a9190612f95565b90815260200160405180910390206005015414156113405760006002828154811061107857611077612e5a565b5b9060005260206000200160405161108f9190612f95565b90815260200160405180910390206040518060e00160405290816000820180546110b890612e28565b80601f01602080910402602001604051908101604052809291908181526020018280546110e490612e28565b80156111315780601f1061110657610100808354040283529160200191611131565b820191906000526020600020905b81548152906001019060200180831161111457829003601f168201915b5050505050815260200160018201805461114a90612e28565b80601f016020809104026020016040519081016040528092919081815260200182805461117690612e28565b80156111c35780601f10611198576101008083540402835291602001916111c3565b820191906000526020600020905b8154815290600101906020018083116111a657829003601f168201915b505050505081526020016002820180546111dc90612e28565b80601f016020809104026020016040519081016040528092919081815260200182805461120890612e28565b80156112555780601f1061122a57610100808354040283529160200191611255565b820191906000526020600020905b81548152906001019060200180831161123857829003601f168201915b5050505050815260200160038201805461126e90612e28565b80601f016020809104026020016040519081016040528092919081815260200182805461129a90612e28565b80156112e75780601f106112bc576101008083540402835291602001916112e7565b820191906000526020600020905b8154815290600101906020018083116112ca57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505093508385838061131d90612eb8565b9450815181106113305761132f612e5a565b5b6020026020010181905250611345565b611346565b5b808061135190612eb8565b915050611011565b508184828151811061136e5761136d612e5a565b5b60200260200101819052508394505050505090565b6000600182600001516040516113999190612c22565b908152602001604051809103902060009054906101000a900460ff16156114775781600083600001516040516113cf9190612c22565b908152602001604051809103902060008201518160000190805190602001906113f992919061205a565b50602082015181600101908051906020019061141692919061205a565b50604082015181600201908051906020019061143392919061205a565b50606082015181600301908051906020019061145092919061205a565b506080820151816004015560a0820151816005015560c08201518160060155905050600190505b80156114bb577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127106040516114ae9190612ff8565b60405180910390a16114f5565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127116040516114ec9190613072565b60405180910390a15b5050565b606060035467ffffffffffffffff8111156115175761151661219d565b5b60405190808252806020026020018201604052801561155057816020015b61153d6120e0565b8152602001906001900390816115355790505b5090506000805b60028054905081101561184d5760006002828154811061157a57611579612e5a565b5b906000526020600020016040516115919190612f95565b90815260200160405180910390206040518060e00160405290816000820180546115ba90612e28565b80601f01602080910402602001604051908101604052809291908181526020018280546115e690612e28565b80156116335780601f1061160857610100808354040283529160200191611633565b820191906000526020600020905b81548152906001019060200180831161161657829003601f168201915b5050505050815260200160018201805461164c90612e28565b80601f016020809104026020016040519081016040528092919081815260200182805461167890612e28565b80156116c55780601f1061169a576101008083540402835291602001916116c5565b820191906000526020600020905b8154815290600101906020018083116116a857829003601f168201915b505050505081526020016002820180546116de90612e28565b80601f016020809104026020016040519081016040528092919081815260200182805461170a90612e28565b80156117575780601f1061172c57610100808354040283529160200191611757565b820191906000526020600020905b81548152906001019060200180831161173a57829003601f168201915b5050505050815260200160038201805461177090612e28565b80601f016020809104026020016040519081016040528092919081815260200182805461179c90612e28565b80156117e95780601f106117be576101008083540402835291602001916117e9565b820191906000526020600020905b8154815290600101906020018083116117cc57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505083838061181c90612eb8565b94508151811061182f5761182e612e5a565b5b6020026020010181905250808061184590612eb8565b915050611557565b505090565b6060600060028054905067ffffffffffffffff8111156118755761187461219d565b5b6040519080825280602002602001820160405280156118ae57816020015b61189b6120e0565b8152602001906001900390816118935790505b5090506000805b8651811015611c295760005b600354811015611c15578782815181106118de576118dd612e5a565b5b60200260200101516000600283815481106118fc576118fb612e5a565b5b906000526020600020016040516119139190612f95565b9081526020016040518091039020600501541415611c025760006002828154811061194157611940612e5a565b5b906000526020600020016040516119589190612f95565b90815260200160405180910390206040518060e001604052908160008201805461198190612e28565b80601f01602080910402602001604051908101604052809291908181526020018280546119ad90612e28565b80156119fa5780601f106119cf576101008083540402835291602001916119fa565b820191906000526020600020905b8154815290600101906020018083116119dd57829003601f168201915b50505050508152602001600182018054611a1390612e28565b80601f0160208091040260200160405190810160405280929190818152602001828054611a3f90612e28565b8015611a8c5780601f10611a6157610100808354040283529160200191611a8c565b820191906000526020600020905b815481529060010190602001808311611a6f57829003601f168201915b50505050508152602001600282018054611aa590612e28565b80601f0160208091040260200160405190810160405280929190818152602001828054611ad190612e28565b8015611b1e5780601f10611af357610100808354040283529160200191611b1e565b820191906000526020600020905b815481529060010190602001808311611b0157829003601f168201915b50505050508152602001600382018054611b3790612e28565b80601f0160208091040260200160405190810160405280929190818152602001828054611b6390612e28565b8015611bb05780601f10611b8557610100808354040283529160200191611bb0565b820191906000526020600020905b815481529060010190602001808311611b9357829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682015481525050848480611be390612eb8565b955081518110611bf657611bf5612e5a565b5b60200260200101819052505b8080611c0d90612eb8565b9150506118c1565b508080611c2190612eb8565b9150506118b5565b5084841015611c39575050611d3b565b6001600354611c4891906130a0565b841115611c61576001600354611c5e91906130a0565b93505b60018585611c6f91906130a0565b611c7991906130d4565b67ffffffffffffffff811115611c9257611c9161219d565b5b604051908082528060200260200182016040528015611ccb57816020015b611cb86120e0565b815260200190600190039081611cb05790505b5092506000905060008590505b848111611d3757828181518110611cf257611cf1612e5a565b5b6020026020010151848380611d0690612eb8565b945081518110611d1957611d18612e5a565b5b60200260200101819052508080611d2f90612eb8565b915050611cd8565b5050505b9392505050565b6000600183604051611d549190612c22565b908152602001604051809103902060009054906101000a900460ff1615611db0576001905081600084604051611d8a9190612c22565b90815260200160405180910390206003019080519060200190611dae92919061205a565b505b8015611df4577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b5612710604051611de7919061319c565b60405180910390a1611e2e565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b5612711604051611e25919061323c565b60405180910390a15b505050565b60005b8151811015612056576001828281518110611e5457611e53612e5a565b5b602002602001015160000151604051611e6d9190612c22565b908152602001604051809103902060009054906101000a900460ff1615611e9357612043565b818181518110611ea657611ea5612e5a565b5b60200260200101516000838381518110611ec357611ec2612e5a565b5b602002602001015160000151604051611edc9190612c22565b90815260200160405180910390206000820151816000019080519060200190611f0692919061205a565b506020820151816001019080519060200190611f2392919061205a565b506040820151816002019080519060200190611f4092919061205a565b506060820151816003019080519060200190611f5d92919061205a565b506080820151816004015560a0820151816005015560c08201518160060155905050600180838381518110611f9557611f94612e5a565b5b602002602001015160000151604051611fae9190612c22565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506002828281518110611fe857611fe7612e5a565b5b60200260200101516000015190806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061202c92919061205a565b50600160035461203c91906130d4565b6003819055505b808061204e90612eb8565b915050611e36565b5050565b82805461206690612e28565b90600052602060002090601f01602090048101928261208857600085556120cf565b82601f106120a157805160ff19168380011785556120cf565b828001600101855582156120cf579182015b828111156120ce5782518255916020019190600101906120b3565b5b5090506120dc919061211d565b5090565b6040518060e00160405280606081526020016060815260200160608152602001606081526020016000815260200160008152602001600081525090565b5b8082111561213657600081600090555060010161211e565b5090565b6000819050919050565b61214d8161213a565b82525050565b60006020820190506121686000830184612144565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121d58261218c565b810181811067ffffffffffffffff821117156121f4576121f361219d565b5b80604052505050565b600061220761216e565b905061221382826121cc565b919050565b600067ffffffffffffffff8211156122335761223261219d565b5b61223c8261218c565b9050602081019050919050565b82818337600083830152505050565b600061226b61226684612218565b6121fd565b90508281526020810184848401111561228757612286612187565b5b612292848285612249565b509392505050565b600082601f8301126122af576122ae612182565b5b81356122bf848260208601612258565b91505092915050565b600080604083850312156122df576122de612178565b5b600083013567ffffffffffffffff8111156122fd576122fc61217d565b5b6123098582860161229a565b925050602083013567ffffffffffffffff81111561232a5761232961217d565b5b6123368582860161229a565b9150509250929050565b60006020828403121561235657612355612178565b5b600082013567ffffffffffffffff8111156123745761237361217d565b5b6123808482850161229a565b91505092915050565b60008115159050919050565b61239e81612389565b82525050565b60006020820190506123b96000830184612395565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123f95780820151818401526020810190506123de565b83811115612408576000848401525b50505050565b6000612419826123bf565b61242381856123ca565b93506124338185602086016123db565b61243c8161218c565b840191505092915050565b600060e0820190508181036000830152612461818a61240e565b90508181036020830152612475818961240e565b90508181036040830152612489818861240e565b9050818103606083015261249d818761240e565b90506124ac6080830186612144565b6124b960a0830185612144565b6124c660c0830184612144565b98975050505050505050565b600082825260208201905092915050565b60006124ee826123bf565b6124f881856124d2565b93506125088185602086016123db565b6125118161218c565b840191505092915050565b6125258161213a565b82525050565b600060e083016000830151848203600086015261254882826124e3565b9150506020830151848203602086015261256282826124e3565b9150506040830151848203604086015261257c82826124e3565b9150506060830151848203606086015261259682826124e3565b91505060808301516125ab608086018261251c565b5060a08301516125be60a086018261251c565b5060c08301516125d160c086018261251c565b508091505092915050565b600060208201905081810360008301526125f6818461252b565b905092915050565b6126078161213a565b811461261257600080fd5b50565b600081359050612624816125fe565b92915050565b6000602082840312156126405761263f612178565b5b600061264e84828501612615565b91505092915050565b60006020820190508181036000830152612671818461240e565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060e08301600083015184820360008601526126c282826124e3565b915050602083015184820360208601526126dc82826124e3565b915050604083015184820360408601526126f682826124e3565b9150506060830151848203606086015261271082826124e3565b9150506080830151612725608086018261251c565b5060a083015161273860a086018261251c565b5060c083015161274b60c086018261251c565b508091505092915050565b600061276283836126a5565b905092915050565b6000602082019050919050565b600061278282612679565b61278c8185612684565b93508360208202850161279e85612695565b8060005b858110156127da57848403895281516127bb8582612756565b94506127c68361276a565b925060208a019950506001810190506127a2565b50829750879550505050505092915050565b600060208201905081810360008301526128068184612777565b905092915050565b600080fd5b600080fd5b600060e0828403121561282e5761282d61280e565b5b61283860e06121fd565b9050600082013567ffffffffffffffff81111561285857612857612813565b5b6128648482850161229a565b600083015250602082013567ffffffffffffffff81111561288857612887612813565b5b6128948482850161229a565b602083015250604082013567ffffffffffffffff8111156128b8576128b7612813565b5b6128c48482850161229a565b604083015250606082013567ffffffffffffffff8111156128e8576128e7612813565b5b6128f48482850161229a565b606083015250608061290884828501612615565b60808301525060a061291c84828501612615565b60a08301525060c061293084828501612615565b60c08301525092915050565b60006020828403121561295257612951612178565b5b600082013567ffffffffffffffff8111156129705761296f61217d565b5b61297c84828501612818565b91505092915050565b600067ffffffffffffffff8211156129a05761299f61219d565b5b602082029050602081019050919050565b600080fd5b60006129c96129c484612985565b6121fd565b905080838252602082019050602084028301858111156129ec576129eb6129b1565b5b835b81811015612a155780612a018882612615565b8452602084019350506020810190506129ee565b5050509392505050565b600082601f830112612a3457612a33612182565b5b8135612a448482602086016129b6565b91505092915050565b600080600060608486031215612a6657612a65612178565b5b600084013567ffffffffffffffff811115612a8457612a8361217d565b5b612a9086828701612a1f565b9350506020612aa186828701612615565b9250506040612ab286828701612615565b9150509250925092565b600067ffffffffffffffff821115612ad757612ad661219d565b5b602082029050602081019050919050565b6000612afb612af684612abc565b6121fd565b90508083825260208201905060208402830185811115612b1e57612b1d6129b1565b5b835b81811015612b6557803567ffffffffffffffff811115612b4357612b42612182565b5b808601612b508982612818565b85526020850194505050602081019050612b20565b5050509392505050565b600082601f830112612b8457612b83612182565b5b8135612b94848260208601612ae8565b91505092915050565b600060208284031215612bb357612bb2612178565b5b600082013567ffffffffffffffff811115612bd157612bd061217d565b5b612bdd84828501612b6f565b91505092915050565b600081905092915050565b6000612bfc826123bf565b612c068185612be6565b9350612c168185602086016123db565b80840191505092915050565b6000612c2e8284612bf1565b915081905092915050565b7f6d6f64696679205573657227732070686f6e65206279206163636f756e74207360008201527f7563636573732100000000000000000000000000000000000000000000000000602082015250565b6000612c956027836123ca565b9150612ca082612c39565b604082019050919050565b6000819050919050565b6000819050919050565b6000612cda612cd5612cd084612cab565b612cb5565b61213a565b9050919050565b612cea81612cbf565b82525050565b60006040820190508181036000830152612d0981612c88565b9050612d186020830184612ce1565b92915050565b7f6d6f64696679205573657227732070686f6e65206279206163636f756e74206660008201527f61696c6564210000000000000000000000000000000000000000000000000000602082015250565b6000612d7a6026836123ca565b9150612d8582612d1e565b604082019050919050565b6000819050919050565b6000612db5612db0612dab84612d90565b612cb5565b61213a565b9050919050565b612dc581612d9a565b82525050565b60006040820190508181036000830152612de481612d6d565b9050612df36020830184612dbc565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e4057607f821691505b60208210811415612e5457612e53612df9565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ec38261213a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612ef657612ef5612e89565b5b600182019050919050565b60008190508160005260206000209050919050565b60008154612f2381612e28565b612f2d8186612be6565b94506001821660008114612f485760018114612f5957612f8c565b60ff19831686528186019350612f8c565b612f6285612f01565b60005b83811015612f8457815481890152600182019150602081019050612f65565b838801955050505b50505092915050565b6000612fa18284612f16565b915081905092915050565b7f6d6f646966792075736572696e666f2062792069642073756363657373210000600082015250565b6000612fe2601e836123ca565b9150612fed82612fac565b602082019050919050565b6000604082019050818103600083015261301181612fd5565b90506130206020830184612ce1565b92915050565b7f6d6f646966792075736572696e666f206279206964206661696c656421000000600082015250565b600061305c601d836123ca565b915061306782613026565b602082019050919050565b6000604082019050818103600083015261308b8161304f565b905061309a6020830184612dbc565b92915050565b60006130ab8261213a565b91506130b68361213a565b9250828210156130c9576130c8612e89565b5b828203905092915050565b60006130df8261213a565b91506130ea8361213a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561311f5761311e612e89565b5b828201905092915050565b7f6d6f64696679207573657227732070617373776f7264206279206163636f756e60008201527f7420737563636573732100000000000000000000000000000000000000000000602082015250565b6000613186602a836123ca565b91506131918261312a565b604082019050919050565b600060408201905081810360008301526131b581613179565b90506131c46020830184612ce1565b92915050565b7f6d6f64696679207573657227732070617373776f7264206279206163636f756e60008201527f74206661696c6564210000000000000000000000000000000000000000000000602082015250565b60006132266029836123ca565b9150613231826131ca565b604082019050919050565b6000604082019050818103600083015261325581613219565b90506132646020830184612dbc565b9291505056fea2646970667358221220b3e7f5919f3e6aec206996c62e774ec528fbb68e830017aa5c62ddfbf67a71e164736f6c634300080a0033";

    public static final String FUNC_BATCHADDUSER = "batchAddUser";

    public static final String FUNC_COUNT = "count";

    public static final String FUNC_GETALLLIST = "getAllList";

    public static final String FUNC_GETLISTBYROLEIDPAGE = "getListByRoleIdPage";

    public static final String FUNC_GETROLELIST = "getRoleList";

    public static final String FUNC_GETUSERINFO = "getUserInfo";

    public static final String FUNC_GETUSERLIST = "getUserList";

    public static final String FUNC_ISROLLER2 = "isRoller2";

    public static final String FUNC_MODIFYPASSWORDBYACCOUNT = "modifyPasswordByAccount";

    public static final String FUNC_MODIFYPHONEBYACCOUNT = "modifyPhoneByAccount";

    public static final String FUNC_MODIFYUSERINFOBYID = "modifyUserInfoById";

    public static final String FUNC_USERINSERTED = "userInserted";

    public static final String FUNC_USERKEY = "userKey";

    public static final String FUNC_USERS = "users";

    public static final Event LOG_EVENT = new Event("Log",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RETURNUSERINFO_EVENT = new Event("returnUserInfo",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<User>() {}));
    ;

    @Deprecated
    protected UserContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected UserContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected UserContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected UserContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<LogEventResponse> getLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOG_EVENT, transactionReceipt);
        ArrayList<LogEventResponse> responses = new ArrayList<LogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogEventResponse typedResponse = new LogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogEventResponse> logEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogEventResponse>() {
            @Override
            public LogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOG_EVENT, log);
                LogEventResponse typedResponse = new LogEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogEventResponse> logEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOG_EVENT));
        return logEventFlowable(filter);
    }

    public List<ReturnUserInfoEventResponse> getReturnUserInfoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETURNUSERINFO_EVENT, transactionReceipt);
        ArrayList<ReturnUserInfoEventResponse> responses = new ArrayList<ReturnUserInfoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReturnUserInfoEventResponse typedResponse = new ReturnUserInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (User) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReturnUserInfoEventResponse> returnUserInfoEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReturnUserInfoEventResponse>() {
            @Override
            public ReturnUserInfoEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RETURNUSERINFO_EVENT, log);
                ReturnUserInfoEventResponse typedResponse = new ReturnUserInfoEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (User) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ReturnUserInfoEventResponse> returnUserInfoEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RETURNUSERINFO_EVENT));
        return returnUserInfoEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> batchAddUser(List<User> _users) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHADDUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<User>(User.class, _users)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> count() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getAllList() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALLLIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getListByRoleIdPage(List<BigInteger> roleId, BigInteger begin, BigInteger end) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYROLEIDPAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(roleId, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.generated.Uint256(begin),
                        new org.web3j.abi.datatypes.generated.Uint256(end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getRoleList() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLELIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<User> getUserInfo(String _account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERINFO,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<User>() {}));
        return executeRemoteCallSingleValueReturn(function, User.class);
    }

    public RemoteFunctionCall<List> getUserList(BigInteger _from) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_from)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isRoller2(String _account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISROLLER2,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyPasswordByAccount(String _account, String _password) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYPASSWORDBYACCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account),
                        new org.web3j.abi.datatypes.Utf8String(_password)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyPhoneByAccount(String _account, String _phone) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYPHONEBYACCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account),
                        new org.web3j.abi.datatypes.Utf8String(_phone)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyUserInfoById(User _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYUSERINFOBYID,
                Arrays.<Type>asList(_user),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> userInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> userKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>> users(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    @Deprecated
    public static UserContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static UserContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static UserContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new UserContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static UserContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new UserContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<UserContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<UserContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
    @Getter
    @Setter
    @ToString
    public static class User extends DynamicStruct {
        public String account;

        public String name;

        public String phone;

        public String password;

        public BigInteger isBindPhone;

        public BigInteger role;

        public BigInteger status;

        public User(String account, String name, String phone, String password, BigInteger isBindPhone, BigInteger role, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(account),new org.web3j.abi.datatypes.Utf8String(name),new org.web3j.abi.datatypes.Utf8String(phone),new org.web3j.abi.datatypes.Utf8String(password),new org.web3j.abi.datatypes.generated.Uint256(isBindPhone),new org.web3j.abi.datatypes.generated.Uint256(role),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.account = account;
            this.name = name;
            this.phone = phone;
            this.password = password;
            this.isBindPhone = isBindPhone;
            this.role = role;
            this.status = status;
        }

        public User(Utf8String account, Utf8String name, Utf8String phone, Utf8String password, Uint256 isBindPhone, Uint256 role, Uint256 status) {
            super(account,name,phone,password,isBindPhone,role,status);
            this.account = account.getValue();
            this.name = name.getValue();
            this.phone = phone.getValue();
            this.password = password.getValue();
            this.isBindPhone = isBindPhone.getValue();
            this.role = role.getValue();
            this.status = status.getValue();
        }
    }

    @Getter
    public static class LogEventResponse extends BaseEventResponse {
        public String message;

        public BigInteger value;
    }

    @Getter
    public static class ReturnUserInfoEventResponse extends BaseEventResponse {
        public String message;

        public User user;
    }
}
