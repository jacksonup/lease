package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class UserContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b50613345806100296000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806391bbec1a1161008c5780639f9d06a9116100665780639f9d06a914610289578063a8c5f884146102a7578063d0211968146102d7578063dec632ad146102f3576100ea565b806391bbec1a1461021f57806394ed7fd81461024f5780639e4135211461026d576100ea565b8063689e1c03116100c8578063689e1c03146101595780636f1bd1a51461018f5780637c9b7fdd146101bf57806381842aa6146101ef576100ea565b806306661abd146100ef57806351911a8d1461010d57806367f58d1914610129575b600080fd5b6100f761030f565b60405161010491906121f8565b60405180910390f35b6101276004803603810190610122919061236d565b610319565b005b610143600480360381019061013e91906123e5565b61040a565b6040516101509190612449565b60405180910390f35b610173600480360381019061016e91906123e5565b61047d565b60405161018697969594939291906124ec565b60405180910390f35b6101a960048036038101906101a491906123e5565b6106f5565b6040516101b69190612449565b60405180910390f35b6101d960048036038101906101d491906123e5565b61072b565b6040516101e69190612681565b60405180910390f35b610209600480360381019061020491906126cf565b610a00565b60405161021691906126fc565b60405180910390f35b610239600480360381019061023491906126cf565b610aac565b6040516102469190612891565b60405180910390f35b610257610f64565b6040516102649190612891565b60405180910390f35b610287600480360381019061028291906129e1565b6113c2565b005b610291611538565b60405161029e9190612891565b60405180910390f35b6102c160048036038101906102bc9190612af2565b611891565b6040516102ce9190612891565b60405180910390f35b6102f160048036038101906102ec919061236d565b611de7565b005b61030d60048036038101906103089190612c42565b611ed8565b005b6000600354905090565b600060018360405161032b9190612cc7565b908152602001604051809103902060009054906101000a900460ff16156103875760019050816000846040516103619190612cc7565b908152602001604051809103902060020190805190602001906103859291906120ff565b505b80156103cb577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127106040516103be9190612d95565b60405180910390a1610405565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127116040516103fc9190612e70565b60405180910390a15b505050565b600060018260405161041c9190612cc7565b908152602001604051809103902060009054906101000a900460ff168015610465575060026000836040516104519190612cc7565b908152602001604051809103902060050154145b156104735760019050610478565b600090505b919050565b6000818051602081018201805184825260208301602085012081835280955050505050506000915090508060000180546104b690612ecd565b80601f01602080910402602001604051908101604052809291908181526020018280546104e290612ecd565b801561052f5780601f106105045761010080835404028352916020019161052f565b820191906000526020600020905b81548152906001019060200180831161051257829003601f168201915b50505050509080600101805461054490612ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461057090612ecd565b80156105bd5780601f10610592576101008083540402835291602001916105bd565b820191906000526020600020905b8154815290600101906020018083116105a057829003601f168201915b5050505050908060020180546105d290612ecd565b80601f01602080910402602001604051908101604052809291908181526020018280546105fe90612ecd565b801561064b5780601f106106205761010080835404028352916020019161064b565b820191906000526020600020905b81548152906001019060200180831161062e57829003601f168201915b50505050509080600301805461066090612ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461068c90612ecd565b80156106d95780601f106106ae576101008083540402835291602001916106d9565b820191906000526020600020905b8154815290600101906020018083116106bc57829003601f168201915b5050505050908060040154908060050154908060060154905087565b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b610733612185565b6001826040516107439190612cc7565b908152602001604051809103902060009054906101000a900460ff16156109fa576000826040516107749190612cc7565b90815260200160405180910390206040518060e001604052908160008201805461079d90612ecd565b80601f01602080910402602001604051908101604052809291908181526020018280546107c990612ecd565b80156108165780601f106107eb57610100808354040283529160200191610816565b820191906000526020600020905b8154815290600101906020018083116107f957829003601f168201915b5050505050815260200160018201805461082f90612ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461085b90612ecd565b80156108a85780601f1061087d576101008083540402835291602001916108a8565b820191906000526020600020905b81548152906001019060200180831161088b57829003601f168201915b505050505081526020016002820180546108c190612ecd565b80601f01602080910402602001604051908101604052809291908181526020018280546108ed90612ecd565b801561093a5780601f1061090f5761010080835404028352916020019161093a565b820191906000526020600020905b81548152906001019060200180831161091d57829003601f168201915b5050505050815260200160038201805461095390612ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461097f90612ecd565b80156109cc5780601f106109a1576101008083540402835291602001916109cc565b820191906000526020600020905b8154815290600101906020018083116109af57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505090506109fb565b5b919050565b60028181548110610a1057600080fd5b906000526020600020016000915090508054610a2b90612ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5790612ecd565b8015610aa45780601f10610a7957610100808354040283529160200191610aa4565b820191906000526020600020905b815481529060010190602001808311610a8757829003601f168201915b505050505081565b60606000600a67ffffffffffffffff811115610acb57610aca612242565b5b604051908082528060200260200182016040528015610b0457816020015b610af1612185565b815260200190600190039081610ae95790505b509050610b0f612185565b60606000808690505b60035481108015610b295750600a82105b15610ea65760028181548110610b4257610b41612eff565b5b906000526020600020018054610b5790612ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8390612ecd565b8015610bd05780601f10610ba557610100808354040283529160200191610bd0565b820191906000526020600020905b815481529060010190602001808311610bb357829003601f168201915b50505050509250600083604051610be79190612cc7565b90815260200160405180910390206040518060e0016040529081600082018054610c1090612ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3c90612ecd565b8015610c895780601f10610c5e57610100808354040283529160200191610c89565b820191906000526020600020905b815481529060010190602001808311610c6c57829003601f168201915b50505050508152602001600182018054610ca290612ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054610cce90612ecd565b8015610d1b5780601f10610cf057610100808354040283529160200191610d1b565b820191906000526020600020905b815481529060010190602001808311610cfe57829003601f168201915b50505050508152602001600282018054610d3490612ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6090612ecd565b8015610dad5780601f10610d8257610100808354040283529160200191610dad565b820191906000526020600020905b815481529060010190602001808311610d9057829003601f168201915b50505050508152602001600382018054610dc690612ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054610df290612ecd565b8015610e3f5780601f10610e1457610100808354040283529160200191610e3f565b820191906000526020600020905b815481529060010190602001808311610e2257829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682015481525050935083858380610e7590612f5d565b945081518110610e8857610e87612eff565b5b60200260200101819052508080610e9e90612f5d565b915050610b18565b5060008167ffffffffffffffff811115610ec357610ec2612242565b5b604051908082528060200260200182016040528015610efc57816020015b610ee9612185565b815260200190600190039081610ee15790505b50905060005b82811015610f5657858181518110610f1d57610f1c612eff565b5b6020026020010151828281518110610f3857610f37612eff565b5b60200260200101819052508080610f4e90612f5d565b915050610f02565b508095505050505050919050565b60606000600a67ffffffffffffffff811115610f8357610f82612242565b5b604051908082528060200260200182016040528015610fbc57816020015b610fa9612185565b815260200190600190039081610fa15790505b5090506000805b600354811015611308576001600060028381548110610fe557610fe4612eff565b5b90600052602060002001604051610ffc919061303a565b90815260200160405180910390206005015414156112ef5760006002828154811061102a57611029612eff565b5b90600052602060002001604051611041919061303a565b90815260200160405180910390206040518060e001604052908160008201805461106a90612ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461109690612ecd565b80156110e35780601f106110b8576101008083540402835291602001916110e3565b820191906000526020600020905b8154815290600101906020018083116110c657829003601f168201915b505050505081526020016001820180546110fc90612ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461112890612ecd565b80156111755780601f1061114a57610100808354040283529160200191611175565b820191906000526020600020905b81548152906001019060200180831161115857829003601f168201915b5050505050815260200160028201805461118e90612ecd565b80601f01602080910402602001604051908101604052809291908181526020018280546111ba90612ecd565b80156112075780601f106111dc57610100808354040283529160200191611207565b820191906000526020600020905b8154815290600101906020018083116111ea57829003601f168201915b5050505050815260200160038201805461122090612ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461124c90612ecd565b80156112995780601f1061126e57610100808354040283529160200191611299565b820191906000526020600020905b81548152906001019060200180831161127c57829003601f168201915b5050505050815260200160048201548152602001600582015481526020016006820154815250508383806112cc90612f5d565b9450815181106112df576112de612eff565b5b60200260200101819052506112f4565b6112f5565b5b808061130090612f5d565b915050610fc3565b5060008167ffffffffffffffff81111561132557611324612242565b5b60405190808252806020026020018201604052801561135e57816020015b61134b612185565b8152602001906001900390816113435790505b50905060005b828110156113b85783818151811061137f5761137e612eff565b5b602002602001015182828151811061139a57611399612eff565b5b602002602001018190525080806113b090612f5d565b915050611364565b5080935050505090565b6000600182600001516040516113d89190612cc7565b908152602001604051809103902060009054906101000a900460ff16156114b657816000836000015160405161140e9190612cc7565b908152602001604051809103902060008201518160000190805190602001906114389291906120ff565b5060208201518160010190805190602001906114559291906120ff565b5060408201518160020190805190602001906114729291906120ff565b50606082015181600301908051906020019061148f9291906120ff565b506080820151816004015560a0820151816005015560c08201518160060155905050600190505b80156114fa577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127106040516114ed919061309d565b60405180910390a1611534565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b561271160405161152b9190613117565b60405180910390a15b5050565b606060035467ffffffffffffffff81111561155657611555612242565b5b60405190808252806020026020018201604052801561158f57816020015b61157c612185565b8152602001906001900390816115745790505b5090506000805b60028054905081101561188c576000600282815481106115b9576115b8612eff565b5b906000526020600020016040516115d0919061303a565b90815260200160405180910390206040518060e00160405290816000820180546115f990612ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461162590612ecd565b80156116725780601f1061164757610100808354040283529160200191611672565b820191906000526020600020905b81548152906001019060200180831161165557829003601f168201915b5050505050815260200160018201805461168b90612ecd565b80601f01602080910402602001604051908101604052809291908181526020018280546116b790612ecd565b80156117045780601f106116d957610100808354040283529160200191611704565b820191906000526020600020905b8154815290600101906020018083116116e757829003601f168201915b5050505050815260200160028201805461171d90612ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461174990612ecd565b80156117965780601f1061176b57610100808354040283529160200191611796565b820191906000526020600020905b81548152906001019060200180831161177957829003601f168201915b505050505081526020016003820180546117af90612ecd565b80601f01602080910402602001604051908101604052809291908181526020018280546117db90612ecd565b80156118285780601f106117fd57610100808354040283529160200191611828565b820191906000526020600020905b81548152906001019060200180831161180b57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505083838061185b90612f5d565b94508151811061186e5761186d612eff565b5b6020026020010181905250808061188490612f5d565b915050611596565b505090565b6060600060035467ffffffffffffffff8111156118b1576118b0612242565b5b6040519080825280602002602001820160405280156118ea57816020015b6118d7612185565b8152602001906001900390816118cf5790505b5090506000805b8651811015611c655760005b600354811015611c515787828151811061191a57611919612eff565b5b602002602001015160006002838154811061193857611937612eff565b5b9060005260206000200160405161194f919061303a565b9081526020016040518091039020600501541415611c3e5760006002828154811061197d5761197c612eff565b5b90600052602060002001604051611994919061303a565b90815260200160405180910390206040518060e00160405290816000820180546119bd90612ecd565b80601f01602080910402602001604051908101604052809291908181526020018280546119e990612ecd565b8015611a365780601f10611a0b57610100808354040283529160200191611a36565b820191906000526020600020905b815481529060010190602001808311611a1957829003601f168201915b50505050508152602001600182018054611a4f90612ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054611a7b90612ecd565b8015611ac85780601f10611a9d57610100808354040283529160200191611ac8565b820191906000526020600020905b815481529060010190602001808311611aab57829003601f168201915b50505050508152602001600282018054611ae190612ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054611b0d90612ecd565b8015611b5a5780601f10611b2f57610100808354040283529160200191611b5a565b820191906000526020600020905b815481529060010190602001808311611b3d57829003601f168201915b50505050508152602001600382018054611b7390612ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054611b9f90612ecd565b8015611bec5780601f10611bc157610100808354040283529160200191611bec565b820191906000526020600020905b815481529060010190602001808311611bcf57829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682015481525050848480611c1f90612f5d565b955081518110611c3257611c31612eff565b5b60200260200101819052505b8080611c4990612f5d565b9150506118fd565b508080611c5d90612f5d565b9150506118f1565b5084841015611c75575050611de0565b600181611c829190613145565b841115611d0657600181611c969190613145565b935060018585611ca69190613145565b611cb09190613179565b67ffffffffffffffff811115611cc957611cc8612242565b5b604051908082528060200260200182016040528015611d0257816020015b611cef612185565b815260200190600190039081611ce75790505b5092505b60018585611d149190613145565b611d1e9190613179565b67ffffffffffffffff811115611d3757611d36612242565b5b604051908082528060200260200182016040528015611d7057816020015b611d5d612185565b815260200190600190039081611d555790505b5092506000905060008590505b848111611ddc57828181518110611d9757611d96612eff565b5b6020026020010151848380611dab90612f5d565b945081518110611dbe57611dbd612eff565b5b60200260200101819052508080611dd490612f5d565b915050611d7d565b5050505b9392505050565b6000600183604051611df99190612cc7565b908152602001604051809103902060009054906101000a900460ff1615611e55576001905081600084604051611e2f9190612cc7565b90815260200160405180910390206003019080519060200190611e539291906120ff565b505b8015611e99577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b5612710604051611e8c9190613241565b60405180910390a1611ed3565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b5612711604051611eca91906132e1565b60405180910390a15b505050565b60005b81518110156120fb576001828281518110611ef957611ef8612eff565b5b602002602001015160000151604051611f129190612cc7565b908152602001604051809103902060009054906101000a900460ff1615611f38576120e8565b818181518110611f4b57611f4a612eff565b5b60200260200101516000838381518110611f6857611f67612eff565b5b602002602001015160000151604051611f819190612cc7565b90815260200160405180910390206000820151816000019080519060200190611fab9291906120ff565b506020820151816001019080519060200190611fc89291906120ff565b506040820151816002019080519060200190611fe59291906120ff565b5060608201518160030190805190602001906120029291906120ff565b506080820151816004015560a0820151816005015560c0820151816006015590505060018083838151811061203a57612039612eff565b5b6020026020010151600001516040516120539190612cc7565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600282828151811061208d5761208c612eff565b5b6020026020010151600001519080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906120d19291906120ff565b5060016003546120e19190613179565b6003819055505b80806120f390612f5d565b915050611edb565b5050565b82805461210b90612ecd565b90600052602060002090601f01602090048101928261212d5760008555612174565b82601f1061214657805160ff1916838001178555612174565b82800160010185558215612174579182015b82811115612173578251825591602001919060010190612158565b5b50905061218191906121c2565b5090565b6040518060e00160405280606081526020016060815260200160608152602001606081526020016000815260200160008152602001600081525090565b5b808211156121db5760008160009055506001016121c3565b5090565b6000819050919050565b6121f2816121df565b82525050565b600060208201905061220d60008301846121e9565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61227a82612231565b810181811067ffffffffffffffff8211171561229957612298612242565b5b80604052505050565b60006122ac612213565b90506122b88282612271565b919050565b600067ffffffffffffffff8211156122d8576122d7612242565b5b6122e182612231565b9050602081019050919050565b82818337600083830152505050565b600061231061230b846122bd565b6122a2565b90508281526020810184848401111561232c5761232b61222c565b5b6123378482856122ee565b509392505050565b600082601f83011261235457612353612227565b5b81356123648482602086016122fd565b91505092915050565b600080604083850312156123845761238361221d565b5b600083013567ffffffffffffffff8111156123a2576123a1612222565b5b6123ae8582860161233f565b925050602083013567ffffffffffffffff8111156123cf576123ce612222565b5b6123db8582860161233f565b9150509250929050565b6000602082840312156123fb576123fa61221d565b5b600082013567ffffffffffffffff81111561241957612418612222565b5b6124258482850161233f565b91505092915050565b60008115159050919050565b6124438161242e565b82525050565b600060208201905061245e600083018461243a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561249e578082015181840152602081019050612483565b838111156124ad576000848401525b50505050565b60006124be82612464565b6124c8818561246f565b93506124d8818560208601612480565b6124e181612231565b840191505092915050565b600060e0820190508181036000830152612506818a6124b3565b9050818103602083015261251a81896124b3565b9050818103604083015261252e81886124b3565b9050818103606083015261254281876124b3565b905061255160808301866121e9565b61255e60a08301856121e9565b61256b60c08301846121e9565b98975050505050505050565b600082825260208201905092915050565b600061259382612464565b61259d8185612577565b93506125ad818560208601612480565b6125b681612231565b840191505092915050565b6125ca816121df565b82525050565b600060e08301600083015184820360008601526125ed8282612588565b915050602083015184820360208601526126078282612588565b915050604083015184820360408601526126218282612588565b9150506060830151848203606086015261263b8282612588565b915050608083015161265060808601826125c1565b5060a083015161266360a08601826125c1565b5060c083015161267660c08601826125c1565b508091505092915050565b6000602082019050818103600083015261269b81846125d0565b905092915050565b6126ac816121df565b81146126b757600080fd5b50565b6000813590506126c9816126a3565b92915050565b6000602082840312156126e5576126e461221d565b5b60006126f3848285016126ba565b91505092915050565b6000602082019050818103600083015261271681846124b3565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060e08301600083015184820360008601526127678282612588565b915050602083015184820360208601526127818282612588565b9150506040830151848203604086015261279b8282612588565b915050606083015184820360608601526127b58282612588565b91505060808301516127ca60808601826125c1565b5060a08301516127dd60a08601826125c1565b5060c08301516127f060c08601826125c1565b508091505092915050565b6000612807838361274a565b905092915050565b6000602082019050919050565b60006128278261271e565b6128318185612729565b9350836020820285016128438561273a565b8060005b8581101561287f578484038952815161286085826127fb565b945061286b8361280f565b925060208a01995050600181019050612847565b50829750879550505050505092915050565b600060208201905081810360008301526128ab818461281c565b905092915050565b600080fd5b600080fd5b600060e082840312156128d3576128d26128b3565b5b6128dd60e06122a2565b9050600082013567ffffffffffffffff8111156128fd576128fc6128b8565b5b6129098482850161233f565b600083015250602082013567ffffffffffffffff81111561292d5761292c6128b8565b5b6129398482850161233f565b602083015250604082013567ffffffffffffffff81111561295d5761295c6128b8565b5b6129698482850161233f565b604083015250606082013567ffffffffffffffff81111561298d5761298c6128b8565b5b6129998482850161233f565b60608301525060806129ad848285016126ba565b60808301525060a06129c1848285016126ba565b60a08301525060c06129d5848285016126ba565b60c08301525092915050565b6000602082840312156129f7576129f661221d565b5b600082013567ffffffffffffffff811115612a1557612a14612222565b5b612a21848285016128bd565b91505092915050565b600067ffffffffffffffff821115612a4557612a44612242565b5b602082029050602081019050919050565b600080fd5b6000612a6e612a6984612a2a565b6122a2565b90508083825260208201905060208402830185811115612a9157612a90612a56565b5b835b81811015612aba5780612aa688826126ba565b845260208401935050602081019050612a93565b5050509392505050565b600082601f830112612ad957612ad8612227565b5b8135612ae9848260208601612a5b565b91505092915050565b600080600060608486031215612b0b57612b0a61221d565b5b600084013567ffffffffffffffff811115612b2957612b28612222565b5b612b3586828701612ac4565b9350506020612b46868287016126ba565b9250506040612b57868287016126ba565b9150509250925092565b600067ffffffffffffffff821115612b7c57612b7b612242565b5b602082029050602081019050919050565b6000612ba0612b9b84612b61565b6122a2565b90508083825260208201905060208402830185811115612bc357612bc2612a56565b5b835b81811015612c0a57803567ffffffffffffffff811115612be857612be7612227565b5b808601612bf589826128bd565b85526020850194505050602081019050612bc5565b5050509392505050565b600082601f830112612c2957612c28612227565b5b8135612c39848260208601612b8d565b91505092915050565b600060208284031215612c5857612c5761221d565b5b600082013567ffffffffffffffff811115612c7657612c75612222565b5b612c8284828501612c14565b91505092915050565b600081905092915050565b6000612ca182612464565b612cab8185612c8b565b9350612cbb818560208601612480565b80840191505092915050565b6000612cd38284612c96565b915081905092915050565b7f6d6f64696679205573657227732070686f6e65206279206163636f756e74207360008201527f7563636573732100000000000000000000000000000000000000000000000000602082015250565b6000612d3a60278361246f565b9150612d4582612cde565b604082019050919050565b6000819050919050565b6000819050919050565b6000612d7f612d7a612d7584612d50565b612d5a565b6121df565b9050919050565b612d8f81612d64565b82525050565b60006040820190508181036000830152612dae81612d2d565b9050612dbd6020830184612d86565b92915050565b7f6d6f64696679205573657227732070686f6e65206279206163636f756e74206660008201527f61696c6564210000000000000000000000000000000000000000000000000000602082015250565b6000612e1f60268361246f565b9150612e2a82612dc3565b604082019050919050565b6000819050919050565b6000612e5a612e55612e5084612e35565b612d5a565b6121df565b9050919050565b612e6a81612e3f565b82525050565b60006040820190508181036000830152612e8981612e12565b9050612e986020830184612e61565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612ee557607f821691505b60208210811415612ef957612ef8612e9e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f68826121df565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612f9b57612f9a612f2e565b5b600182019050919050565b60008190508160005260206000209050919050565b60008154612fc881612ecd565b612fd28186612c8b565b94506001821660008114612fed5760018114612ffe57613031565b60ff19831686528186019350613031565b61300785612fa6565b60005b838110156130295781548189015260018201915060208101905061300a565b838801955050505b50505092915050565b60006130468284612fbb565b915081905092915050565b7f6d6f646966792075736572696e666f2062792069642073756363657373210000600082015250565b6000613087601e8361246f565b915061309282613051565b602082019050919050565b600060408201905081810360008301526130b68161307a565b90506130c56020830184612d86565b92915050565b7f6d6f646966792075736572696e666f206279206964206661696c656421000000600082015250565b6000613101601d8361246f565b915061310c826130cb565b602082019050919050565b60006040820190508181036000830152613130816130f4565b905061313f6020830184612e61565b92915050565b6000613150826121df565b915061315b836121df565b92508282101561316e5761316d612f2e565b5b828203905092915050565b6000613184826121df565b915061318f836121df565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131c4576131c3612f2e565b5b828201905092915050565b7f6d6f64696679207573657227732070617373776f7264206279206163636f756e60008201527f7420737563636573732100000000000000000000000000000000000000000000602082015250565b600061322b602a8361246f565b9150613236826131cf565b604082019050919050565b6000604082019050818103600083015261325a8161321e565b90506132696020830184612d86565b92915050565b7f6d6f64696679207573657227732070617373776f7264206279206163636f756e60008201527f74206661696c6564210000000000000000000000000000000000000000000000602082015250565b60006132cb60298361246f565b91506132d68261326f565b604082019050919050565b600060408201905081810360008301526132fa816132be565b90506133096020830184612e61565b9291505056fea2646970667358221220de9b5ef07ea88b8616b49e2ad3df77c0366914fce95c5d334f1ef012f0f9518864736f6c634300080a0033";

    public static final String FUNC_BATCHADDUSER = "batchAddUser";

    public static final String FUNC_COUNT = "count";

    public static final String FUNC_GETALLLIST = "getAllList";

    public static final String FUNC_GETLISTBYROLEIDPAGE = "getListByRoleIdPage";

    public static final String FUNC_GETROLELIST = "getRoleList";

    public static final String FUNC_GETUSERINFO = "getUserInfo";

    public static final String FUNC_GETUSERLIST = "getUserList";

    public static final String FUNC_ISROLLER2 = "isRoller2";

    public static final String FUNC_MODIFYPASSWORDBYACCOUNT = "modifyPasswordByAccount";

    public static final String FUNC_MODIFYPHONEBYACCOUNT = "modifyPhoneByAccount";

    public static final String FUNC_MODIFYUSERINFOBYID = "modifyUserInfoById";

    public static final String FUNC_USERINSERTED = "userInserted";

    public static final String FUNC_USERKEY = "userKey";

    public static final String FUNC_USERS = "users";

    public static final Event LOG_EVENT = new Event("Log",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RETURNUSERINFO_EVENT = new Event("returnUserInfo",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<User>() {}));
    ;

    @Deprecated
    protected UserContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected UserContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected UserContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected UserContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<LogEventResponse> getLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOG_EVENT, transactionReceipt);
        ArrayList<LogEventResponse> responses = new ArrayList<LogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogEventResponse typedResponse = new LogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogEventResponse> logEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogEventResponse>() {
            @Override
            public LogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOG_EVENT, log);
                LogEventResponse typedResponse = new LogEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogEventResponse> logEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOG_EVENT));
        return logEventFlowable(filter);
    }

    public List<ReturnUserInfoEventResponse> getReturnUserInfoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETURNUSERINFO_EVENT, transactionReceipt);
        ArrayList<ReturnUserInfoEventResponse> responses = new ArrayList<ReturnUserInfoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReturnUserInfoEventResponse typedResponse = new ReturnUserInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (User) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReturnUserInfoEventResponse> returnUserInfoEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReturnUserInfoEventResponse>() {
            @Override
            public ReturnUserInfoEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RETURNUSERINFO_EVENT, log);
                ReturnUserInfoEventResponse typedResponse = new ReturnUserInfoEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (User) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ReturnUserInfoEventResponse> returnUserInfoEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RETURNUSERINFO_EVENT));
        return returnUserInfoEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> batchAddUser(List<User> _users) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHADDUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<User>(User.class, _users)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> count() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getAllList() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALLLIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getListByRoleIdPage(List<BigInteger> roleId, BigInteger begin, BigInteger end) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYROLEIDPAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(roleId, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.generated.Uint256(begin),
                        new org.web3j.abi.datatypes.generated.Uint256(end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getRoleList() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLELIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<User> getUserInfo(String _account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERINFO,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<User>() {}));
        return executeRemoteCallSingleValueReturn(function, User.class);
    }

    public RemoteFunctionCall<List> getUserList(BigInteger _from) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_from)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isRoller2(String _account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISROLLER2,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyPasswordByAccount(String _account, String _password) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYPASSWORDBYACCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account),
                        new org.web3j.abi.datatypes.Utf8String(_password)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyPhoneByAccount(String _account, String _phone) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYPHONEBYACCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account),
                        new org.web3j.abi.datatypes.Utf8String(_phone)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyUserInfoById(User _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYUSERINFOBYID,
                Arrays.<Type>asList(_user),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> userInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> userKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>> users(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    @Deprecated
    public static UserContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static UserContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static UserContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new UserContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static UserContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new UserContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<UserContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<UserContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
    @Getter
    @Setter
    @ToString
    public static class User extends DynamicStruct {
        public String account;

        public String name;

        public String phone;

        public String password;

        public BigInteger isBindPhone;

        public BigInteger role;

        public BigInteger status;

        public User(String account, String name, String phone, String password, BigInteger isBindPhone, BigInteger role, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(account),new org.web3j.abi.datatypes.Utf8String(name),new org.web3j.abi.datatypes.Utf8String(phone),new org.web3j.abi.datatypes.Utf8String(password),new org.web3j.abi.datatypes.generated.Uint256(isBindPhone),new org.web3j.abi.datatypes.generated.Uint256(role),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.account = account;
            this.name = name;
            this.phone = phone;
            this.password = password;
            this.isBindPhone = isBindPhone;
            this.role = role;
            this.status = status;
        }

        public User(Utf8String account, Utf8String name, Utf8String phone, Utf8String password, Uint256 isBindPhone, Uint256 role, Uint256 status) {
            super(account,name,phone,password,isBindPhone,role,status);
            this.account = account.getValue();
            this.name = name.getValue();
            this.phone = phone.getValue();
            this.password = password.getValue();
            this.isBindPhone = isBindPhone.getValue();
            this.role = role.getValue();
            this.status = status.getValue();
        }
    }

    @Getter
    public static class LogEventResponse extends BaseEventResponse {
        public String message;

        public BigInteger value;
    }
    @Getter
    public static class ReturnUserInfoEventResponse extends BaseEventResponse {
        public String message;

        public User user;
    }
}
