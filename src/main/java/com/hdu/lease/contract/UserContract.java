package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class UserContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b506128ac806100296000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806381842aa61161007157806381842aa6146101b957806391bbec1a146101e957806394ed7fd8146102195780639e41352114610237578063d021196814610253578063dec632ad1461026f576100b4565b806306661abd146100b957806351911a8d146100d757806367f58d19146100f3578063689e1c03146101235780636f1bd1a5146101595780637c9b7fdd14610189575b600080fd5b6100c161028b565b6040516100ce91906118c5565b60405180910390f35b6100f160048036038101906100ec9190611a3a565b610295565b005b61010d60048036038101906101089190611ab2565b610386565b60405161011a9190611b16565b60405180910390f35b61013d60048036038101906101389190611ab2565b6103f9565b6040516101509796959493929190611bb9565b60405180910390f35b610173600480360381019061016e9190611ab2565b610671565b6040516101809190611b16565b60405180910390f35b6101a3600480360381019061019e9190611ab2565b6106a7565b6040516101b09190611d4e565b60405180910390f35b6101d360048036038101906101ce9190611d9c565b61097c565b6040516101e09190611dc9565b60405180910390f35b61020360048036038101906101fe9190611d9c565b610a28565b6040516102109190611f5e565b60405180910390f35b610221610ee0565b60405161022e9190611f5e565b60405180910390f35b610251600480360381019061024c91906120ae565b61133e565b005b61026d60048036038101906102689190611a3a565b6114b4565b005b610289600480360381019061028491906121dd565b6115a5565b005b6000600354905090565b60006001836040516102a79190612262565b908152602001604051809103902060009054906101000a900460ff16156103035760019050816000846040516102dd9190612262565b908152602001604051809103902060020190805190602001906103019291906117cc565b505b8015610347577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b561271060405161033a9190612330565b60405180910390a1610381565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b5612711604051610378919061240b565b60405180910390a15b505050565b60006001826040516103989190612262565b908152602001604051809103902060009054906101000a900460ff1680156103e1575060026000836040516103cd9190612262565b908152602001604051809103902060050154145b156103ef57600190506103f4565b600090505b919050565b60008180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461043290612468565b80601f016020809104026020016040519081016040528092919081815260200182805461045e90612468565b80156104ab5780601f10610480576101008083540402835291602001916104ab565b820191906000526020600020905b81548152906001019060200180831161048e57829003601f168201915b5050505050908060010180546104c090612468565b80601f01602080910402602001604051908101604052809291908181526020018280546104ec90612468565b80156105395780601f1061050e57610100808354040283529160200191610539565b820191906000526020600020905b81548152906001019060200180831161051c57829003601f168201915b50505050509080600201805461054e90612468565b80601f016020809104026020016040519081016040528092919081815260200182805461057a90612468565b80156105c75780601f1061059c576101008083540402835291602001916105c7565b820191906000526020600020905b8154815290600101906020018083116105aa57829003601f168201915b5050505050908060030180546105dc90612468565b80601f016020809104026020016040519081016040528092919081815260200182805461060890612468565b80156106555780601f1061062a57610100808354040283529160200191610655565b820191906000526020600020905b81548152906001019060200180831161063857829003601f168201915b5050505050908060040154908060050154908060060154905087565b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6106af611852565b6001826040516106bf9190612262565b908152602001604051809103902060009054906101000a900460ff1615610976576000826040516106f09190612262565b90815260200160405180910390206040518060e001604052908160008201805461071990612468565b80601f016020809104026020016040519081016040528092919081815260200182805461074590612468565b80156107925780601f1061076757610100808354040283529160200191610792565b820191906000526020600020905b81548152906001019060200180831161077557829003601f168201915b505050505081526020016001820180546107ab90612468565b80601f01602080910402602001604051908101604052809291908181526020018280546107d790612468565b80156108245780601f106107f957610100808354040283529160200191610824565b820191906000526020600020905b81548152906001019060200180831161080757829003601f168201915b5050505050815260200160028201805461083d90612468565b80601f016020809104026020016040519081016040528092919081815260200182805461086990612468565b80156108b65780601f1061088b576101008083540402835291602001916108b6565b820191906000526020600020905b81548152906001019060200180831161089957829003601f168201915b505050505081526020016003820180546108cf90612468565b80601f01602080910402602001604051908101604052809291908181526020018280546108fb90612468565b80156109485780601f1061091d57610100808354040283529160200191610948565b820191906000526020600020905b81548152906001019060200180831161092b57829003601f168201915b5050505050815260200160048201548152602001600582015481526020016006820154815250509050610977565b5b919050565b6002818154811061098c57600080fd5b9060005260206000200160009150905080546109a790612468565b80601f01602080910402602001604051908101604052809291908181526020018280546109d390612468565b8015610a205780601f106109f557610100808354040283529160200191610a20565b820191906000526020600020905b815481529060010190602001808311610a0357829003601f168201915b505050505081565b60606000600a67ffffffffffffffff811115610a4757610a4661190f565b5b604051908082528060200260200182016040528015610a8057816020015b610a6d611852565b815260200190600190039081610a655790505b509050610a8b611852565b60606000808690505b60035481108015610aa55750600a82105b15610e225760028181548110610abe57610abd61249a565b5b906000526020600020018054610ad390612468565b80601f0160208091040260200160405190810160405280929190818152602001828054610aff90612468565b8015610b4c5780601f10610b2157610100808354040283529160200191610b4c565b820191906000526020600020905b815481529060010190602001808311610b2f57829003601f168201915b50505050509250600083604051610b639190612262565b90815260200160405180910390206040518060e0016040529081600082018054610b8c90612468565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb890612468565b8015610c055780601f10610bda57610100808354040283529160200191610c05565b820191906000526020600020905b815481529060010190602001808311610be857829003601f168201915b50505050508152602001600182018054610c1e90612468565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4a90612468565b8015610c975780601f10610c6c57610100808354040283529160200191610c97565b820191906000526020600020905b815481529060010190602001808311610c7a57829003601f168201915b50505050508152602001600282018054610cb090612468565b80601f0160208091040260200160405190810160405280929190818152602001828054610cdc90612468565b8015610d295780601f10610cfe57610100808354040283529160200191610d29565b820191906000526020600020905b815481529060010190602001808311610d0c57829003601f168201915b50505050508152602001600382018054610d4290612468565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6e90612468565b8015610dbb5780601f10610d9057610100808354040283529160200191610dbb565b820191906000526020600020905b815481529060010190602001808311610d9e57829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682015481525050935083858380610df1906124f8565b945081518110610e0457610e0361249a565b5b60200260200101819052508080610e1a906124f8565b915050610a94565b5060008167ffffffffffffffff811115610e3f57610e3e61190f565b5b604051908082528060200260200182016040528015610e7857816020015b610e65611852565b815260200190600190039081610e5d5790505b50905060005b82811015610ed257858181518110610e9957610e9861249a565b5b6020026020010151828281518110610eb457610eb361249a565b5b60200260200101819052508080610eca906124f8565b915050610e7e565b508095505050505050919050565b60606000600a67ffffffffffffffff811115610eff57610efe61190f565b5b604051908082528060200260200182016040528015610f3857816020015b610f25611852565b815260200190600190039081610f1d5790505b5090506000805b600354811015611284576001600060028381548110610f6157610f6061249a565b5b90600052602060002001604051610f7891906125d5565b908152602001604051809103902060050154141561126b57600060028281548110610fa657610fa561249a565b5b90600052602060002001604051610fbd91906125d5565b90815260200160405180910390206040518060e0016040529081600082018054610fe690612468565b80601f016020809104026020016040519081016040528092919081815260200182805461101290612468565b801561105f5780601f106110345761010080835404028352916020019161105f565b820191906000526020600020905b81548152906001019060200180831161104257829003601f168201915b5050505050815260200160018201805461107890612468565b80601f01602080910402602001604051908101604052809291908181526020018280546110a490612468565b80156110f15780601f106110c6576101008083540402835291602001916110f1565b820191906000526020600020905b8154815290600101906020018083116110d457829003601f168201915b5050505050815260200160028201805461110a90612468565b80601f016020809104026020016040519081016040528092919081815260200182805461113690612468565b80156111835780601f1061115857610100808354040283529160200191611183565b820191906000526020600020905b81548152906001019060200180831161116657829003601f168201915b5050505050815260200160038201805461119c90612468565b80601f01602080910402602001604051908101604052809291908181526020018280546111c890612468565b80156112155780601f106111ea57610100808354040283529160200191611215565b820191906000526020600020905b8154815290600101906020018083116111f857829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682015481525050838380611248906124f8565b94508151811061125b5761125a61249a565b5b6020026020010181905250611270565b611271565b5b808061127c906124f8565b915050610f3f565b5060008167ffffffffffffffff8111156112a1576112a061190f565b5b6040519080825280602002602001820160405280156112da57816020015b6112c7611852565b8152602001906001900390816112bf5790505b50905060005b82811015611334578381815181106112fb576112fa61249a565b5b60200260200101518282815181106113165761131561249a565b5b6020026020010181905250808061132c906124f8565b9150506112e0565b5080935050505090565b6000600182600001516040516113549190612262565b908152602001604051809103902060009054906101000a900460ff161561143257816000836000015160405161138a9190612262565b908152602001604051809103902060008201518160000190805190602001906113b49291906117cc565b5060208201518160010190805190602001906113d19291906117cc565b5060408201518160020190805190602001906113ee9291906117cc565b50606082015181600301908051906020019061140b9291906117cc565b506080820151816004015560a0820151816005015560c08201518160060155905050600190505b8015611476577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127106040516114699190612638565b60405180910390a16114b0565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127116040516114a791906126b2565b60405180910390a15b5050565b60006001836040516114c69190612262565b908152602001604051809103902060009054906101000a900460ff16156115225760019050816000846040516114fc9190612262565b908152602001604051809103902060030190805190602001906115209291906117cc565b505b8015611566577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127106040516115599190612752565b60405180910390a16115a0565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b561271160405161159791906127f2565b60405180910390a15b505050565b60005b81518110156117c85760018282815181106115c6576115c561249a565b5b6020026020010151600001516040516115df9190612262565b908152602001604051809103902060009054906101000a900460ff1615611605576117b5565b8181815181106116185761161761249a565b5b602002602001015160008383815181106116355761163461249a565b5b60200260200101516000015160405161164e9190612262565b908152602001604051809103902060008201518160000190805190602001906116789291906117cc565b5060208201518160010190805190602001906116959291906117cc565b5060408201518160020190805190602001906116b29291906117cc565b5060608201518160030190805190602001906116cf9291906117cc565b506080820151816004015560a0820151816005015560c082015181600601559050506001808383815181106117075761170661249a565b5b6020026020010151600001516040516117209190612262565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600282828151811061175a5761175961249a565b5b60200260200101516000015190806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061179e9291906117cc565b5060016003546117ae9190612820565b6003819055505b80806117c0906124f8565b9150506115a8565b5050565b8280546117d890612468565b90600052602060002090601f0160209004810192826117fa5760008555611841565b82601f1061181357805160ff1916838001178555611841565b82800160010185558215611841579182015b82811115611840578251825591602001919060010190611825565b5b50905061184e919061188f565b5090565b6040518060e00160405280606081526020016060815260200160608152602001606081526020016000815260200160008152602001600081525090565b5b808211156118a8576000816000905550600101611890565b5090565b6000819050919050565b6118bf816118ac565b82525050565b60006020820190506118da60008301846118b6565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611947826118fe565b810181811067ffffffffffffffff821117156119665761196561190f565b5b80604052505050565b60006119796118e0565b9050611985828261193e565b919050565b600067ffffffffffffffff8211156119a5576119a461190f565b5b6119ae826118fe565b9050602081019050919050565b82818337600083830152505050565b60006119dd6119d88461198a565b61196f565b9050828152602081018484840111156119f9576119f86118f9565b5b611a048482856119bb565b509392505050565b600082601f830112611a2157611a206118f4565b5b8135611a318482602086016119ca565b91505092915050565b60008060408385031215611a5157611a506118ea565b5b600083013567ffffffffffffffff811115611a6f57611a6e6118ef565b5b611a7b85828601611a0c565b925050602083013567ffffffffffffffff811115611a9c57611a9b6118ef565b5b611aa885828601611a0c565b9150509250929050565b600060208284031215611ac857611ac76118ea565b5b600082013567ffffffffffffffff811115611ae657611ae56118ef565b5b611af284828501611a0c565b91505092915050565b60008115159050919050565b611b1081611afb565b82525050565b6000602082019050611b2b6000830184611b07565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b6b578082015181840152602081019050611b50565b83811115611b7a576000848401525b50505050565b6000611b8b82611b31565b611b958185611b3c565b9350611ba5818560208601611b4d565b611bae816118fe565b840191505092915050565b600060e0820190508181036000830152611bd3818a611b80565b90508181036020830152611be78189611b80565b90508181036040830152611bfb8188611b80565b90508181036060830152611c0f8187611b80565b9050611c1e60808301866118b6565b611c2b60a08301856118b6565b611c3860c08301846118b6565b98975050505050505050565b600082825260208201905092915050565b6000611c6082611b31565b611c6a8185611c44565b9350611c7a818560208601611b4d565b611c83816118fe565b840191505092915050565b611c97816118ac565b82525050565b600060e0830160008301518482036000860152611cba8282611c55565b91505060208301518482036020860152611cd48282611c55565b91505060408301518482036040860152611cee8282611c55565b91505060608301518482036060860152611d088282611c55565b9150506080830151611d1d6080860182611c8e565b5060a0830151611d3060a0860182611c8e565b5060c0830151611d4360c0860182611c8e565b508091505092915050565b60006020820190508181036000830152611d688184611c9d565b905092915050565b611d79816118ac565b8114611d8457600080fd5b50565b600081359050611d9681611d70565b92915050565b600060208284031215611db257611db16118ea565b5b6000611dc084828501611d87565b91505092915050565b60006020820190508181036000830152611de38184611b80565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060e0830160008301518482036000860152611e348282611c55565b91505060208301518482036020860152611e4e8282611c55565b91505060408301518482036040860152611e688282611c55565b91505060608301518482036060860152611e828282611c55565b9150506080830151611e976080860182611c8e565b5060a0830151611eaa60a0860182611c8e565b5060c0830151611ebd60c0860182611c8e565b508091505092915050565b6000611ed48383611e17565b905092915050565b6000602082019050919050565b6000611ef482611deb565b611efe8185611df6565b935083602082028501611f1085611e07565b8060005b85811015611f4c5784840389528151611f2d8582611ec8565b9450611f3883611edc565b925060208a01995050600181019050611f14565b50829750879550505050505092915050565b60006020820190508181036000830152611f788184611ee9565b905092915050565b600080fd5b600080fd5b600060e08284031215611fa057611f9f611f80565b5b611faa60e061196f565b9050600082013567ffffffffffffffff811115611fca57611fc9611f85565b5b611fd684828501611a0c565b600083015250602082013567ffffffffffffffff811115611ffa57611ff9611f85565b5b61200684828501611a0c565b602083015250604082013567ffffffffffffffff81111561202a57612029611f85565b5b61203684828501611a0c565b604083015250606082013567ffffffffffffffff81111561205a57612059611f85565b5b61206684828501611a0c565b606083015250608061207a84828501611d87565b60808301525060a061208e84828501611d87565b60a08301525060c06120a284828501611d87565b60c08301525092915050565b6000602082840312156120c4576120c36118ea565b5b600082013567ffffffffffffffff8111156120e2576120e16118ef565b5b6120ee84828501611f8a565b91505092915050565b600067ffffffffffffffff8211156121125761211161190f565b5b602082029050602081019050919050565b600080fd5b600061213b612136846120f7565b61196f565b9050808382526020820190506020840283018581111561215e5761215d612123565b5b835b818110156121a557803567ffffffffffffffff811115612183576121826118f4565b5b8086016121908982611f8a565b85526020850194505050602081019050612160565b5050509392505050565b600082601f8301126121c4576121c36118f4565b5b81356121d4848260208601612128565b91505092915050565b6000602082840312156121f3576121f26118ea565b5b600082013567ffffffffffffffff811115612211576122106118ef565b5b61221d848285016121af565b91505092915050565b600081905092915050565b600061223c82611b31565b6122468185612226565b9350612256818560208601611b4d565b80840191505092915050565b600061226e8284612231565b915081905092915050565b7f6d6f64696679205573657227732070686f6e65206279206163636f756e74207360008201527f7563636573732100000000000000000000000000000000000000000000000000602082015250565b60006122d5602783611b3c565b91506122e082612279565b604082019050919050565b6000819050919050565b6000819050919050565b600061231a612315612310846122eb565b6122f5565b6118ac565b9050919050565b61232a816122ff565b82525050565b60006040820190508181036000830152612349816122c8565b90506123586020830184612321565b92915050565b7f6d6f64696679205573657227732070686f6e65206279206163636f756e74206660008201527f61696c6564210000000000000000000000000000000000000000000000000000602082015250565b60006123ba602683611b3c565b91506123c58261235e565b604082019050919050565b6000819050919050565b60006123f56123f06123eb846123d0565b6122f5565b6118ac565b9050919050565b612405816123da565b82525050565b60006040820190508181036000830152612424816123ad565b905061243360208301846123fc565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061248057607f821691505b6020821081141561249457612493612439565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612503826118ac565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612536576125356124c9565b5b600182019050919050565b60008190508160005260206000209050919050565b6000815461256381612468565b61256d8186612226565b945060018216600081146125885760018114612599576125cc565b60ff198316865281860193506125cc565b6125a285612541565b60005b838110156125c4578154818901526001820191506020810190506125a5565b838801955050505b50505092915050565b60006125e18284612556565b915081905092915050565b7f6d6f646966792075736572696e666f2062792069642073756363657373210000600082015250565b6000612622601e83611b3c565b915061262d826125ec565b602082019050919050565b6000604082019050818103600083015261265181612615565b90506126606020830184612321565b92915050565b7f6d6f646966792075736572696e666f206279206964206661696c656421000000600082015250565b600061269c601d83611b3c565b91506126a782612666565b602082019050919050565b600060408201905081810360008301526126cb8161268f565b90506126da60208301846123fc565b92915050565b7f6d6f64696679207573657227732070617373776f7264206279206163636f756e60008201527f7420737563636573732100000000000000000000000000000000000000000000602082015250565b600061273c602a83611b3c565b9150612747826126e0565b604082019050919050565b6000604082019050818103600083015261276b8161272f565b905061277a6020830184612321565b92915050565b7f6d6f64696679207573657227732070617373776f7264206279206163636f756e60008201527f74206661696c6564210000000000000000000000000000000000000000000000602082015250565b60006127dc602983611b3c565b91506127e782612780565b604082019050919050565b6000604082019050818103600083015261280b816127cf565b905061281a60208301846123fc565b92915050565b600061282b826118ac565b9150612836836118ac565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561286b5761286a6124c9565b5b82820190509291505056fea264697066735822122041ee708700d270e5cf5d59377dcab0c99c8b646744074c137d30e86fe21f74fe64736f6c634300080a0033";

    public static final String FUNC_BATCHADDUSER = "batchAddUser";

    public static final String FUNC_COUNT = "count";

    public static final String FUNC_GETROLELIST = "getRoleList";

    public static final String FUNC_GETUSERINFO = "getUserInfo";

    public static final String FUNC_GETUSERLIST = "getUserList";

    public static final String FUNC_ISROLLER2 = "isRoller2";

    public static final String FUNC_MODIFYPASSWORDBYACCOUNT = "modifyPasswordByAccount";

    public static final String FUNC_MODIFYPHONEBYACCOUNT = "modifyPhoneByAccount";

    public static final String FUNC_MODIFYUSERINFOBYID = "modifyUserInfoById";

    public static final String FUNC_USERINSERTED = "userInserted";

    public static final String FUNC_USERKEY = "userKey";

    public static final String FUNC_USERS = "users";

    public static final Event LOG_EVENT = new Event("Log",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RETURNUSERINFO_EVENT = new Event("returnUserInfo",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<User>() {}));
    ;

    @Deprecated
    protected UserContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected UserContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected UserContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected UserContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<LogEventResponse> getLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOG_EVENT, transactionReceipt);
        ArrayList<LogEventResponse> responses = new ArrayList<LogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogEventResponse typedResponse = new LogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogEventResponse> logEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogEventResponse>() {
            @Override
            public LogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOG_EVENT, log);
                LogEventResponse typedResponse = new LogEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogEventResponse> logEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOG_EVENT));
        return logEventFlowable(filter);
    }

    public List<ReturnUserInfoEventResponse> getReturnUserInfoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETURNUSERINFO_EVENT, transactionReceipt);
        ArrayList<ReturnUserInfoEventResponse> responses = new ArrayList<ReturnUserInfoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReturnUserInfoEventResponse typedResponse = new ReturnUserInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (User) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReturnUserInfoEventResponse> returnUserInfoEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReturnUserInfoEventResponse>() {
            @Override
            public ReturnUserInfoEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RETURNUSERINFO_EVENT, log);
                ReturnUserInfoEventResponse typedResponse = new ReturnUserInfoEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (User) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ReturnUserInfoEventResponse> returnUserInfoEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RETURNUSERINFO_EVENT));
        return returnUserInfoEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> batchAddUser(List<User> _users) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHADDUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<User>(User.class, _users)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> count() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getRoleList() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLELIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<User> getUserInfo(String _account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERINFO,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<User>() {}));
        return executeRemoteCallSingleValueReturn(function, User.class);
    }

    public RemoteFunctionCall<List> getUserList(BigInteger _from) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_from)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isRoller2(String _account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISROLLER2,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyPasswordByAccount(String _account, String _password) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYPASSWORDBYACCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account),
                        new org.web3j.abi.datatypes.Utf8String(_password)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyPhoneByAccount(String _account, String _phone) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYPHONEBYACCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account),
                        new org.web3j.abi.datatypes.Utf8String(_phone)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyUserInfoById(User _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYUSERINFOBYID,
                Arrays.<Type>asList(_user),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> userInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> userKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>> users(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    @Deprecated
    public static UserContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static UserContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static UserContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new UserContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static UserContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new UserContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<UserContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<UserContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
    @Getter
    @Setter
    @ToString
    public static class User extends DynamicStruct {
        public String account;

        public String name;

        public String phone;

        public String password;

        public BigInteger isBindPhone;

        public BigInteger role;

        public BigInteger status;

        public User(String account, String name, String phone, String password, BigInteger isBindPhone, BigInteger role, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(account),new org.web3j.abi.datatypes.Utf8String(name),new org.web3j.abi.datatypes.Utf8String(phone),new org.web3j.abi.datatypes.Utf8String(password),new org.web3j.abi.datatypes.generated.Uint256(isBindPhone),new org.web3j.abi.datatypes.generated.Uint256(role),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.account = account;
            this.name = name;
            this.phone = phone;
            this.password = password;
            this.isBindPhone = isBindPhone;
            this.role = role;
            this.status = status;
        }

        public User(Utf8String account, Utf8String name, Utf8String phone, Utf8String password, Uint256 isBindPhone, Uint256 role, Uint256 status) {
            super(account,name,phone,password,isBindPhone,role,status);
            this.account = account.getValue();
            this.name = name.getValue();
            this.phone = phone.getValue();
            this.password = password.getValue();
            this.isBindPhone = isBindPhone.getValue();
            this.role = role.getValue();
            this.status = status.getValue();
        }
    }

    public static class LogEventResponse extends BaseEventResponse {
        public String message;

        public BigInteger value;
    }

    public static class ReturnUserInfoEventResponse extends BaseEventResponse {
        public String message;

        public User user;
    }
}

