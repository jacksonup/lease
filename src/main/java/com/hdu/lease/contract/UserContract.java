package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class UserContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b50613306806100296000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806391bbec1a1161008c5780639f9d06a9116100665780639f9d06a914610289578063a8c5f884146102a7578063d0211968146102d7578063dec632ad146102f3576100ea565b806391bbec1a1461021f57806394ed7fd81461024f5780639e4135211461026d576100ea565b8063689e1c03116100c8578063689e1c03146101595780636f1bd1a51461018f5780637c9b7fdd146101bf57806381842aa6146101ef576100ea565b806306661abd146100ef57806351911a8d1461010d57806367f58d1914610129575b600080fd5b6100f761030f565b60405161010491906121b9565b60405180910390f35b6101276004803603810190610122919061232e565b610319565b005b610143600480360381019061013e91906123a6565b61040a565b604051610150919061240a565b60405180910390f35b610173600480360381019061016e91906123a6565b61047d565b60405161018697969594939291906124ad565b60405180910390f35b6101a960048036038101906101a491906123a6565b6106f5565b6040516101b6919061240a565b60405180910390f35b6101d960048036038101906101d491906123a6565b61072b565b6040516101e69190612642565b60405180910390f35b61020960048036038101906102049190612690565b610a00565b60405161021691906126bd565b60405180910390f35b61023960048036038101906102349190612690565b610aac565b6040516102469190612852565b60405180910390f35b610257610f64565b6040516102649190612852565b60405180910390f35b610287600480360381019061028291906129a2565b611383565b005b6102916114f9565b60405161029e9190612852565b60405180910390f35b6102c160048036038101906102bc9190612ab3565b611852565b6040516102ce9190612852565b60405180910390f35b6102f160048036038101906102ec919061232e565b611da8565b005b61030d60048036038101906103089190612c03565b611e99565b005b6000600354905090565b600060018360405161032b9190612c88565b908152602001604051809103902060009054906101000a900460ff16156103875760019050816000846040516103619190612c88565b908152602001604051809103902060020190805190602001906103859291906120c0565b505b80156103cb577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127106040516103be9190612d56565b60405180910390a1610405565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127116040516103fc9190612e31565b60405180910390a15b505050565b600060018260405161041c9190612c88565b908152602001604051809103902060009054906101000a900460ff168015610465575060026000836040516104519190612c88565b908152602001604051809103902060050154145b156104735760019050610478565b600090505b919050565b6000818051602081018201805184825260208301602085012081835280955050505050506000915090508060000180546104b690612e8e565b80601f01602080910402602001604051908101604052809291908181526020018280546104e290612e8e565b801561052f5780601f106105045761010080835404028352916020019161052f565b820191906000526020600020905b81548152906001019060200180831161051257829003601f168201915b50505050509080600101805461054490612e8e565b80601f016020809104026020016040519081016040528092919081815260200182805461057090612e8e565b80156105bd5780601f10610592576101008083540402835291602001916105bd565b820191906000526020600020905b8154815290600101906020018083116105a057829003601f168201915b5050505050908060020180546105d290612e8e565b80601f01602080910402602001604051908101604052809291908181526020018280546105fe90612e8e565b801561064b5780601f106106205761010080835404028352916020019161064b565b820191906000526020600020905b81548152906001019060200180831161062e57829003601f168201915b50505050509080600301805461066090612e8e565b80601f016020809104026020016040519081016040528092919081815260200182805461068c90612e8e565b80156106d95780601f106106ae576101008083540402835291602001916106d9565b820191906000526020600020905b8154815290600101906020018083116106bc57829003601f168201915b5050505050908060040154908060050154908060060154905087565b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b610733612146565b6001826040516107439190612c88565b908152602001604051809103902060009054906101000a900460ff16156109fa576000826040516107749190612c88565b90815260200160405180910390206040518060e001604052908160008201805461079d90612e8e565b80601f01602080910402602001604051908101604052809291908181526020018280546107c990612e8e565b80156108165780601f106107eb57610100808354040283529160200191610816565b820191906000526020600020905b8154815290600101906020018083116107f957829003601f168201915b5050505050815260200160018201805461082f90612e8e565b80601f016020809104026020016040519081016040528092919081815260200182805461085b90612e8e565b80156108a85780601f1061087d576101008083540402835291602001916108a8565b820191906000526020600020905b81548152906001019060200180831161088b57829003601f168201915b505050505081526020016002820180546108c190612e8e565b80601f01602080910402602001604051908101604052809291908181526020018280546108ed90612e8e565b801561093a5780601f1061090f5761010080835404028352916020019161093a565b820191906000526020600020905b81548152906001019060200180831161091d57829003601f168201915b5050505050815260200160038201805461095390612e8e565b80601f016020809104026020016040519081016040528092919081815260200182805461097f90612e8e565b80156109cc5780601f106109a1576101008083540402835291602001916109cc565b820191906000526020600020905b8154815290600101906020018083116109af57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505090506109fb565b5b919050565b60028181548110610a1057600080fd5b906000526020600020016000915090508054610a2b90612e8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5790612e8e565b8015610aa45780601f10610a7957610100808354040283529160200191610aa4565b820191906000526020600020905b815481529060010190602001808311610a8757829003601f168201915b505050505081565b60606000600a67ffffffffffffffff811115610acb57610aca612203565b5b604051908082528060200260200182016040528015610b0457816020015b610af1612146565b815260200190600190039081610ae95790505b509050610b0f612146565b60606000808690505b60035481108015610b295750600a82105b15610ea65760028181548110610b4257610b41612ec0565b5b906000526020600020018054610b5790612e8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8390612e8e565b8015610bd05780601f10610ba557610100808354040283529160200191610bd0565b820191906000526020600020905b815481529060010190602001808311610bb357829003601f168201915b50505050509250600083604051610be79190612c88565b90815260200160405180910390206040518060e0016040529081600082018054610c1090612e8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3c90612e8e565b8015610c895780601f10610c5e57610100808354040283529160200191610c89565b820191906000526020600020905b815481529060010190602001808311610c6c57829003601f168201915b50505050508152602001600182018054610ca290612e8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610cce90612e8e565b8015610d1b5780601f10610cf057610100808354040283529160200191610d1b565b820191906000526020600020905b815481529060010190602001808311610cfe57829003601f168201915b50505050508152602001600282018054610d3490612e8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6090612e8e565b8015610dad5780601f10610d8257610100808354040283529160200191610dad565b820191906000526020600020905b815481529060010190602001808311610d9057829003601f168201915b50505050508152602001600382018054610dc690612e8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610df290612e8e565b8015610e3f5780601f10610e1457610100808354040283529160200191610e3f565b820191906000526020600020905b815481529060010190602001808311610e2257829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682015481525050935083858380610e7590612f1e565b945081518110610e8857610e87612ec0565b5b60200260200101819052508080610e9e90612f1e565b915050610b18565b5060008167ffffffffffffffff811115610ec357610ec2612203565b5b604051908082528060200260200182016040528015610efc57816020015b610ee9612146565b815260200190600190039081610ee15790505b50905060005b82811015610f5657858181518110610f1d57610f1c612ec0565b5b6020026020010151828281518110610f3857610f37612ec0565b5b60200260200101819052508080610f4e90612f1e565b915050610f02565b508095505050505050919050565b60606000600a67ffffffffffffffff811115610f8357610f82612203565b5b604051908082528060200260200182016040528015610fbc57816020015b610fa9612146565b815260200190600190039081610fa15790505b509050610fc7612146565b610fcf612146565b6040518060400160405280600781526020017f74686520656e640000000000000000000000000000000000000000000000000081525081602001819052506000805b60035481101561135957600160006002838154811061103357611032612ec0565b5b9060005260206000200160405161104a9190612ffb565b90815260200160405180910390206005015414156113405760006002828154811061107857611077612ec0565b5b9060005260206000200160405161108f9190612ffb565b90815260200160405180910390206040518060e00160405290816000820180546110b890612e8e565b80601f01602080910402602001604051908101604052809291908181526020018280546110e490612e8e565b80156111315780601f1061110657610100808354040283529160200191611131565b820191906000526020600020905b81548152906001019060200180831161111457829003601f168201915b5050505050815260200160018201805461114a90612e8e565b80601f016020809104026020016040519081016040528092919081815260200182805461117690612e8e565b80156111c35780601f10611198576101008083540402835291602001916111c3565b820191906000526020600020905b8154815290600101906020018083116111a657829003601f168201915b505050505081526020016002820180546111dc90612e8e565b80601f016020809104026020016040519081016040528092919081815260200182805461120890612e8e565b80156112555780601f1061122a57610100808354040283529160200191611255565b820191906000526020600020905b81548152906001019060200180831161123857829003601f168201915b5050505050815260200160038201805461126e90612e8e565b80601f016020809104026020016040519081016040528092919081815260200182805461129a90612e8e565b80156112e75780601f106112bc576101008083540402835291602001916112e7565b820191906000526020600020905b8154815290600101906020018083116112ca57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505093508385838061131d90612f1e565b9450815181106113305761132f612ec0565b5b6020026020010181905250611345565b611346565b5b808061135190612f1e565b915050611011565b508184828151811061136e5761136d612ec0565b5b60200260200101819052508394505050505090565b6000600182600001516040516113999190612c88565b908152602001604051809103902060009054906101000a900460ff16156114775781600083600001516040516113cf9190612c88565b908152602001604051809103902060008201518160000190805190602001906113f99291906120c0565b5060208201518160010190805190602001906114169291906120c0565b5060408201518160020190805190602001906114339291906120c0565b5060608201518160030190805190602001906114509291906120c0565b506080820151816004015560a0820151816005015560c08201518160060155905050600190505b80156114bb577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127106040516114ae919061305e565b60405180910390a16114f5565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b56127116040516114ec91906130d8565b60405180910390a15b5050565b606060035467ffffffffffffffff81111561151757611516612203565b5b60405190808252806020026020018201604052801561155057816020015b61153d612146565b8152602001906001900390816115355790505b5090506000805b60028054905081101561184d5760006002828154811061157a57611579612ec0565b5b906000526020600020016040516115919190612ffb565b90815260200160405180910390206040518060e00160405290816000820180546115ba90612e8e565b80601f01602080910402602001604051908101604052809291908181526020018280546115e690612e8e565b80156116335780601f1061160857610100808354040283529160200191611633565b820191906000526020600020905b81548152906001019060200180831161161657829003601f168201915b5050505050815260200160018201805461164c90612e8e565b80601f016020809104026020016040519081016040528092919081815260200182805461167890612e8e565b80156116c55780601f1061169a576101008083540402835291602001916116c5565b820191906000526020600020905b8154815290600101906020018083116116a857829003601f168201915b505050505081526020016002820180546116de90612e8e565b80601f016020809104026020016040519081016040528092919081815260200182805461170a90612e8e565b80156117575780601f1061172c57610100808354040283529160200191611757565b820191906000526020600020905b81548152906001019060200180831161173a57829003601f168201915b5050505050815260200160038201805461177090612e8e565b80601f016020809104026020016040519081016040528092919081815260200182805461179c90612e8e565b80156117e95780601f106117be576101008083540402835291602001916117e9565b820191906000526020600020905b8154815290600101906020018083116117cc57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505083838061181c90612f1e565b94508151811061182f5761182e612ec0565b5b6020026020010181905250808061184590612f1e565b915050611557565b505090565b6060600060035467ffffffffffffffff81111561187257611871612203565b5b6040519080825280602002602001820160405280156118ab57816020015b611898612146565b8152602001906001900390816118905790505b5090506000805b8651811015611c265760005b600354811015611c12578782815181106118db576118da612ec0565b5b60200260200101516000600283815481106118f9576118f8612ec0565b5b906000526020600020016040516119109190612ffb565b9081526020016040518091039020600501541415611bff5760006002828154811061193e5761193d612ec0565b5b906000526020600020016040516119559190612ffb565b90815260200160405180910390206040518060e001604052908160008201805461197e90612e8e565b80601f01602080910402602001604051908101604052809291908181526020018280546119aa90612e8e565b80156119f75780601f106119cc576101008083540402835291602001916119f7565b820191906000526020600020905b8154815290600101906020018083116119da57829003601f168201915b50505050508152602001600182018054611a1090612e8e565b80601f0160208091040260200160405190810160405280929190818152602001828054611a3c90612e8e565b8015611a895780601f10611a5e57610100808354040283529160200191611a89565b820191906000526020600020905b815481529060010190602001808311611a6c57829003601f168201915b50505050508152602001600282018054611aa290612e8e565b80601f0160208091040260200160405190810160405280929190818152602001828054611ace90612e8e565b8015611b1b5780601f10611af057610100808354040283529160200191611b1b565b820191906000526020600020905b815481529060010190602001808311611afe57829003601f168201915b50505050508152602001600382018054611b3490612e8e565b80601f0160208091040260200160405190810160405280929190818152602001828054611b6090612e8e565b8015611bad5780601f10611b8257610100808354040283529160200191611bad565b820191906000526020600020905b815481529060010190602001808311611b9057829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682015481525050848480611be090612f1e565b955081518110611bf357611bf2612ec0565b5b60200260200101819052505b8080611c0a90612f1e565b9150506118be565b508080611c1e90612f1e565b9150506118b2565b5084841015611c36575050611da1565b600181611c439190613106565b841115611cc757600181611c579190613106565b935060018585611c679190613106565b611c71919061313a565b67ffffffffffffffff811115611c8a57611c89612203565b5b604051908082528060200260200182016040528015611cc357816020015b611cb0612146565b815260200190600190039081611ca85790505b5092505b60018585611cd59190613106565b611cdf919061313a565b67ffffffffffffffff811115611cf857611cf7612203565b5b604051908082528060200260200182016040528015611d3157816020015b611d1e612146565b815260200190600190039081611d165790505b5092506000905060008590505b848111611d9d57828181518110611d5857611d57612ec0565b5b6020026020010151848380611d6c90612f1e565b945081518110611d7f57611d7e612ec0565b5b60200260200101819052508080611d9590612f1e565b915050611d3e565b5050505b9392505050565b6000600183604051611dba9190612c88565b908152602001604051809103902060009054906101000a900460ff1615611e16576001905081600084604051611df09190612c88565b90815260200160405180910390206003019080519060200190611e149291906120c0565b505b8015611e5a577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b5612710604051611e4d9190613202565b60405180910390a1611e94565b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b5612711604051611e8b91906132a2565b60405180910390a15b505050565b60005b81518110156120bc576001828281518110611eba57611eb9612ec0565b5b602002602001015160000151604051611ed39190612c88565b908152602001604051809103902060009054906101000a900460ff1615611ef9576120a9565b818181518110611f0c57611f0b612ec0565b5b60200260200101516000838381518110611f2957611f28612ec0565b5b602002602001015160000151604051611f429190612c88565b90815260200160405180910390206000820151816000019080519060200190611f6c9291906120c0565b506020820151816001019080519060200190611f899291906120c0565b506040820151816002019080519060200190611fa69291906120c0565b506060820151816003019080519060200190611fc39291906120c0565b506080820151816004015560a0820151816005015560c08201518160060155905050600180838381518110611ffb57611ffa612ec0565b5b6020026020010151600001516040516120149190612c88565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600282828151811061204e5761204d612ec0565b5b6020026020010151600001519080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906120929291906120c0565b5060016003546120a2919061313a565b6003819055505b80806120b490612f1e565b915050611e9c565b5050565b8280546120cc90612e8e565b90600052602060002090601f0160209004810192826120ee5760008555612135565b82601f1061210757805160ff1916838001178555612135565b82800160010185558215612135579182015b82811115612134578251825591602001919060010190612119565b5b5090506121429190612183565b5090565b6040518060e00160405280606081526020016060815260200160608152602001606081526020016000815260200160008152602001600081525090565b5b8082111561219c576000816000905550600101612184565b5090565b6000819050919050565b6121b3816121a0565b82525050565b60006020820190506121ce60008301846121aa565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61223b826121f2565b810181811067ffffffffffffffff8211171561225a57612259612203565b5b80604052505050565b600061226d6121d4565b90506122798282612232565b919050565b600067ffffffffffffffff82111561229957612298612203565b5b6122a2826121f2565b9050602081019050919050565b82818337600083830152505050565b60006122d16122cc8461227e565b612263565b9050828152602081018484840111156122ed576122ec6121ed565b5b6122f88482856122af565b509392505050565b600082601f830112612315576123146121e8565b5b81356123258482602086016122be565b91505092915050565b60008060408385031215612345576123446121de565b5b600083013567ffffffffffffffff811115612363576123626121e3565b5b61236f85828601612300565b925050602083013567ffffffffffffffff8111156123905761238f6121e3565b5b61239c85828601612300565b9150509250929050565b6000602082840312156123bc576123bb6121de565b5b600082013567ffffffffffffffff8111156123da576123d96121e3565b5b6123e684828501612300565b91505092915050565b60008115159050919050565b612404816123ef565b82525050565b600060208201905061241f60008301846123fb565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561245f578082015181840152602081019050612444565b8381111561246e576000848401525b50505050565b600061247f82612425565b6124898185612430565b9350612499818560208601612441565b6124a2816121f2565b840191505092915050565b600060e08201905081810360008301526124c7818a612474565b905081810360208301526124db8189612474565b905081810360408301526124ef8188612474565b905081810360608301526125038187612474565b905061251260808301866121aa565b61251f60a08301856121aa565b61252c60c08301846121aa565b98975050505050505050565b600082825260208201905092915050565b600061255482612425565b61255e8185612538565b935061256e818560208601612441565b612577816121f2565b840191505092915050565b61258b816121a0565b82525050565b600060e08301600083015184820360008601526125ae8282612549565b915050602083015184820360208601526125c88282612549565b915050604083015184820360408601526125e28282612549565b915050606083015184820360608601526125fc8282612549565b91505060808301516126116080860182612582565b5060a083015161262460a0860182612582565b5060c083015161263760c0860182612582565b508091505092915050565b6000602082019050818103600083015261265c8184612591565b905092915050565b61266d816121a0565b811461267857600080fd5b50565b60008135905061268a81612664565b92915050565b6000602082840312156126a6576126a56121de565b5b60006126b48482850161267b565b91505092915050565b600060208201905081810360008301526126d78184612474565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060e08301600083015184820360008601526127288282612549565b915050602083015184820360208601526127428282612549565b9150506040830151848203604086015261275c8282612549565b915050606083015184820360608601526127768282612549565b915050608083015161278b6080860182612582565b5060a083015161279e60a0860182612582565b5060c08301516127b160c0860182612582565b508091505092915050565b60006127c8838361270b565b905092915050565b6000602082019050919050565b60006127e8826126df565b6127f281856126ea565b935083602082028501612804856126fb565b8060005b85811015612840578484038952815161282185826127bc565b945061282c836127d0565b925060208a01995050600181019050612808565b50829750879550505050505092915050565b6000602082019050818103600083015261286c81846127dd565b905092915050565b600080fd5b600080fd5b600060e0828403121561289457612893612874565b5b61289e60e0612263565b9050600082013567ffffffffffffffff8111156128be576128bd612879565b5b6128ca84828501612300565b600083015250602082013567ffffffffffffffff8111156128ee576128ed612879565b5b6128fa84828501612300565b602083015250604082013567ffffffffffffffff81111561291e5761291d612879565b5b61292a84828501612300565b604083015250606082013567ffffffffffffffff81111561294e5761294d612879565b5b61295a84828501612300565b606083015250608061296e8482850161267b565b60808301525060a06129828482850161267b565b60a08301525060c06129968482850161267b565b60c08301525092915050565b6000602082840312156129b8576129b76121de565b5b600082013567ffffffffffffffff8111156129d6576129d56121e3565b5b6129e28482850161287e565b91505092915050565b600067ffffffffffffffff821115612a0657612a05612203565b5b602082029050602081019050919050565b600080fd5b6000612a2f612a2a846129eb565b612263565b90508083825260208201905060208402830185811115612a5257612a51612a17565b5b835b81811015612a7b5780612a67888261267b565b845260208401935050602081019050612a54565b5050509392505050565b600082601f830112612a9a57612a996121e8565b5b8135612aaa848260208601612a1c565b91505092915050565b600080600060608486031215612acc57612acb6121de565b5b600084013567ffffffffffffffff811115612aea57612ae96121e3565b5b612af686828701612a85565b9350506020612b078682870161267b565b9250506040612b188682870161267b565b9150509250925092565b600067ffffffffffffffff821115612b3d57612b3c612203565b5b602082029050602081019050919050565b6000612b61612b5c84612b22565b612263565b90508083825260208201905060208402830185811115612b8457612b83612a17565b5b835b81811015612bcb57803567ffffffffffffffff811115612ba957612ba86121e8565b5b808601612bb6898261287e565b85526020850194505050602081019050612b86565b5050509392505050565b600082601f830112612bea57612be96121e8565b5b8135612bfa848260208601612b4e565b91505092915050565b600060208284031215612c1957612c186121de565b5b600082013567ffffffffffffffff811115612c3757612c366121e3565b5b612c4384828501612bd5565b91505092915050565b600081905092915050565b6000612c6282612425565b612c6c8185612c4c565b9350612c7c818560208601612441565b80840191505092915050565b6000612c948284612c57565b915081905092915050565b7f6d6f64696679205573657227732070686f6e65206279206163636f756e74207360008201527f7563636573732100000000000000000000000000000000000000000000000000602082015250565b6000612cfb602783612430565b9150612d0682612c9f565b604082019050919050565b6000819050919050565b6000819050919050565b6000612d40612d3b612d3684612d11565b612d1b565b6121a0565b9050919050565b612d5081612d25565b82525050565b60006040820190508181036000830152612d6f81612cee565b9050612d7e6020830184612d47565b92915050565b7f6d6f64696679205573657227732070686f6e65206279206163636f756e74206660008201527f61696c6564210000000000000000000000000000000000000000000000000000602082015250565b6000612de0602683612430565b9150612deb82612d84565b604082019050919050565b6000819050919050565b6000612e1b612e16612e1184612df6565b612d1b565b6121a0565b9050919050565b612e2b81612e00565b82525050565b60006040820190508181036000830152612e4a81612dd3565b9050612e596020830184612e22565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612ea657607f821691505b60208210811415612eba57612eb9612e5f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f29826121a0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612f5c57612f5b612eef565b5b600182019050919050565b60008190508160005260206000209050919050565b60008154612f8981612e8e565b612f938186612c4c565b94506001821660008114612fae5760018114612fbf57612ff2565b60ff19831686528186019350612ff2565b612fc885612f67565b60005b83811015612fea57815481890152600182019150602081019050612fcb565b838801955050505b50505092915050565b60006130078284612f7c565b915081905092915050565b7f6d6f646966792075736572696e666f2062792069642073756363657373210000600082015250565b6000613048601e83612430565b915061305382613012565b602082019050919050565b600060408201905081810360008301526130778161303b565b90506130866020830184612d47565b92915050565b7f6d6f646966792075736572696e666f206279206964206661696c656421000000600082015250565b60006130c2601d83612430565b91506130cd8261308c565b602082019050919050565b600060408201905081810360008301526130f1816130b5565b90506131006020830184612e22565b92915050565b6000613111826121a0565b915061311c836121a0565b92508282101561312f5761312e612eef565b5b828203905092915050565b6000613145826121a0565b9150613150836121a0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561318557613184612eef565b5b828201905092915050565b7f6d6f64696679207573657227732070617373776f7264206279206163636f756e60008201527f7420737563636573732100000000000000000000000000000000000000000000602082015250565b60006131ec602a83612430565b91506131f782613190565b604082019050919050565b6000604082019050818103600083015261321b816131df565b905061322a6020830184612d47565b92915050565b7f6d6f64696679207573657227732070617373776f7264206279206163636f756e60008201527f74206661696c6564210000000000000000000000000000000000000000000000602082015250565b600061328c602983612430565b915061329782613230565b604082019050919050565b600060408201905081810360008301526132bb8161327f565b90506132ca6020830184612e22565b9291505056fea2646970667358221220fb63cb3983991e0563284adccc1d752b87ff47ea354fdeba6ade9a49da0a2c0c64736f6c634300080a0033";

    public static final String FUNC_BATCHADDUSER = "batchAddUser";

    public static final String FUNC_COUNT = "count";

    public static final String FUNC_GETALLLIST = "getAllList";

    public static final String FUNC_GETLISTBYROLEIDPAGE = "getListByRoleIdPage";

    public static final String FUNC_GETROLELIST = "getRoleList";

    public static final String FUNC_GETUSERINFO = "getUserInfo";

    public static final String FUNC_GETUSERLIST = "getUserList";

    public static final String FUNC_ISROLLER2 = "isRoller2";

    public static final String FUNC_MODIFYPASSWORDBYACCOUNT = "modifyPasswordByAccount";

    public static final String FUNC_MODIFYPHONEBYACCOUNT = "modifyPhoneByAccount";

    public static final String FUNC_MODIFYUSERINFOBYID = "modifyUserInfoById";

    public static final String FUNC_USERINSERTED = "userInserted";

    public static final String FUNC_USERKEY = "userKey";

    public static final String FUNC_USERS = "users";

    public static final Event LOG_EVENT = new Event("Log",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RETURNUSERINFO_EVENT = new Event("returnUserInfo",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<User>() {}));
    ;

    @Deprecated
    protected UserContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected UserContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected UserContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected UserContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<LogEventResponse> getLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOG_EVENT, transactionReceipt);
        ArrayList<LogEventResponse> responses = new ArrayList<LogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogEventResponse typedResponse = new LogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogEventResponse> logEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogEventResponse>() {
            @Override
            public LogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOG_EVENT, log);
                LogEventResponse typedResponse = new LogEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogEventResponse> logEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOG_EVENT));
        return logEventFlowable(filter);
    }

    public List<ReturnUserInfoEventResponse> getReturnUserInfoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETURNUSERINFO_EVENT, transactionReceipt);
        ArrayList<ReturnUserInfoEventResponse> responses = new ArrayList<ReturnUserInfoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReturnUserInfoEventResponse typedResponse = new ReturnUserInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (User) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReturnUserInfoEventResponse> returnUserInfoEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReturnUserInfoEventResponse>() {
            @Override
            public ReturnUserInfoEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RETURNUSERINFO_EVENT, log);
                ReturnUserInfoEventResponse typedResponse = new ReturnUserInfoEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (User) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ReturnUserInfoEventResponse> returnUserInfoEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RETURNUSERINFO_EVENT));
        return returnUserInfoEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> batchAddUser(List<User> _users) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHADDUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<User>(User.class, _users)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> count() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getAllList() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALLLIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getListByRoleIdPage(List<BigInteger> roleId, BigInteger begin, BigInteger end) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYROLEIDPAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(roleId, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.generated.Uint256(begin),
                        new org.web3j.abi.datatypes.generated.Uint256(end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getRoleList() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLELIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<User> getUserInfo(String _account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERINFO,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<User>() {}));
        return executeRemoteCallSingleValueReturn(function, User.class);
    }

    public RemoteFunctionCall<List> getUserList(BigInteger _from) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_from)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<User>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isRoller2(String _account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISROLLER2,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyPasswordByAccount(String _account, String _password) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYPASSWORDBYACCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account),
                        new org.web3j.abi.datatypes.Utf8String(_password)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyPhoneByAccount(String _account, String _phone) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYPHONEBYACCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_account),
                        new org.web3j.abi.datatypes.Utf8String(_phone)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyUserInfoById(User _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYUSERINFOBYID,
                Arrays.<Type>asList(_user),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> userInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> userKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>> users(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    @Deprecated
    public static UserContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static UserContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static UserContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new UserContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static UserContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new UserContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<UserContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<UserContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
    @Getter
    @Setter
    @ToString
    public static class User extends DynamicStruct {
        public String account;

        public String name;

        public String phone;

        public String password;

        public BigInteger isBindPhone;

        public BigInteger role;

        public BigInteger status;

        public User(String account, String name, String phone, String password, BigInteger isBindPhone, BigInteger role, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(account),new org.web3j.abi.datatypes.Utf8String(name),new org.web3j.abi.datatypes.Utf8String(phone),new org.web3j.abi.datatypes.Utf8String(password),new org.web3j.abi.datatypes.generated.Uint256(isBindPhone),new org.web3j.abi.datatypes.generated.Uint256(role),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.account = account;
            this.name = name;
            this.phone = phone;
            this.password = password;
            this.isBindPhone = isBindPhone;
            this.role = role;
            this.status = status;
        }

        public User(Utf8String account, Utf8String name, Utf8String phone, Utf8String password, Uint256 isBindPhone, Uint256 role, Uint256 status) {
            super(account,name,phone,password,isBindPhone,role,status);
            this.account = account.getValue();
            this.name = name.getValue();
            this.phone = phone.getValue();
            this.password = password.getValue();
            this.isBindPhone = isBindPhone.getValue();
            this.role = role.getValue();
            this.status = status.getValue();
        }
    }

    @Getter
    public static class LogEventResponse extends BaseEventResponse {
        public String message;

        public BigInteger value;
    }

    @Getter
    public static class ReturnUserInfoEventResponse extends BaseEventResponse {
        public String message;

        public User user;
    }
}
