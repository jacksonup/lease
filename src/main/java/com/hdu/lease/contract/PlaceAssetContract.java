package com.hdu.lease.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class PlaceAssetContract extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_BINDASSET = "bindAsset";

    public static final String FUNC_DELETEBYASSETID = "deleteByAssetId";

    public static final String FUNC_GETASSETIDLISTBYPLACEID = "getAssetIdListByPlaceId";

    public static final String FUNC_GETPLACEASSET = "getPlaceAsset";

    public static final String FUNC_GETPLACEASSETLIST = "getPlaceAssetList";

    public static final String FUNC_GETPLACEINFOLIST = "getPlaceInfoList";

    public static final String FUNC_GETPLACEINFOTEST = "getPlaceInfoTest";

    public static final String FUNC_GETPLACELIST = "getPlaceList";

    public static final String FUNC_ISEQUAL = "isEqual";

    public static final String FUNC_ISPLACEBINDASSET = "isPlaceBindAsset";

    public static final String FUNC_PLACEASSETINSERTED = "placeAssetInserted";

    public static final String FUNC_PLACEASSETKEY = "placeAssetKey";

    public static final String FUNC_PLACEASSETS = "placeAssets";

    public static final String FUNC_REMOVEPLACEASSETKEYATINDEX = "removePlaceAssetKeyAtIndex";

    @Deprecated
    protected PlaceAssetContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PlaceAssetContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PlaceAssetContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PlaceAssetContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> bindAsset(List<PlaceAsset> _placeAssets) {
        final Function function = new Function(
                FUNC_BINDASSET,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<PlaceAsset>(PlaceAsset.class, _placeAssets)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteByAssetId(String _assetId) {
        final Function function = new Function(
                FUNC_DELETEBYASSETID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAssetIdListByPlaceId(String _placeId) {
        final Function function = new Function(FUNC_GETASSETIDLISTBYPLACEID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_placeId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<PlaceAsset> getPlaceAsset() {
        final Function function = new Function(FUNC_GETPLACEASSET,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<PlaceAsset>() {}));
        return executeRemoteCallSingleValueReturn(function, PlaceAsset.class);
    }

    public RemoteFunctionCall<List> getPlaceAssetList() {
        final Function function = new Function(FUNC_GETPLACEASSETLIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<PlaceAsset>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getPlaceInfoList(String _placeContract, String _assetId) {
        final Function function = new Function(FUNC_GETPLACEINFOLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _placeContract),
                        new org.web3j.abi.datatypes.Utf8String(_assetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<PlaceInfo>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<PlaceInfo> getPlaceInfoTest() {
        final Function function = new Function(FUNC_GETPLACEINFOTEST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<PlaceInfo>() {}));
        return executeRemoteCallSingleValueReturn(function, PlaceInfo.class);
    }

    public RemoteFunctionCall<List> getPlaceList(String _placeContract, String _assetId) {
        final Function function = new Function(FUNC_GETPLACELIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _placeContract),
                        new org.web3j.abi.datatypes.Utf8String(_assetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isEqual(String a, String b) {
        final Function function = new Function(FUNC_ISEQUAL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a),
                        new org.web3j.abi.datatypes.Utf8String(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isPlaceBindAsset(String _placeId) {
        final Function function = new Function(FUNC_ISPLACEBINDASSET,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_placeId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> placeAssetInserted(String param0) {
        final Function function = new Function(FUNC_PLACEASSETINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> placeAssetKey(BigInteger param0) {
        final Function function = new Function(FUNC_PLACEASSETKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, BigInteger, BigInteger>> placeAssets(String param0) {
        final Function function = new Function(FUNC_PLACEASSETS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> removePlaceAssetKeyAtIndex(BigInteger index) {
        final Function function = new Function(
                FUNC_REMOVEPLACEASSETKEYATINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static PlaceAssetContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PlaceAssetContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PlaceAssetContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PlaceAssetContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PlaceAssetContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PlaceAssetContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PlaceAssetContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PlaceAssetContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PlaceAssetContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PlaceAssetContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PlaceAssetContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PlaceAssetContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<PlaceAssetContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PlaceAssetContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PlaceAssetContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PlaceAssetContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Getter
    @Setter
    @ToString
    public static class PlaceAsset extends DynamicStruct {
        public String placeAssetId;

        public String placeId;

        public String assetId;

        public BigInteger count;

        public BigInteger status;

        public PlaceAsset(String placeAssetId, String placeId, String assetId, BigInteger count, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(placeAssetId),new org.web3j.abi.datatypes.Utf8String(placeId),new org.web3j.abi.datatypes.Utf8String(assetId),new org.web3j.abi.datatypes.generated.Uint256(count),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.placeAssetId = placeAssetId;
            this.placeId = placeId;
            this.assetId = assetId;
            this.count = count;
            this.status = status;
        }

        public PlaceAsset(Utf8String placeAssetId, Utf8String placeId, Utf8String assetId, Uint256 count, Uint256 status) {
            super(placeAssetId,placeId,assetId,count,status);
            this.placeAssetId = placeAssetId.getValue();
            this.placeId = placeId.getValue();
            this.assetId = assetId.getValue();
            this.count = count.getValue();
            this.status = status.getValue();
        }
    }

    @Getter
    @Setter
    @ToString
    public static class PlaceInfo extends DynamicStruct {
        public String placeId;

        public String placeName;

        public PlaceInfo(String placeId, String placeName) {
            super(new org.web3j.abi.datatypes.Utf8String(placeId),new org.web3j.abi.datatypes.Utf8String(placeName));
            this.placeId = placeId;
            this.placeName = placeName;
        }

        public PlaceInfo(Utf8String placeId, Utf8String placeName) {
            super(placeId,placeName);
            this.placeId = placeId.getValue();
            this.placeName = placeName.getValue();
        }
    }
}
