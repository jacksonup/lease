package com.hdu.lease.contract;
import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class NoticeContract extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_GETBYID = "getById";

    public static final String FUNC_GETLISTBYTIMEANDTYPEORISREAD = "getListByTimeAndTypeOrIsRead";

    public static final String FUNC_GETLISTBYTIMEANDTYPEORISREAD2 = "getListByTimeAndTypeOrIsRead2";

    public static final String FUNC_GETNOTICE1 = "getNotice1";

    public static final String FUNC_GETTYPECOUNTS = "getTypeCounts";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_NOTICEINSERTED = "noticeInserted";

    public static final String FUNC_NOTICEKEY = "noticeKey";

    public static final String FUNC_NOTICES = "notices";

    public static final String FUNC_READALL = "readAll";

    public static final String FUNC_UPDATE = "update";

    public static final Event UPDATEEVENT_EVENT = new Event("updateEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected NoticeContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NoticeContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NoticeContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected NoticeContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<UpdateEventEventResponse> getUpdateEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEEVENT_EVENT, transactionReceipt);
        ArrayList<UpdateEventEventResponse> responses = new ArrayList<UpdateEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateEventEventResponse typedResponse = new UpdateEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateEventEventResponse> updateEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdateEventEventResponse>() {
            @Override
            public UpdateEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEEVENT_EVENT, log);
                UpdateEventEventResponse typedResponse = new UpdateEventEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateEventEventResponse> updateEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEEVENT_EVENT));
        return updateEventEventFlowable(filter);
    }

    public RemoteFunctionCall<Notice> getById(String id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBYID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Notice>() {}));
        return executeRemoteCallSingleValueReturn(function, Notice.class);
    }

    public RemoteFunctionCall<List> getListByTimeAndTypeOrIsRead(Boolean _timeRange, BigInteger _beginTime, BigInteger _endTime, BigInteger _noticeType, Boolean _isType, Boolean _isRead) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYTIMEANDTYPEORISREAD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_timeRange),
                        new org.web3j.abi.datatypes.generated.Uint256(_beginTime),
                        new org.web3j.abi.datatypes.generated.Uint256(_endTime),
                        new org.web3j.abi.datatypes.generated.Int256(_noticeType),
                        new org.web3j.abi.datatypes.Bool(_isType),
                        new org.web3j.abi.datatypes.Bool(_isRead)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Notice>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getListByTimeAndTypeOrIsRead2(Boolean _timeRange, BigInteger _beginTime, BigInteger _endTime, Boolean _isRead, BigInteger _noticeType) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYTIMEANDTYPEORISREAD2,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_timeRange),
                        new org.web3j.abi.datatypes.generated.Uint256(_beginTime),
                        new org.web3j.abi.datatypes.generated.Uint256(_endTime),
                        new org.web3j.abi.datatypes.Bool(_isRead),
                        new org.web3j.abi.datatypes.generated.Int256(_noticeType)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Notice>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Notice> getNotice1() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNOTICE1,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Notice>() {}));
        return executeRemoteCallSingleValueReturn(function, Notice.class);
    }

    public RemoteFunctionCall<NoticeCountsDTO> getTypeCounts(Boolean _timeRange, BigInteger _beginTime, BigInteger _endTime, Boolean _isRead) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTYPECOUNTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_timeRange),
                        new org.web3j.abi.datatypes.generated.Uint256(_beginTime),
                        new org.web3j.abi.datatypes.generated.Uint256(_endTime),
                        new org.web3j.abi.datatypes.Bool(_isRead)),
                Arrays.<TypeReference<?>>asList(new TypeReference<NoticeCountsDTO>() {}));
        return executeRemoteCallSingleValueReturn(function, NoticeCountsDTO.class);
    }

    public RemoteFunctionCall<TransactionReceipt> insert(Notice _notice) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INSERT,
                Arrays.<Type>asList(_notice),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> noticeInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NOTICEINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> noticeKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NOTICEKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple6<String, BigInteger, String, BigInteger, Boolean, String>> notices(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NOTICES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple6<String, BigInteger, String, BigInteger, Boolean, String>>(function,
                new Callable<Tuple6<String, BigInteger, String, BigInteger, Boolean, String>>() {
                    @Override
                    public Tuple6<String, BigInteger, String, BigInteger, Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, String, BigInteger, Boolean, String>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (Boolean) results.get(4).getValue(),
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> readAll(List<String> _idList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_READALL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_idList, org.web3j.abi.datatypes.Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> update(Notice _notice) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATE,
                Arrays.<Type>asList(_notice),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static NoticeContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NoticeContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NoticeContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NoticeContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NoticeContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NoticeContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NoticeContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NoticeContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NoticeContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NoticeContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NoticeContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NoticeContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<NoticeContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NoticeContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NoticeContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NoticeContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Getter
    @Setter
    @ToString
    public static class Notice extends DynamicStruct {
        public String id;

        public BigInteger noticeType;

        public String noticerAccount;

        public BigInteger createTime;

        public Boolean isRead;

        public String content;

        public Notice(String id, BigInteger noticeType, String noticerAccount, BigInteger createTime, Boolean isRead, String content) {
            super(new org.web3j.abi.datatypes.Utf8String(id),new org.web3j.abi.datatypes.generated.Int256(noticeType),new org.web3j.abi.datatypes.Utf8String(noticerAccount),new org.web3j.abi.datatypes.generated.Uint256(createTime),new org.web3j.abi.datatypes.Bool(isRead),new org.web3j.abi.datatypes.Utf8String(content));
            this.id = id;
            this.noticeType = noticeType;
            this.noticerAccount = noticerAccount;
            this.createTime = createTime;
            this.isRead = isRead;
            this.content = content;
        }

        public Notice(Utf8String id, Int256 noticeType, Utf8String noticerAccount, Uint256 createTime, Bool isRead, Utf8String content) {
            super(id,noticeType,noticerAccount,createTime,isRead,content);
            this.id = id.getValue();
            this.noticeType = noticeType.getValue();
            this.noticerAccount = noticerAccount.getValue();
            this.createTime = createTime.getValue();
            this.isRead = isRead.getValue();
            this.content = content.getValue();
        }
    }

    @Getter
    @Setter
    @ToString
    public static class NoticeCountsDTO extends StaticStruct {
        public BigInteger allCounts;

        public BigInteger borrowCounts;

        public BigInteger auditCounts;

        public BigInteger normalCounts;

        public BigInteger placeManagerCounts;

        public NoticeCountsDTO(BigInteger allCounts, BigInteger borrowCounts, BigInteger auditCounts, BigInteger normalCounts, BigInteger placeManagerCounts) {
            super(new org.web3j.abi.datatypes.generated.Uint256(allCounts),new org.web3j.abi.datatypes.generated.Uint256(borrowCounts),new org.web3j.abi.datatypes.generated.Uint256(auditCounts),new org.web3j.abi.datatypes.generated.Uint256(normalCounts),new org.web3j.abi.datatypes.generated.Uint256(placeManagerCounts));
            this.allCounts = allCounts;
            this.borrowCounts = borrowCounts;
            this.auditCounts = auditCounts;
            this.normalCounts = normalCounts;
            this.placeManagerCounts = placeManagerCounts;
        }

        public NoticeCountsDTO(Uint256 allCounts, Uint256 borrowCounts, Uint256 auditCounts, Uint256 normalCounts, Uint256 placeManagerCounts) {
            super(allCounts,borrowCounts,auditCounts,normalCounts,placeManagerCounts);
            this.allCounts = allCounts.getValue();
            this.borrowCounts = borrowCounts.getValue();
            this.auditCounts = auditCounts.getValue();
            this.normalCounts = normalCounts.getValue();
            this.placeManagerCounts = placeManagerCounts.getValue();
        }
    }

    @Getter
    public static class UpdateEventEventResponse extends BaseEventResponse {
        public BigInteger code;
    }
}