package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class AssetDetailContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b506120a4806100296000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063465c41051161005b578063465c41051461012b578063487daf021461015b5780634cd446ea1461018b578063cd17ba57146101a757610088565b8063054987a51461008d5780630811251a146100bd5780632e5f4451146100db57806335e43c201461010f575b600080fd5b6100a760048036038101906100a29190611588565b6101d7565b6040516100b49190611659565b60405180910390f35b6100c56102d3565b6040516100d29190611762565b60405180910390f35b6100f560048036038101906100f09190611588565b6104d1565b604051610106959493929190611793565b60405180910390f35b61012960048036038101906101249190611911565b6106b5565b005b6101456004803603810190610140919061195a565b6107f5565b60405161015291906119ed565b60405180910390f35b61017560048036038101906101709190611588565b6108d2565b6040516101829190611b4e565b60405180910390f35b6101a560048036038101906101a09190611c56565b610d1a565b005b6101c160048036038101906101bc9190611c9f565b610eca565b6040516101ce9190611b4e565b60405180910390f35b60606001826040516101e99190611d37565b908152602001604051809103902060009054906101000a900460ff16156102bb5760008260405161021a9190611d37565b9081526020016040518091039020600201805461023690611d7d565b80601f016020809104026020016040519081016040528092919081815260200182805461026290611d7d565b80156102af5780601f10610284576101008083540402835291602001916102af565b820191906000526020600020905b81548152906001019060200180831161029257829003601f168201915b505050505090506102ce565b6040518060200160405280600081525090505b919050565b6102db61135c565b60006040516102e990611dfb565b90815260200160405180910390206040518060a001604052908160008201805461031290611d7d565b80601f016020809104026020016040519081016040528092919081815260200182805461033e90611d7d565b801561038b5780601f106103605761010080835404028352916020019161038b565b820191906000526020600020905b81548152906001019060200180831161036e57829003601f168201915b505050505081526020016001820180546103a490611d7d565b80601f01602080910402602001604051908101604052809291908181526020018280546103d090611d7d565b801561041d5780601f106103f25761010080835404028352916020019161041d565b820191906000526020600020905b81548152906001019060200180831161040057829003601f168201915b5050505050815260200160028201805461043690611d7d565b80601f016020809104026020016040519081016040528092919081815260200182805461046290611d7d565b80156104af5780601f10610484576101008083540402835291602001916104af565b820191906000526020600020905b81548152906001019060200180831161049257829003601f168201915b5050505050815260200160038201548152602001600482015481525050905090565b60008180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461050a90611d7d565b80601f016020809104026020016040519081016040528092919081815260200182805461053690611d7d565b80156105835780601f1061055857610100808354040283529160200191610583565b820191906000526020600020905b81548152906001019060200180831161056657829003601f168201915b50505050509080600101805461059890611d7d565b80601f01602080910402602001604051908101604052809291908181526020018280546105c490611d7d565b80156106115780601f106105e657610100808354040283529160200191610611565b820191906000526020600020905b8154815290600101906020018083116105f457829003601f168201915b50505050509080600201805461062690611d7d565b80601f016020809104026020016040519081016040528092919081815260200182805461065290611d7d565b801561069f5780601f106106745761010080835404028352916020019161069f565b820191906000526020600020905b81548152906001019060200180831161068257829003601f168201915b5050505050908060030154908060040154905085565b600181600001516040516106c99190611d37565b908152602001604051809103902060009054906101000a900460ff16156107b85780600082600001516040516106ff9190611d37565b9081526020016040518091039020600082015181600001908051906020019061072992919061138b565b50602082015181600101908051906020019061074692919061138b565b50604082015181600201908051906020019061076392919061138b565b5060608201518160030155608082015181600401559050507f1f0b7755550dd48676926d868a91257934b9a64d5f852cad45e85274c052c6b060c86040516107ab9190611e55565b60405180910390a16107f2565b7f1f0b7755550dd48676926d868a91257934b9a64d5f852cad45e85274c052c6b06127116040516107e99190611eab565b60405180910390a15b50565b60008083905060008390508051825114610814576000925050506108cc565b60005b82518110156108c45781818151811061083357610832611ec6565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683828151811061087357610872611ec6565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146108b157600093505050506108cc565b80806108bc90611f24565b915050610817565b506001925050505b92915050565b60606000603267ffffffffffffffff8111156108f1576108f061145d565b5b60405190808252806020026020018201604052801561092a57816020015b61091761135c565b81526020019060019003908161090f5790505b5090506000805b600354811015610c5e57610a0b60006002838154811061095457610953611ec6565b5b9060005260206000200160405161096b9190612001565b9081526020016040518091039020600201805461098790611d7d565b80601f01602080910402602001604051908101604052809291908181526020018280546109b390611d7d565b8015610a005780601f106109d557610100808354040283529160200191610a00565b820191906000526020600020905b8154815290600101906020018083116109e357829003601f168201915b5050505050866107f5565b15610c4b57600060028281548110610a2657610a25611ec6565b5b90600052602060002001604051610a3d9190612001565b90815260200160405180910390206040518060a0016040529081600082018054610a6690611d7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9290611d7d565b8015610adf5780601f10610ab457610100808354040283529160200191610adf565b820191906000526020600020905b815481529060010190602001808311610ac257829003601f168201915b50505050508152602001600182018054610af890611d7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2490611d7d565b8015610b715780601f10610b4657610100808354040283529160200191610b71565b820191906000526020600020905b815481529060010190602001808311610b5457829003601f168201915b50505050508152602001600282018054610b8a90611d7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb690611d7d565b8015610c035780601f10610bd857610100808354040283529160200191610c03565b820191906000526020600020905b815481529060010190602001808311610be657829003601f168201915b5050505050815260200160038201548152602001600482015481525050838380610c2c90611f24565b945081518110610c3f57610c3e611ec6565b5b60200260200101819052505b8080610c5690611f24565b915050610931565b5060008167ffffffffffffffff811115610c7b57610c7a61145d565b5b604051908082528060200260200182016040528015610cb457816020015b610ca161135c565b815260200190600190039081610c995790505b50905060005b82811015610d0e57838181518110610cd557610cd4611ec6565b5b6020026020010151828281518110610cf057610cef611ec6565b5b60200260200101819052508080610d0690611f24565b915050610cba565b50809350505050919050565b606060005b8251811015610ec557828181518110610d3b57610d3a611ec6565b5b6020026020010151600001519150600182604051610d599190611d37565b908152602001604051809103902060009054906101000a900460ff16610eac57828181518110610d8c57610d8b611ec6565b5b6020026020010151600083604051610da49190611d37565b90815260200160405180910390206000820151816000019080519060200190610dce92919061138b565b506020820151816001019080519060200190610deb92919061138b565b506040820151816002019080519060200190610e0892919061138b565b50606082015181600301556080820151816004015590505060018083604051610e319190611d37565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600282908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610e9192919061138b565b506001600354610ea19190612018565b600381905550610eb1565b610eb2565b5b8080610ebd90611f24565b915050610d1f565b505050565b60606000603267ffffffffffffffff811115610ee957610ee861145d565b5b604051908082528060200260200182016040528015610f2257816020015b610f0f61135c565b815260200190600190039081610f075790505b5090506000805b60035481101561129f57611003600060028381548110610f4c57610f4b611ec6565b5b90600052602060002001604051610f639190612001565b90815260200160405180910390206002018054610f7f90611d7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610fab90611d7d565b8015610ff85780601f10610fcd57610100808354040283529160200191610ff8565b820191906000526020600020905b815481529060010190602001808311610fdb57829003601f168201915b5050505050876107f5565b801561104c57508460006002838154811061102157611020611ec6565b5b906000526020600020016040516110389190612001565b908152602001604051809103902060030154145b1561128c5760006002828154811061106757611066611ec6565b5b9060005260206000200160405161107e9190612001565b90815260200160405180910390206040518060a00160405290816000820180546110a790611d7d565b80601f01602080910402602001604051908101604052809291908181526020018280546110d390611d7d565b80156111205780601f106110f557610100808354040283529160200191611120565b820191906000526020600020905b81548152906001019060200180831161110357829003601f168201915b5050505050815260200160018201805461113990611d7d565b80601f016020809104026020016040519081016040528092919081815260200182805461116590611d7d565b80156111b25780601f10611187576101008083540402835291602001916111b2565b820191906000526020600020905b81548152906001019060200180831161119557829003601f168201915b505050505081526020016002820180546111cb90611d7d565b80601f01602080910402602001604051908101604052809291908181526020018280546111f790611d7d565b80156112445780601f1061121957610100808354040283529160200191611244565b820191906000526020600020905b81548152906001019060200180831161122757829003601f168201915b505050505081526020016003820154815260200160048201548152505083838061126d90611f24565b9450815181106112805761127f611ec6565b5b60200260200101819052505b808061129790611f24565b915050610f29565b5060008167ffffffffffffffff8111156112bc576112bb61145d565b5b6040519080825280602002602001820160405280156112f557816020015b6112e261135c565b8152602001906001900390816112da5790505b50905060005b8281101561134f5783818151811061131657611315611ec6565b5b602002602001015182828151811061133157611330611ec6565b5b6020026020010181905250808061134790611f24565b9150506112fb565b5080935050505092915050565b6040518060a0016040528060608152602001606081526020016060815260200160008152602001600081525090565b82805461139790611d7d565b90600052602060002090601f0160209004810192826113b95760008555611400565b82601f106113d257805160ff1916838001178555611400565b82800160010185558215611400579182015b828111156113ff5782518255916020019190600101906113e4565b5b50905061140d9190611411565b5090565b5b8082111561142a576000816000905550600101611412565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114958261144c565b810181811067ffffffffffffffff821117156114b4576114b361145d565b5b80604052505050565b60006114c761142e565b90506114d3828261148c565b919050565b600067ffffffffffffffff8211156114f3576114f261145d565b5b6114fc8261144c565b9050602081019050919050565b82818337600083830152505050565b600061152b611526846114d8565b6114bd565b90508281526020810184848401111561154757611546611447565b5b611552848285611509565b509392505050565b600082601f83011261156f5761156e611442565b5b813561157f848260208601611518565b91505092915050565b60006020828403121561159e5761159d611438565b5b600082013567ffffffffffffffff8111156115bc576115bb61143d565b5b6115c88482850161155a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561160b5780820151818401526020810190506115f0565b8381111561161a576000848401525b50505050565b600061162b826115d1565b61163581856115dc565b93506116458185602086016115ed565b61164e8161144c565b840191505092915050565b600060208201905081810360008301526116738184611620565b905092915050565b600082825260208201905092915050565b6000611697826115d1565b6116a1818561167b565b93506116b18185602086016115ed565b6116ba8161144c565b840191505092915050565b6000819050919050565b6116d8816116c5565b82525050565b600060a08301600083015184820360008601526116fb828261168c565b91505060208301518482036020860152611715828261168c565b9150506040830151848203604086015261172f828261168c565b915050606083015161174460608601826116cf565b50608083015161175760808601826116cf565b508091505092915050565b6000602082019050818103600083015261177c81846116de565b905092915050565b61178d816116c5565b82525050565b600060a08201905081810360008301526117ad8188611620565b905081810360208301526117c18187611620565b905081810360408301526117d58186611620565b90506117e46060830185611784565b6117f16080830184611784565b9695505050505050565b600080fd5b600080fd5b61180e816116c5565b811461181957600080fd5b50565b60008135905061182b81611805565b92915050565b600060a08284031215611847576118466117fb565b5b61185160a06114bd565b9050600082013567ffffffffffffffff81111561187157611870611800565b5b61187d8482850161155a565b600083015250602082013567ffffffffffffffff8111156118a1576118a0611800565b5b6118ad8482850161155a565b602083015250604082013567ffffffffffffffff8111156118d1576118d0611800565b5b6118dd8482850161155a565b60408301525060606118f18482850161181c565b60608301525060806119058482850161181c565b60808301525092915050565b60006020828403121561192757611926611438565b5b600082013567ffffffffffffffff8111156119455761194461143d565b5b61195184828501611831565b91505092915050565b6000806040838503121561197157611970611438565b5b600083013567ffffffffffffffff81111561198f5761198e61143d565b5b61199b8582860161155a565b925050602083013567ffffffffffffffff8111156119bc576119bb61143d565b5b6119c88582860161155a565b9150509250929050565b60008115159050919050565b6119e7816119d2565b82525050565b6000602082019050611a0260008301846119de565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060a0830160008301518482036000860152611a51828261168c565b91505060208301518482036020860152611a6b828261168c565b91505060408301518482036040860152611a85828261168c565b9150506060830151611a9a60608601826116cf565b506080830151611aad60808601826116cf565b508091505092915050565b6000611ac48383611a34565b905092915050565b6000602082019050919050565b6000611ae482611a08565b611aee8185611a13565b935083602082028501611b0085611a24565b8060005b85811015611b3c5784840389528151611b1d8582611ab8565b9450611b2883611acc565b925060208a01995050600181019050611b04565b50829750879550505050505092915050565b60006020820190508181036000830152611b688184611ad9565b905092915050565b600067ffffffffffffffff821115611b8b57611b8a61145d565b5b602082029050602081019050919050565b600080fd5b6000611bb4611baf84611b70565b6114bd565b90508083825260208201905060208402830185811115611bd757611bd6611b9c565b5b835b81811015611c1e57803567ffffffffffffffff811115611bfc57611bfb611442565b5b808601611c098982611831565b85526020850194505050602081019050611bd9565b5050509392505050565b600082601f830112611c3d57611c3c611442565b5b8135611c4d848260208601611ba1565b91505092915050565b600060208284031215611c6c57611c6b611438565b5b600082013567ffffffffffffffff811115611c8a57611c8961143d565b5b611c9684828501611c28565b91505092915050565b60008060408385031215611cb657611cb5611438565b5b600083013567ffffffffffffffff811115611cd457611cd361143d565b5b611ce08582860161155a565b9250506020611cf18582860161181c565b9150509250929050565b600081905092915050565b6000611d11826115d1565b611d1b8185611cfb565b9350611d2b8185602086016115ed565b80840191505092915050565b6000611d438284611d06565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d9557607f821691505b60208210811415611da957611da8611d4e565b5b50919050565b7f3100000000000000000000000000000000000000000000000000000000000000600082015250565b6000611de5600183611cfb565b9150611df082611daf565b600182019050919050565b6000611e0682611dd8565b9150819050919050565b6000819050919050565b6000819050919050565b6000611e3f611e3a611e3584611e10565b611e1a565b6116c5565b9050919050565b611e4f81611e24565b82525050565b6000602082019050611e6a6000830184611e46565b92915050565b6000819050919050565b6000611e95611e90611e8b84611e70565b611e1a565b6116c5565b9050919050565b611ea581611e7a565b82525050565b6000602082019050611ec06000830184611e9c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f2f826116c5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f6257611f61611ef5565b5b600182019050919050565b60008190508160005260206000209050919050565b60008154611f8f81611d7d565b611f998186611cfb565b94506001821660008114611fb45760018114611fc557611ff8565b60ff19831686528186019350611ff8565b611fce85611f6d565b60005b83811015611ff057815481890152600182019150602081019050611fd1565b838801955050505b50505092915050565b600061200d8284611f82565b915081905092915050565b6000612023826116c5565b915061202e836116c5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561206357612062611ef5565b5b82820190509291505056fea264697066735822122054fb8793b0a5b85dafc24fffae3dccd0e5988050894dd69bc6d7522a25e9c18564736f6c634300080a0033";

    public static final String FUNC_ASSETDETAILS = "assetDetails";

    public static final String FUNC_GETASSETDETAIL = "getAssetDetail";

    public static final String FUNC_GETASSETIDBYASSETDETAILID = "getAssetIdByAssetDetailId";

    public static final String FUNC_GETLIST = "getList";

    public static final String FUNC_GETLISTBYSTATUS = "getListByStatus";

    public static final String FUNC_INSERTASSETDETAIL = "insertAssetDetail";

    public static final String FUNC_ISEQUAL = "isEqual";

    public static final String FUNC_UPDATE = "update";

    public static final Event ISUPDATESUCCESS_EVENT = new Event("isUpdateSuccess",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected AssetDetailContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AssetDetailContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AssetDetailContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AssetDetailContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<IsUpdateSuccessEventResponse> getIsUpdateSuccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ISUPDATESUCCESS_EVENT, transactionReceipt);
        ArrayList<IsUpdateSuccessEventResponse> responses = new ArrayList<IsUpdateSuccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IsUpdateSuccessEventResponse typedResponse = new IsUpdateSuccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IsUpdateSuccessEventResponse> isUpdateSuccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IsUpdateSuccessEventResponse>() {
            @Override
            public IsUpdateSuccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ISUPDATESUCCESS_EVENT, log);
                IsUpdateSuccessEventResponse typedResponse = new IsUpdateSuccessEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IsUpdateSuccessEventResponse> isUpdateSuccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ISUPDATESUCCESS_EVENT));
        return isUpdateSuccessEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, BigInteger, BigInteger>> assetDetails(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETDETAILS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<AssetDetail> getAssetDetail() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETDETAIL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<AssetDetail>() {}));
        return executeRemoteCallSingleValueReturn(function, AssetDetail.class);
    }

    public RemoteFunctionCall<String> getAssetIdByAssetDetailId(String _assetDetailId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETIDBYASSETDETAILID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetDetailId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getList(String _assetId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getListByStatus(String _assetId, BigInteger _currentStatus) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYSTATUS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId),
                        new org.web3j.abi.datatypes.generated.Uint256(_currentStatus)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> insertAssetDetail(List<AssetDetail> _assetDetailList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INSERTASSETDETAIL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<AssetDetail>(AssetDetail.class, _assetDetailList)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isEqual(String a, String b) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISEQUAL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a),
                        new org.web3j.abi.datatypes.Utf8String(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> update(AssetDetail _assetDetail) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATE,
                Arrays.<Type>asList(_assetDetail),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AssetDetailContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetDetailContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AssetDetailContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetDetailContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AssetDetailContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AssetDetailContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AssetDetailContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AssetDetailContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetDetailContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetDetailContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetDetailContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetDetailContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AssetDetail extends DynamicStruct {
        public String assetDetailId;

        public String currentUserAccount;

        public String assetId;

        public BigInteger currentStatus;

        public BigInteger status;

        public AssetDetail(String assetDetailId, String currentUserAccount, String assetId, BigInteger currentStatus, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(assetDetailId),new org.web3j.abi.datatypes.Utf8String(currentUserAccount),new org.web3j.abi.datatypes.Utf8String(assetId),new org.web3j.abi.datatypes.generated.Uint256(currentStatus),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.assetDetailId = assetDetailId;
            this.currentUserAccount = currentUserAccount;
            this.assetId = assetId;
            this.currentStatus = currentStatus;
            this.status = status;
        }

        public AssetDetail(Utf8String assetDetailId, Utf8String currentUserAccount, Utf8String assetId, Uint256 currentStatus, Uint256 status) {
            super(assetDetailId,currentUserAccount,assetId,currentStatus,status);
            this.assetDetailId = assetDetailId.getValue();
            this.currentUserAccount = currentUserAccount.getValue();
            this.assetId = assetId.getValue();
            this.currentStatus = currentStatus.getValue();
            this.status = status.getValue();
        }
    }

    public static class IsUpdateSuccessEventResponse extends BaseEventResponse {
        public BigInteger code;
    }
}