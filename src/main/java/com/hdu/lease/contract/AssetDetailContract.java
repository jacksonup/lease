package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class AssetDetailContract extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_ASSETDETAILS = "assetDetails";

    public static final String FUNC_GETASSETDETAIL = "getAssetDetail";

    public static final String FUNC_GETASSETIDBYASSETDETAILID = "getAssetIdByAssetDetailId";

    public static final String FUNC_GETBYPRIMARYKEY = "getByPrimaryKey";

    public static final String FUNC_GETLIST = "getList";

    public static final String FUNC_GETLISTBYSTATUS = "getListByStatus";

    public static final String FUNC_GETLISTBYSTATUSANDPLACEID = "getListByStatusAndPlaceId";

    public static final String FUNC_GETSTATUSLISTBYPLACEID = "getStatusListByPlaceId";

    public static final String FUNC_INSERTASSETDETAIL = "insertAssetDetail";

    public static final String FUNC_ISEQUAL = "isEqual";

    public static final String FUNC_PAGEGETSTATUSLISTBYPLACEID = "pageGetStatusListByPlaceId";

    public static final String FUNC_UPDATE = "update";

    public static final Event ISUPDATESUCCESS_EVENT = new Event("isUpdateSuccess",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected AssetDetailContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AssetDetailContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AssetDetailContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AssetDetailContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<IsUpdateSuccessEventResponse> getIsUpdateSuccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ISUPDATESUCCESS_EVENT, transactionReceipt);
        ArrayList<IsUpdateSuccessEventResponse> responses = new ArrayList<IsUpdateSuccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IsUpdateSuccessEventResponse typedResponse = new IsUpdateSuccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IsUpdateSuccessEventResponse> isUpdateSuccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IsUpdateSuccessEventResponse>() {
            @Override
            public IsUpdateSuccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ISUPDATESUCCESS_EVENT, log);
                IsUpdateSuccessEventResponse typedResponse = new IsUpdateSuccessEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IsUpdateSuccessEventResponse> isUpdateSuccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ISUPDATESUCCESS_EVENT));
        return isUpdateSuccessEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple8<String, String, String, String, String, String, BigInteger, BigInteger>> assetDetails(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETDETAILS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple8<String, String, String, String, String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple8<String, String, String, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<String, String, String, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<AssetDetail> getAssetDetail() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETDETAIL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<AssetDetail>() {}));
        return executeRemoteCallSingleValueReturn(function, AssetDetail.class);
    }

    public RemoteFunctionCall<String> getAssetIdByAssetDetailId(String _assetDetailId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETIDBYASSETDETAILID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetDetailId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<AssetDetail> getByPrimaryKey(String _assetDetialId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBYPRIMARYKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetDetialId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<AssetDetail>() {}));
        return executeRemoteCallSingleValueReturn(function, AssetDetail.class);
    }

    public RemoteFunctionCall<List> getList(String _assetId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getListByStatus(String _assetId, BigInteger _currentStatus) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYSTATUS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId),
                        new org.web3j.abi.datatypes.generated.Int256(_currentStatus)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getListByStatusAndPlaceId(List<BigInteger> _currentStatus, String _placeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYSTATUSANDPLACEID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Int256>(
                                org.web3j.abi.datatypes.generated.Int256.class,
                                org.web3j.abi.Utils.typeMap(_currentStatus, org.web3j.abi.datatypes.generated.Int256.class)),
                        new org.web3j.abi.datatypes.Utf8String(_placeId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getStatusListByPlaceId(String _placeId, String _assetId, BigInteger _currentStatus) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSTATUSLISTBYPLACEID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_placeId),
                        new org.web3j.abi.datatypes.Utf8String(_assetId),
                        new org.web3j.abi.datatypes.generated.Int256(_currentStatus)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> insertAssetDetail(List<AssetDetail> _assetDetailList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INSERTASSETDETAIL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<AssetDetail>(AssetDetail.class, _assetDetailList)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isEqual(String a, String b) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISEQUAL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a),
                        new org.web3j.abi.datatypes.Utf8String(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<List> pageGetStatusListByPlaceId(String _placeId, String _assetId, BigInteger _currentStatus, BigInteger _begin, BigInteger _end) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAGEGETSTATUSLISTBYPLACEID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_placeId),
                        new org.web3j.abi.datatypes.Utf8String(_assetId),
                        new org.web3j.abi.datatypes.generated.Int256(_currentStatus),
                        new org.web3j.abi.datatypes.generated.Uint256(_begin),
                        new org.web3j.abi.datatypes.generated.Uint256(_end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> update(AssetDetail _assetDetail) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATE,
                Arrays.<Type>asList(_assetDetail),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AssetDetailContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetDetailContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AssetDetailContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetDetailContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AssetDetailContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AssetDetailContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AssetDetailContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AssetDetailContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetDetailContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetDetailContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetDetailContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetDetailContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Getter
    @Setter
    @ToString
    public static class AssetDetail extends DynamicStruct {
        public String assetDetailId;

        public String currentUserAccount;

        public String assetId;

        public String placeId;

        public String beginTime;

        public String endTime;

        public BigInteger currentStatus;

        public BigInteger status;

        public AssetDetail(String assetDetailId, String currentUserAccount, String assetId, String placeId, String beginTime, String endTime, BigInteger currentStatus, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(assetDetailId),new org.web3j.abi.datatypes.Utf8String(currentUserAccount),new org.web3j.abi.datatypes.Utf8String(assetId),new org.web3j.abi.datatypes.Utf8String(placeId),new org.web3j.abi.datatypes.Utf8String(beginTime),new org.web3j.abi.datatypes.Utf8String(endTime),new org.web3j.abi.datatypes.generated.Int256(currentStatus),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.assetDetailId = assetDetailId;
            this.currentUserAccount = currentUserAccount;
            this.assetId = assetId;
            this.placeId = placeId;
            this.beginTime = beginTime;
            this.endTime = endTime;
            this.currentStatus = currentStatus;
            this.status = status;
        }

        public AssetDetail(Utf8String assetDetailId, Utf8String currentUserAccount, Utf8String assetId, Utf8String placeId, Utf8String beginTime, Utf8String endTime, Int256 currentStatus, Uint256 status) {
            super(assetDetailId,currentUserAccount,assetId,placeId,beginTime,endTime,currentStatus,status);
            this.assetDetailId = assetDetailId.getValue();
            this.currentUserAccount = currentUserAccount.getValue();
            this.assetId = assetId.getValue();
            this.placeId = placeId.getValue();
            this.beginTime = beginTime.getValue();
            this.endTime = endTime.getValue();
            this.currentStatus = currentStatus.getValue();
            this.status = status.getValue();
        }
    }

    @Getter
    public static class IsUpdateSuccessEventResponse extends BaseEventResponse {
        public BigInteger code;
    }
}