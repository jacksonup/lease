package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class AssetDetailContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b506135b8806100296000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063487daf0211610066578063487daf021461018857806367927dc8146101b857806380ba59a5146101d457806388ccd342146101f0578063cd17ba57146102205761009e565b8063054987a5146100a35780630811251a146100d3578063186316ca146100f15780632e5f445114610121578063465c410514610158575b600080fd5b6100bd60048036038101906100b891906128a1565b610250565b6040516100ca9190612972565b60405180910390f35b6100db61034c565b6040516100e89190612aca565b60405180910390f35b61010b60048036038101906101069190612b18565b610701565b6040516101189190612d38565b60405180910390f35b61013b600480360381019061013691906128a1565b610e1e565b60405161014f989796959493929190612d69565b60405180910390f35b610172600480360381019061016d9190612e11565b6111ac565b60405161017f9190612ea4565b60405180910390f35b6101a2600480360381019061019d91906128a1565b611289565b6040516101af9190612d38565b60405180910390f35b6101d260048036038101906101cd919061303b565b611888565b005b6101ee60048036038101906101e9919061316a565b611a1f565b005b61020a600480360381019061020591906128a1565b611c26565b6040516102179190612aca565b60405180910390f35b61023a600480360381019061023591906131b3565b612016565b6040516102479190612d38565b60405180910390f35b6060600182604051610262919061324b565b908152602001604051809103902060009054906101000a900460ff161561033457600082604051610293919061324b565b908152602001604051809103902060020180546102af90613291565b80601f01602080910402602001604051908101604052809291908181526020018280546102db90613291565b80156103285780601f106102fd57610100808354040283529160200191610328565b820191906000526020600020905b81548152906001019060200180831161030b57829003601f168201915b50505050509050610347565b6040518060200160405280600081525090505b919050565b61035461265f565b60006040516103629061330f565b90815260200160405180910390206040518061010001604052908160008201805461038c90613291565b80601f01602080910402602001604051908101604052809291908181526020018280546103b890613291565b80156104055780601f106103da57610100808354040283529160200191610405565b820191906000526020600020905b8154815290600101906020018083116103e857829003601f168201915b5050505050815260200160018201805461041e90613291565b80601f016020809104026020016040519081016040528092919081815260200182805461044a90613291565b80156104975780601f1061046c57610100808354040283529160200191610497565b820191906000526020600020905b81548152906001019060200180831161047a57829003601f168201915b505050505081526020016002820180546104b090613291565b80601f01602080910402602001604051908101604052809291908181526020018280546104dc90613291565b80156105295780601f106104fe57610100808354040283529160200191610529565b820191906000526020600020905b81548152906001019060200180831161050c57829003601f168201915b5050505050815260200160038201805461054290613291565b80601f016020809104026020016040519081016040528092919081815260200182805461056e90613291565b80156105bb5780601f10610590576101008083540402835291602001916105bb565b820191906000526020600020905b81548152906001019060200180831161059e57829003601f168201915b505050505081526020016004820180546105d490613291565b80601f016020809104026020016040519081016040528092919081815260200182805461060090613291565b801561064d5780601f106106225761010080835404028352916020019161064d565b820191906000526020600020905b81548152906001019060200180831161063057829003601f168201915b5050505050815260200160058201805461066690613291565b80601f016020809104026020016040519081016040528092919081815260200182805461069290613291565b80156106df5780601f106106b4576101008083540402835291602001916106df565b820191906000526020600020905b8154815290600101906020018083116106c257829003601f168201915b5050505050815260200160068201548152602001600782015481525050905090565b6060600060035467ffffffffffffffff81111561072157610720612776565b5b60405190808252806020026020018201604052801561075a57816020015b61074761265f565b81526020019060019003908161073f5790505b5090506000805b600354811015610d665761083b60006002838154811061078457610783613324565b5b9060005260206000200160405161079b91906133e7565b908152602001604051809103902060030180546107b790613291565b80601f01602080910402602001604051908101604052809291908181526020018280546107e390613291565b80156108305780601f1061080557610100808354040283529160200191610830565b820191906000526020600020905b81548152906001019060200180831161081357829003601f168201915b5050505050886111ac565b8015610913575061091260006002838154811061085b5761085a613324565b5b9060005260206000200160405161087291906133e7565b9081526020016040518091039020600201805461088e90613291565b80601f01602080910402602001604051908101604052809291908181526020018280546108ba90613291565b80156109075780601f106108dc57610100808354040283529160200191610907565b820191906000526020600020905b8154815290600101906020018083116108ea57829003601f168201915b5050505050876111ac565b5b801561095c57508460006002838154811061093157610930613324565b5b9060005260206000200160405161094891906133e7565b908152602001604051809103902060060154145b15610d535760006002828154811061097757610976613324565b5b9060005260206000200160405161098e91906133e7565b9081526020016040518091039020604051806101000160405290816000820180546109b890613291565b80601f01602080910402602001604051908101604052809291908181526020018280546109e490613291565b8015610a315780601f10610a0657610100808354040283529160200191610a31565b820191906000526020600020905b815481529060010190602001808311610a1457829003601f168201915b50505050508152602001600182018054610a4a90613291565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7690613291565b8015610ac35780601f10610a9857610100808354040283529160200191610ac3565b820191906000526020600020905b815481529060010190602001808311610aa657829003601f168201915b50505050508152602001600282018054610adc90613291565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0890613291565b8015610b555780601f10610b2a57610100808354040283529160200191610b55565b820191906000526020600020905b815481529060010190602001808311610b3857829003601f168201915b50505050508152602001600382018054610b6e90613291565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9a90613291565b8015610be75780601f10610bbc57610100808354040283529160200191610be7565b820191906000526020600020905b815481529060010190602001808311610bca57829003601f168201915b50505050508152602001600482018054610c0090613291565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2c90613291565b8015610c795780601f10610c4e57610100808354040283529160200191610c79565b820191906000526020600020905b815481529060010190602001808311610c5c57829003601f168201915b50505050508152602001600582018054610c9290613291565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbe90613291565b8015610d0b5780601f10610ce057610100808354040283529160200191610d0b565b820191906000526020600020905b815481529060010190602001808311610cee57829003601f168201915b5050505050815260200160068201548152602001600782015481525050838380610d349061342d565b945081518110610d4757610d46613324565b5b60200260200101819052505b8080610d5e9061342d565b915050610761565b508067ffffffffffffffff811115610d8157610d80612776565b5b604051908082528060200260200182016040528015610dba57816020015b610da761265f565b815260200190600190039081610d9f5790505b50925060005b81811015610e1457828181518110610ddb57610dda613324565b5b6020026020010151848281518110610df657610df5613324565b5b60200260200101819052508080610e0c9061342d565b915050610dc0565b5050509392505050565b600081805160208101820180518482526020830160208501208183528095505050505050600091509050806000018054610e5790613291565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8390613291565b8015610ed05780601f10610ea557610100808354040283529160200191610ed0565b820191906000526020600020905b815481529060010190602001808311610eb357829003601f168201915b505050505090806001018054610ee590613291565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1190613291565b8015610f5e5780601f10610f3357610100808354040283529160200191610f5e565b820191906000526020600020905b815481529060010190602001808311610f4157829003601f168201915b505050505090806002018054610f7390613291565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9f90613291565b8015610fec5780601f10610fc157610100808354040283529160200191610fec565b820191906000526020600020905b815481529060010190602001808311610fcf57829003601f168201915b50505050509080600301805461100190613291565b80601f016020809104026020016040519081016040528092919081815260200182805461102d90613291565b801561107a5780601f1061104f5761010080835404028352916020019161107a565b820191906000526020600020905b81548152906001019060200180831161105d57829003601f168201915b50505050509080600401805461108f90613291565b80601f01602080910402602001604051908101604052809291908181526020018280546110bb90613291565b80156111085780601f106110dd57610100808354040283529160200191611108565b820191906000526020600020905b8154815290600101906020018083116110eb57829003601f168201915b50505050509080600501805461111d90613291565b80601f016020809104026020016040519081016040528092919081815260200182805461114990613291565b80156111965780601f1061116b57610100808354040283529160200191611196565b820191906000526020600020905b81548152906001019060200180831161117957829003601f168201915b5050505050908060060154908060070154905088565b600080839050600083905080518251146111cb57600092505050611283565b60005b825181101561127b578181815181106111ea576111e9613324565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683828151811061122a57611229613324565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146112685760009350505050611283565b80806112739061342d565b9150506111ce565b506001925050505b92915050565b60606000603267ffffffffffffffff8111156112a8576112a7612776565b5b6040519080825280602002602001820160405280156112e157816020015b6112ce61265f565b8152602001906001900390816112c65790505b5090506000805b6003548110156117cc576113c260006002838154811061130b5761130a613324565b5b9060005260206000200160405161132291906133e7565b9081526020016040518091039020600201805461133e90613291565b80601f016020809104026020016040519081016040528092919081815260200182805461136a90613291565b80156113b75780601f1061138c576101008083540402835291602001916113b7565b820191906000526020600020905b81548152906001019060200180831161139a57829003601f168201915b5050505050866111ac565b156117b9576000600282815481106113dd576113dc613324565b5b906000526020600020016040516113f491906133e7565b90815260200160405180910390206040518061010001604052908160008201805461141e90613291565b80601f016020809104026020016040519081016040528092919081815260200182805461144a90613291565b80156114975780601f1061146c57610100808354040283529160200191611497565b820191906000526020600020905b81548152906001019060200180831161147a57829003601f168201915b505050505081526020016001820180546114b090613291565b80601f01602080910402602001604051908101604052809291908181526020018280546114dc90613291565b80156115295780601f106114fe57610100808354040283529160200191611529565b820191906000526020600020905b81548152906001019060200180831161150c57829003601f168201915b5050505050815260200160028201805461154290613291565b80601f016020809104026020016040519081016040528092919081815260200182805461156e90613291565b80156115bb5780601f10611590576101008083540402835291602001916115bb565b820191906000526020600020905b81548152906001019060200180831161159e57829003601f168201915b505050505081526020016003820180546115d490613291565b80601f016020809104026020016040519081016040528092919081815260200182805461160090613291565b801561164d5780601f106116225761010080835404028352916020019161164d565b820191906000526020600020905b81548152906001019060200180831161163057829003601f168201915b5050505050815260200160048201805461166690613291565b80601f016020809104026020016040519081016040528092919081815260200182805461169290613291565b80156116df5780601f106116b4576101008083540402835291602001916116df565b820191906000526020600020905b8154815290600101906020018083116116c257829003601f168201915b505050505081526020016005820180546116f890613291565b80601f016020809104026020016040519081016040528092919081815260200182805461172490613291565b80156117715780601f1061174657610100808354040283529160200191611771565b820191906000526020600020905b81548152906001019060200180831161175457829003601f168201915b505050505081526020016006820154815260200160078201548152505083838061179a9061342d565b9450815181106117ad576117ac613324565b5b60200260200101819052505b80806117c49061342d565b9150506112e8565b5060008167ffffffffffffffff8111156117e9576117e8612776565b5b60405190808252806020026020018201604052801561182257816020015b61180f61265f565b8152602001906001900390816118075790505b50905060005b8281101561187c5783818151811061184357611842613324565b5b602002602001015182828151811061185e5761185d613324565b5b602002602001018190525080806118749061342d565b915050611828565b50809350505050919050565b6001816000015160405161189c919061324b565b908152602001604051809103902060009054906101000a900460ff16156119e25780600082600001516040516118d2919061324b565b908152602001604051809103902060008201518160000190805190602001906118fc9291906126a4565b5060208201518160010190805190602001906119199291906126a4565b5060408201518160020190805190602001906119369291906126a4565b5060608201518160030190805190602001906119539291906126a4565b5060808201518160040190805190602001906119709291906126a4565b5060a082015181600501908051906020019061198d9291906126a4565b5060c0820151816006015560e082015181600701559050507f1f0b7755550dd48676926d868a91257934b9a64d5f852cad45e85274c052c6b060c86040516119d591906134bb565b60405180910390a1611a1c565b7f1f0b7755550dd48676926d868a91257934b9a64d5f852cad45e85274c052c6b0612711604051611a139190613511565b60405180910390a15b50565b606060005b8251811015611c2157828181518110611a4057611a3f613324565b5b6020026020010151600001519150600182604051611a5e919061324b565b908152602001604051809103902060009054906101000a900460ff16611c0857828181518110611a9157611a90613324565b5b6020026020010151600083604051611aa9919061324b565b90815260200160405180910390206000820151816000019080519060200190611ad39291906126a4565b506020820151816001019080519060200190611af09291906126a4565b506040820151816002019080519060200190611b0d9291906126a4565b506060820151816003019080519060200190611b2a9291906126a4565b506080820151816004019080519060200190611b479291906126a4565b5060a0820151816005019080519060200190611b649291906126a4565b5060c0820151816006015560e0820151816007015590505060018083604051611b8d919061324b565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600282908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190611bed9291906126a4565b506001600354611bfd919061352c565b600381905550611c0d565b611c0e565b5b8080611c199061342d565b915050611a24565b505050565b611c2e61265f565b600182604051611c3e919061324b565b908152602001604051809103902060009054906101000a900460ff161561201057600082604051611c6f919061324b565b908152602001604051809103902060405180610100016040529081600082018054611c9990613291565b80601f0160208091040260200160405190810160405280929190818152602001828054611cc590613291565b8015611d125780601f10611ce757610100808354040283529160200191611d12565b820191906000526020600020905b815481529060010190602001808311611cf557829003601f168201915b50505050508152602001600182018054611d2b90613291565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5790613291565b8015611da45780601f10611d7957610100808354040283529160200191611da4565b820191906000526020600020905b815481529060010190602001808311611d8757829003601f168201915b50505050508152602001600282018054611dbd90613291565b80601f0160208091040260200160405190810160405280929190818152602001828054611de990613291565b8015611e365780601f10611e0b57610100808354040283529160200191611e36565b820191906000526020600020905b815481529060010190602001808311611e1957829003601f168201915b50505050508152602001600382018054611e4f90613291565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7b90613291565b8015611ec85780601f10611e9d57610100808354040283529160200191611ec8565b820191906000526020600020905b815481529060010190602001808311611eab57829003601f168201915b50505050508152602001600482018054611ee190613291565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0d90613291565b8015611f5a5780601f10611f2f57610100808354040283529160200191611f5a565b820191906000526020600020905b815481529060010190602001808311611f3d57829003601f168201915b50505050508152602001600582018054611f7390613291565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9f90613291565b8015611fec5780601f10611fc157610100808354040283529160200191611fec565b820191906000526020600020905b815481529060010190602001808311611fcf57829003601f168201915b50505050508152602001600682015481526020016007820154815250509050612011565b5b919050565b60606000603267ffffffffffffffff81111561203557612034612776565b5b60405190808252806020026020018201604052801561206e57816020015b61205b61265f565b8152602001906001900390816120535790505b5090506000805b6003548110156125a25761214f60006002838154811061209857612097613324565b5b906000526020600020016040516120af91906133e7565b908152602001604051809103902060020180546120cb90613291565b80601f01602080910402602001604051908101604052809291908181526020018280546120f790613291565b80156121445780601f1061211957610100808354040283529160200191612144565b820191906000526020600020905b81548152906001019060200180831161212757829003601f168201915b5050505050876111ac565b801561219857508460006002838154811061216d5761216c613324565b5b9060005260206000200160405161218491906133e7565b908152602001604051809103902060060154145b1561258f576000600282815481106121b3576121b2613324565b5b906000526020600020016040516121ca91906133e7565b9081526020016040518091039020604051806101000160405290816000820180546121f490613291565b80601f016020809104026020016040519081016040528092919081815260200182805461222090613291565b801561226d5780601f106122425761010080835404028352916020019161226d565b820191906000526020600020905b81548152906001019060200180831161225057829003601f168201915b5050505050815260200160018201805461228690613291565b80601f01602080910402602001604051908101604052809291908181526020018280546122b290613291565b80156122ff5780601f106122d4576101008083540402835291602001916122ff565b820191906000526020600020905b8154815290600101906020018083116122e257829003601f168201915b5050505050815260200160028201805461231890613291565b80601f016020809104026020016040519081016040528092919081815260200182805461234490613291565b80156123915780601f1061236657610100808354040283529160200191612391565b820191906000526020600020905b81548152906001019060200180831161237457829003601f168201915b505050505081526020016003820180546123aa90613291565b80601f01602080910402602001604051908101604052809291908181526020018280546123d690613291565b80156124235780601f106123f857610100808354040283529160200191612423565b820191906000526020600020905b81548152906001019060200180831161240657829003601f168201915b5050505050815260200160048201805461243c90613291565b80601f016020809104026020016040519081016040528092919081815260200182805461246890613291565b80156124b55780601f1061248a576101008083540402835291602001916124b5565b820191906000526020600020905b81548152906001019060200180831161249857829003601f168201915b505050505081526020016005820180546124ce90613291565b80601f01602080910402602001604051908101604052809291908181526020018280546124fa90613291565b80156125475780601f1061251c57610100808354040283529160200191612547565b820191906000526020600020905b81548152906001019060200180831161252a57829003601f168201915b50505050508152602001600682015481526020016007820154815250508383806125709061342d565b94508151811061258357612582613324565b5b60200260200101819052505b808061259a9061342d565b915050612075565b5060008167ffffffffffffffff8111156125bf576125be612776565b5b6040519080825280602002602001820160405280156125f857816020015b6125e561265f565b8152602001906001900390816125dd5790505b50905060005b828110156126525783818151811061261957612618613324565b5b602002602001015182828151811061263457612633613324565b5b6020026020010181905250808061264a9061342d565b9150506125fe565b5080935050505092915050565b60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160008152602001600081525090565b8280546126b090613291565b90600052602060002090601f0160209004810192826126d25760008555612719565b82601f106126eb57805160ff1916838001178555612719565b82800160010185558215612719579182015b828111156127185782518255916020019190600101906126fd565b5b509050612726919061272a565b5090565b5b8082111561274357600081600090555060010161272b565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6127ae82612765565b810181811067ffffffffffffffff821117156127cd576127cc612776565b5b80604052505050565b60006127e0612747565b90506127ec82826127a5565b919050565b600067ffffffffffffffff82111561280c5761280b612776565b5b61281582612765565b9050602081019050919050565b82818337600083830152505050565b600061284461283f846127f1565b6127d6565b9050828152602081018484840111156128605761285f612760565b5b61286b848285612822565b509392505050565b600082601f8301126128885761288761275b565b5b8135612898848260208601612831565b91505092915050565b6000602082840312156128b7576128b6612751565b5b600082013567ffffffffffffffff8111156128d5576128d4612756565b5b6128e184828501612873565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612924578082015181840152602081019050612909565b83811115612933576000848401525b50505050565b6000612944826128ea565b61294e81856128f5565b935061295e818560208601612906565b61296781612765565b840191505092915050565b6000602082019050818103600083015261298c8184612939565b905092915050565b600082825260208201905092915050565b60006129b0826128ea565b6129ba8185612994565b93506129ca818560208601612906565b6129d381612765565b840191505092915050565b6000819050919050565b6129f1816129de565b82525050565b6000610100830160008301518482036000860152612a1582826129a5565b91505060208301518482036020860152612a2f82826129a5565b91505060408301518482036040860152612a4982826129a5565b91505060608301518482036060860152612a6382826129a5565b91505060808301518482036080860152612a7d82826129a5565b91505060a083015184820360a0860152612a9782826129a5565b91505060c0830151612aac60c08601826129e8565b5060e0830151612abf60e08601826129e8565b508091505092915050565b60006020820190508181036000830152612ae481846129f7565b905092915050565b612af5816129de565b8114612b0057600080fd5b50565b600081359050612b1281612aec565b92915050565b600080600060608486031215612b3157612b30612751565b5b600084013567ffffffffffffffff811115612b4f57612b4e612756565b5b612b5b86828701612873565b935050602084013567ffffffffffffffff811115612b7c57612b7b612756565b5b612b8886828701612873565b9250506040612b9986828701612b03565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000610100830160008301518482036000860152612bed82826129a5565b91505060208301518482036020860152612c0782826129a5565b91505060408301518482036040860152612c2182826129a5565b91505060608301518482036060860152612c3b82826129a5565b91505060808301518482036080860152612c5582826129a5565b91505060a083015184820360a0860152612c6f82826129a5565b91505060c0830151612c8460c08601826129e8565b5060e0830151612c9760e08601826129e8565b508091505092915050565b6000612cae8383612bcf565b905092915050565b6000602082019050919050565b6000612cce82612ba3565b612cd88185612bae565b935083602082028501612cea85612bbf565b8060005b85811015612d265784840389528151612d078582612ca2565b9450612d1283612cb6565b925060208a01995050600181019050612cee565b50829750879550505050505092915050565b60006020820190508181036000830152612d528184612cc3565b905092915050565b612d63816129de565b82525050565b6000610100820190508181036000830152612d84818b612939565b90508181036020830152612d98818a612939565b90508181036040830152612dac8189612939565b90508181036060830152612dc08188612939565b90508181036080830152612dd48187612939565b905081810360a0830152612de88186612939565b9050612df760c0830185612d5a565b612e0460e0830184612d5a565b9998505050505050505050565b60008060408385031215612e2857612e27612751565b5b600083013567ffffffffffffffff811115612e4657612e45612756565b5b612e5285828601612873565b925050602083013567ffffffffffffffff811115612e7357612e72612756565b5b612e7f85828601612873565b9150509250929050565b60008115159050919050565b612e9e81612e89565b82525050565b6000602082019050612eb96000830184612e95565b92915050565b600080fd5b600080fd5b60006101008284031215612ee057612edf612ebf565b5b612eeb6101006127d6565b9050600082013567ffffffffffffffff811115612f0b57612f0a612ec4565b5b612f1784828501612873565b600083015250602082013567ffffffffffffffff811115612f3b57612f3a612ec4565b5b612f4784828501612873565b602083015250604082013567ffffffffffffffff811115612f6b57612f6a612ec4565b5b612f7784828501612873565b604083015250606082013567ffffffffffffffff811115612f9b57612f9a612ec4565b5b612fa784828501612873565b606083015250608082013567ffffffffffffffff811115612fcb57612fca612ec4565b5b612fd784828501612873565b60808301525060a082013567ffffffffffffffff811115612ffb57612ffa612ec4565b5b61300784828501612873565b60a08301525060c061301b84828501612b03565b60c08301525060e061302f84828501612b03565b60e08301525092915050565b60006020828403121561305157613050612751565b5b600082013567ffffffffffffffff81111561306f5761306e612756565b5b61307b84828501612ec9565b91505092915050565b600067ffffffffffffffff82111561309f5761309e612776565b5b602082029050602081019050919050565b600080fd5b60006130c86130c384613084565b6127d6565b905080838252602082019050602084028301858111156130eb576130ea6130b0565b5b835b8181101561313257803567ffffffffffffffff8111156131105761310f61275b565b5b80860161311d8982612ec9565b855260208501945050506020810190506130ed565b5050509392505050565b600082601f8301126131515761315061275b565b5b81356131618482602086016130b5565b91505092915050565b6000602082840312156131805761317f612751565b5b600082013567ffffffffffffffff81111561319e5761319d612756565b5b6131aa8482850161313c565b91505092915050565b600080604083850312156131ca576131c9612751565b5b600083013567ffffffffffffffff8111156131e8576131e7612756565b5b6131f485828601612873565b925050602061320585828601612b03565b9150509250929050565b600081905092915050565b6000613225826128ea565b61322f818561320f565b935061323f818560208601612906565b80840191505092915050565b6000613257828461321a565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806132a957607f821691505b602082108114156132bd576132bc613262565b5b50919050565b7f3100000000000000000000000000000000000000000000000000000000000000600082015250565b60006132f960018361320f565b9150613304826132c3565b600182019050919050565b600061331a826132ec565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b6000815461337581613291565b61337f818661320f565b9450600182166000811461339a57600181146133ab576133de565b60ff198316865281860193506133de565b6133b485613353565b60005b838110156133d6578154818901526001820191506020810190506133b7565b838801955050505b50505092915050565b60006133f38284613368565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613438826129de565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561346b5761346a6133fe565b5b600182019050919050565b6000819050919050565b6000819050919050565b60006134a56134a061349b84613476565b613480565b6129de565b9050919050565b6134b58161348a565b82525050565b60006020820190506134d060008301846134ac565b92915050565b6000819050919050565b60006134fb6134f66134f1846134d6565b613480565b6129de565b9050919050565b61350b816134e0565b82525050565b60006020820190506135266000830184613502565b92915050565b6000613537826129de565b9150613542836129de565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613577576135766133fe565b5b82820190509291505056fea2646970667358221220b7fa428676fe3b92999418c9bfca973cd90d4cc06bcc57f7b80d3747ca61cce364736f6c634300080a0033";

    public static final String FUNC_ASSETDETAILS = "assetDetails";

    public static final String FUNC_GETASSETDETAIL = "getAssetDetail";

    public static final String FUNC_GETASSETIDBYASSETDETAILID = "getAssetIdByAssetDetailId";

    public static final String FUNC_GETBYPRIMARYKEY = "getByPrimaryKey";

    public static final String FUNC_GETLIST = "getList";

    public static final String FUNC_GETLISTBYSTATUS = "getListByStatus";

    public static final String FUNC_GETSTATUSLISTBYPLACEID = "getStatusListByPlaceId";

    public static final String FUNC_INSERTASSETDETAIL = "insertAssetDetail";

    public static final String FUNC_ISEQUAL = "isEqual";

    public static final String FUNC_UPDATE = "update";

    public static final Event ISUPDATESUCCESS_EVENT = new Event("isUpdateSuccess",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected AssetDetailContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AssetDetailContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AssetDetailContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AssetDetailContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<IsUpdateSuccessEventResponse> getIsUpdateSuccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ISUPDATESUCCESS_EVENT, transactionReceipt);
        ArrayList<IsUpdateSuccessEventResponse> responses = new ArrayList<IsUpdateSuccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IsUpdateSuccessEventResponse typedResponse = new IsUpdateSuccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IsUpdateSuccessEventResponse> isUpdateSuccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IsUpdateSuccessEventResponse>() {
            @Override
            public IsUpdateSuccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ISUPDATESUCCESS_EVENT, log);
                IsUpdateSuccessEventResponse typedResponse = new IsUpdateSuccessEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IsUpdateSuccessEventResponse> isUpdateSuccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ISUPDATESUCCESS_EVENT));
        return isUpdateSuccessEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple8<String, String, String, String, String, String, BigInteger, BigInteger>> assetDetails(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETDETAILS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple8<String, String, String, String, String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple8<String, String, String, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<String, String, String, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<AssetDetail> getAssetDetail() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETDETAIL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<AssetDetail>() {}));
        return executeRemoteCallSingleValueReturn(function, AssetDetail.class);
    }

    public RemoteFunctionCall<String> getAssetIdByAssetDetailId(String _assetDetailId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETIDBYASSETDETAILID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetDetailId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<AssetDetail> getByPrimaryKey(String _assetDetialId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBYPRIMARYKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetDetialId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<AssetDetail>() {}));
        return executeRemoteCallSingleValueReturn(function, AssetDetail.class);
    }

    public RemoteFunctionCall<List> getList(String _assetId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getListByStatus(String _assetId, BigInteger _currentStatus) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYSTATUS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId),
                        new org.web3j.abi.datatypes.generated.Uint256(_currentStatus)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getStatusListByPlaceId(String _placeId, String _assetId, BigInteger _currentStatus) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSTATUSLISTBYPLACEID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_placeId),
                        new org.web3j.abi.datatypes.Utf8String(_assetId),
                        new org.web3j.abi.datatypes.generated.Uint256(_currentStatus)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> insertAssetDetail(List<AssetDetail> _assetDetailList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INSERTASSETDETAIL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<AssetDetail>(AssetDetail.class, _assetDetailList)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isEqual(String a, String b) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISEQUAL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a),
                        new org.web3j.abi.datatypes.Utf8String(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> update(AssetDetail _assetDetail) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATE,
                Arrays.<Type>asList(_assetDetail),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AssetDetailContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetDetailContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AssetDetailContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetDetailContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AssetDetailContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AssetDetailContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AssetDetailContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AssetDetailContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetDetailContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetDetailContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetDetailContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetDetailContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Getter
    @Setter
    @ToString
    public static class AssetDetail extends DynamicStruct {
        public String assetDetailId;

        public String currentUserAccount;

        public String assetId;

        public String placeId;

        public String beginTime;

        public String endTime;

        public BigInteger currentStatus;

        public BigInteger status;

        public AssetDetail(String assetDetailId, String currentUserAccount, String assetId, String placeId, String beginTime, String endTime, BigInteger currentStatus, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(assetDetailId),new org.web3j.abi.datatypes.Utf8String(currentUserAccount),new org.web3j.abi.datatypes.Utf8String(assetId),new org.web3j.abi.datatypes.Utf8String(placeId),new org.web3j.abi.datatypes.Utf8String(beginTime),new org.web3j.abi.datatypes.Utf8String(endTime),new org.web3j.abi.datatypes.generated.Uint256(currentStatus),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.assetDetailId = assetDetailId;
            this.currentUserAccount = currentUserAccount;
            this.assetId = assetId;
            this.placeId = placeId;
            this.beginTime = beginTime;
            this.endTime = endTime;
            this.currentStatus = currentStatus;
            this.status = status;
        }

        public AssetDetail(Utf8String assetDetailId, Utf8String currentUserAccount, Utf8String assetId, Utf8String placeId, Utf8String beginTime, Utf8String endTime, Uint256 currentStatus, Uint256 status) {
            super(assetDetailId,currentUserAccount,assetId,placeId,beginTime,endTime,currentStatus,status);
            this.assetDetailId = assetDetailId.getValue();
            this.currentUserAccount = currentUserAccount.getValue();
            this.assetId = assetId.getValue();
            this.placeId = placeId.getValue();
            this.beginTime = beginTime.getValue();
            this.endTime = endTime.getValue();
            this.currentStatus = currentStatus.getValue();
            this.status = status.getValue();
        }
    }

    @Getter
    public static class IsUpdateSuccessEventResponse extends BaseEventResponse {
        public BigInteger code;
    }
}