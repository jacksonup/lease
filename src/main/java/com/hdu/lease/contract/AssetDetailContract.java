package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class AssetDetailContract extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b5061552b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806349b5511b1161008c57806388ccd3421161006657806388ccd3421461026557806394a0dfae14610295578063ba27b1d8146102c5578063d612f310146102e1576100cf565b806349b5511b146101e957806375bb6551146102195780637f3430b114610249576100cf565b8063054987a5146100d45780630811251a1461010457806318ef178f146101225780632e5f445114610152578063465c410514610189578063487daf02146101b9575b600080fd5b6100ee60048036038101906100e99190614571565b610311565b6040516100fb9190614642565b60405180910390f35b61010c61040d565b60405161011991906147b3565b60405180910390f35b61013c600480360381019061013791906148c9565b6107c2565b6040516101499190614ad6565b60405180910390f35b61016c60048036038101906101679190614571565b610e46565b604051610180989796959493929190614b16565b60405180910390f35b6101a3600480360381019061019e9190614bbe565b6111d4565b6040516101b09190614c51565b60405180910390f35b6101d360048036038101906101ce9190614571565b6112b1565b6040516101e09190614ad6565b60405180910390f35b61020360048036038101906101fe9190614c6c565b6118b7565b6040516102109190614ad6565b60405180910390f35b610233600480360381019061022e9190614cc8565b611f07565b6040516102409190614ad6565b60405180910390f35b610263600480360381019061025e9190614efb565b612a47565b005b61027f600480360381019061027a9190614571565b612bde565b60405161028c91906147b3565b60405180910390f35b6102af60048036038101906102aa9190614f44565b612fce565b6040516102bc9190614ad6565b60405180910390f35b6102df60048036038101906102da91906150d8565b613b78565b005b6102fb60048036038101906102f69190615121565b613dbe565b6040516103089190614ad6565b60405180910390f35b6060600182604051610323919061518a565b908152602001604051809103902060009054906101000a900460ff16156103f557600082604051610354919061518a565b90815260200160405180910390206002018054610370906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461039c906151d0565b80156103e95780601f106103be576101008083540402835291602001916103e9565b820191906000526020600020905b8154815290600101906020018083116103cc57829003601f168201915b50505050509050610408565b6040518060200160405280600081525090505b919050565b61041561432f565b60006040516104239061524e565b90815260200160405180910390206040518061010001604052908160008201805461044d906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610479906151d0565b80156104c65780601f1061049b576101008083540402835291602001916104c6565b820191906000526020600020905b8154815290600101906020018083116104a957829003601f168201915b505050505081526020016001820180546104df906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461050b906151d0565b80156105585780601f1061052d57610100808354040283529160200191610558565b820191906000526020600020905b81548152906001019060200180831161053b57829003601f168201915b50505050508152602001600282018054610571906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461059d906151d0565b80156105ea5780601f106105bf576101008083540402835291602001916105ea565b820191906000526020600020905b8154815290600101906020018083116105cd57829003601f168201915b50505050508152602001600382018054610603906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461062f906151d0565b801561067c5780601f106106515761010080835404028352916020019161067c565b820191906000526020600020905b81548152906001019060200180831161065f57829003601f168201915b50505050508152602001600482018054610695906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546106c1906151d0565b801561070e5780601f106106e35761010080835404028352916020019161070e565b820191906000526020600020905b8154815290600101906020018083116106f157829003601f168201915b50505050508152602001600582018054610727906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610753906151d0565b80156107a05780601f10610775576101008083540402835291602001916107a0565b820191906000526020600020905b81548152906001019060200180831161078357829003601f168201915b5050505050815260200160068201548152602001600782015481525050905090565b6060600060028054905067ffffffffffffffff8111156107e5576107e4614446565b5b60405190808252806020026020018201604052801561081e57816020015b61080b61432f565b8152602001906001900390816108035790505b5090506000805b8551811015610d8f5760005b600280549050811015610d7b5786828151811061085157610850615263565b5b602002602001015160006002838154811061086f5761086e615263565b5b906000526020600020016040516108869190615326565b90815260200160405180910390206006015414801561097157506109706000600283815481106108b9576108b8615263565b5b906000526020600020016040516108d09190615326565b908152602001604051809103902060030180546108ec906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610918906151d0565b80156109655780601f1061093a57610100808354040283529160200191610965565b820191906000526020600020905b81548152906001019060200180831161094857829003601f168201915b5050505050876111d4565b5b15610d685760006002828154811061098c5761098b615263565b5b906000526020600020016040516109a39190615326565b9081526020016040518091039020604051806101000160405290816000820180546109cd906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546109f9906151d0565b8015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b50505050508152602001600182018054610a5f906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8b906151d0565b8015610ad85780601f10610aad57610100808354040283529160200191610ad8565b820191906000526020600020905b815481529060010190602001808311610abb57829003601f168201915b50505050508152602001600282018054610af1906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1d906151d0565b8015610b6a5780601f10610b3f57610100808354040283529160200191610b6a565b820191906000526020600020905b815481529060010190602001808311610b4d57829003601f168201915b50505050508152602001600382018054610b83906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610baf906151d0565b8015610bfc5780601f10610bd157610100808354040283529160200191610bfc565b820191906000526020600020905b815481529060010190602001808311610bdf57829003601f168201915b50505050508152602001600482018054610c15906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610c41906151d0565b8015610c8e5780601f10610c6357610100808354040283529160200191610c8e565b820191906000526020600020905b815481529060010190602001808311610c7157829003601f168201915b50505050508152602001600582018054610ca7906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd3906151d0565b8015610d205780601f10610cf557610100808354040283529160200191610d20565b820191906000526020600020905b815481529060010190602001808311610d0357829003601f168201915b5050505050815260200160068201548152602001600782015481525050848480610d499061536c565b955081518110610d5c57610d5b615263565b5b60200260200101819052505b8080610d739061536c565b915050610831565b508080610d879061536c565b915050610825565b508067ffffffffffffffff811115610daa57610da9614446565b5b604051908082528060200260200182016040528015610de357816020015b610dd061432f565b815260200190600190039081610dc85790505b50925060005b81811015610e3d57828181518110610e0457610e03615263565b5b6020026020010151848281518110610e1f57610e1e615263565b5b60200260200101819052508080610e359061536c565b915050610de9565b50505092915050565b600081805160208101820180518482526020830160208501208183528095505050505050600091509050806000018054610e7f906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610eab906151d0565b8015610ef85780601f10610ecd57610100808354040283529160200191610ef8565b820191906000526020600020905b815481529060010190602001808311610edb57829003601f168201915b505050505090806001018054610f0d906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610f39906151d0565b8015610f865780601f10610f5b57610100808354040283529160200191610f86565b820191906000526020600020905b815481529060010190602001808311610f6957829003601f168201915b505050505090806002018054610f9b906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc7906151d0565b80156110145780601f10610fe957610100808354040283529160200191611014565b820191906000526020600020905b815481529060010190602001808311610ff757829003601f168201915b505050505090806003018054611029906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611055906151d0565b80156110a25780601f10611077576101008083540402835291602001916110a2565b820191906000526020600020905b81548152906001019060200180831161108557829003601f168201915b5050505050908060040180546110b7906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546110e3906151d0565b80156111305780601f1061110557610100808354040283529160200191611130565b820191906000526020600020905b81548152906001019060200180831161111357829003601f168201915b505050505090806005018054611145906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611171906151d0565b80156111be5780601f10611193576101008083540402835291602001916111be565b820191906000526020600020905b8154815290600101906020018083116111a157829003601f168201915b5050505050908060060154908060070154905088565b600080839050600083905080518251146111f3576000925050506112ab565b60005b82518110156112a35781818151811061121257611211615263565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683828151811061125257611251615263565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461129057600093505050506112ab565b808061129b9061536c565b9150506111f6565b506001925050505b92915050565b6060600060028054905067ffffffffffffffff8111156112d4576112d3614446565b5b60405190808252806020026020018201604052801561130d57816020015b6112fa61432f565b8152602001906001900390816112f25790505b5090506000805b6002805490508110156117fb576113f160006002838154811061133a57611339615263565b5b906000526020600020016040516113519190615326565b9081526020016040518091039020600201805461136d906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611399906151d0565b80156113e65780601f106113bb576101008083540402835291602001916113e6565b820191906000526020600020905b8154815290600101906020018083116113c957829003601f168201915b5050505050866111d4565b156117e85760006002828154811061140c5761140b615263565b5b906000526020600020016040516114239190615326565b90815260200160405180910390206040518061010001604052908160008201805461144d906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611479906151d0565b80156114c65780601f1061149b576101008083540402835291602001916114c6565b820191906000526020600020905b8154815290600101906020018083116114a957829003601f168201915b505050505081526020016001820180546114df906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461150b906151d0565b80156115585780601f1061152d57610100808354040283529160200191611558565b820191906000526020600020905b81548152906001019060200180831161153b57829003601f168201915b50505050508152602001600282018054611571906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461159d906151d0565b80156115ea5780601f106115bf576101008083540402835291602001916115ea565b820191906000526020600020905b8154815290600101906020018083116115cd57829003601f168201915b50505050508152602001600382018054611603906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461162f906151d0565b801561167c5780601f106116515761010080835404028352916020019161167c565b820191906000526020600020905b81548152906001019060200180831161165f57829003601f168201915b50505050508152602001600482018054611695906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546116c1906151d0565b801561170e5780601f106116e35761010080835404028352916020019161170e565b820191906000526020600020905b8154815290600101906020018083116116f157829003601f168201915b50505050508152602001600582018054611727906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611753906151d0565b80156117a05780601f10611775576101008083540402835291602001916117a0565b820191906000526020600020905b81548152906001019060200180831161178357829003601f168201915b50505050508152602001600682015481526020016007820154815250508383806117c99061536c565b9450815181106117dc576117db615263565b5b60200260200101819052505b80806117f39061536c565b915050611314565b5060008167ffffffffffffffff81111561181857611817614446565b5b60405190808252806020026020018201604052801561185157816020015b61183e61432f565b8152602001906001900390816118365790505b50905060005b828110156118ab5783818151811061187257611871615263565b5b602002602001015182828151811061188d5761188c615263565b5b602002602001018190525080806118a39061536c565b915050611857565b50809350505050919050565b6060600060028054905067ffffffffffffffff8111156118da576118d9614446565b5b60405190808252806020026020018201604052801561191357816020015b61190061432f565b8152602001906001900390816118f85790505b5090506000805b600280549050811015611e4a576119f76000600283815481106119405761193f615263565b5b906000526020600020016040516119579190615326565b90815260200160405180910390206002018054611973906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461199f906151d0565b80156119ec5780601f106119c1576101008083540402835291602001916119ec565b820191906000526020600020905b8154815290600101906020018083116119cf57829003601f168201915b5050505050876111d4565b8015611a40575084600060028381548110611a1557611a14615263565b5b90600052602060002001604051611a2c9190615326565b908152602001604051809103902060060154145b15611e3757600060028281548110611a5b57611a5a615263565b5b90600052602060002001604051611a729190615326565b908152602001604051809103902060405180610100016040529081600082018054611a9c906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611ac8906151d0565b8015611b155780601f10611aea57610100808354040283529160200191611b15565b820191906000526020600020905b815481529060010190602001808311611af857829003601f168201915b50505050508152602001600182018054611b2e906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5a906151d0565b8015611ba75780601f10611b7c57610100808354040283529160200191611ba7565b820191906000526020600020905b815481529060010190602001808311611b8a57829003601f168201915b50505050508152602001600282018054611bc0906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611bec906151d0565b8015611c395780601f10611c0e57610100808354040283529160200191611c39565b820191906000526020600020905b815481529060010190602001808311611c1c57829003601f168201915b50505050508152602001600382018054611c52906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7e906151d0565b8015611ccb5780601f10611ca057610100808354040283529160200191611ccb565b820191906000526020600020905b815481529060010190602001808311611cae57829003601f168201915b50505050508152602001600482018054611ce4906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611d10906151d0565b8015611d5d5780601f10611d3257610100808354040283529160200191611d5d565b820191906000526020600020905b815481529060010190602001808311611d4057829003601f168201915b50505050508152602001600582018054611d76906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611da2906151d0565b8015611def5780601f10611dc457610100808354040283529160200191611def565b820191906000526020600020905b815481529060010190602001808311611dd257829003601f168201915b5050505050815260200160068201548152602001600782015481525050838380611e189061536c565b945081518110611e2b57611e2a615263565b5b60200260200101819052505b8080611e429061536c565b91505061191a565b5060008167ffffffffffffffff811115611e6757611e66614446565b5b604051908082528060200260200182016040528015611ea057816020015b611e8d61432f565b815260200190600190039081611e855790505b50905060005b82811015611efa57838181518110611ec157611ec0615263565b5b6020026020010151828281518110611edc57611edb615263565b5b60200260200101819052508080611ef29061536c565b915050611ea6565b5080935050505092915050565b6060600060028054905067ffffffffffffffff811115611f2a57611f29614446565b5b604051908082528060200260200182016040528015611f6357816020015b611f5061432f565b815260200190600190039081611f485790505b5090506000805b60028054905081101561298f57612047600060028381548110611f9057611f8f615263565b5b90600052602060002001604051611fa79190615326565b90815260200160405180910390206003018054611fc3906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611fef906151d0565b801561203c5780601f106120115761010080835404028352916020019161203c565b820191906000526020600020905b81548152906001019060200180831161201f57829003601f168201915b5050505050886111d4565b801561211f575061211e60006002838154811061206757612066615263565b5b9060005260206000200160405161207e9190615326565b9081526020016040518091039020600201805461209a906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546120c6906151d0565b80156121135780601f106120e857610100808354040283529160200191612113565b820191906000526020600020905b8154815290600101906020018083116120f657829003601f168201915b5050505050876111d4565b5b1561297c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8514156125425760006002828154811061216257612161615263565b5b906000526020600020016040516121799190615326565b9081526020016040518091039020604051806101000160405290816000820180546121a3906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546121cf906151d0565b801561221c5780601f106121f15761010080835404028352916020019161221c565b820191906000526020600020905b8154815290600101906020018083116121ff57829003601f168201915b50505050508152602001600182018054612235906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612261906151d0565b80156122ae5780601f10612283576101008083540402835291602001916122ae565b820191906000526020600020905b81548152906001019060200180831161229157829003601f168201915b505050505081526020016002820180546122c7906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546122f3906151d0565b80156123405780601f1061231557610100808354040283529160200191612340565b820191906000526020600020905b81548152906001019060200180831161232357829003601f168201915b50505050508152602001600382018054612359906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612385906151d0565b80156123d25780601f106123a7576101008083540402835291602001916123d2565b820191906000526020600020905b8154815290600101906020018083116123b557829003601f168201915b505050505081526020016004820180546123eb906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612417906151d0565b80156124645780601f1061243957610100808354040283529160200191612464565b820191906000526020600020905b81548152906001019060200180831161244757829003601f168201915b5050505050815260200160058201805461247d906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546124a9906151d0565b80156124f65780601f106124cb576101008083540402835291602001916124f6565b820191906000526020600020905b8154815290600101906020018083116124d957829003601f168201915b505050505081526020016006820154815260200160078201548152505083838061251f9061536c565b94508151811061253257612531615263565b5b602002602001018190525061297b565b8460006002838154811061255957612558615263565b5b906000526020600020016040516125709190615326565b908152602001604051809103902060060154141561297a5760006002828154811061259e5761259d615263565b5b906000526020600020016040516125b59190615326565b9081526020016040518091039020604051806101000160405290816000820180546125df906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461260b906151d0565b80156126585780601f1061262d57610100808354040283529160200191612658565b820191906000526020600020905b81548152906001019060200180831161263b57829003601f168201915b50505050508152602001600182018054612671906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461269d906151d0565b80156126ea5780601f106126bf576101008083540402835291602001916126ea565b820191906000526020600020905b8154815290600101906020018083116126cd57829003601f168201915b50505050508152602001600282018054612703906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461272f906151d0565b801561277c5780601f106127515761010080835404028352916020019161277c565b820191906000526020600020905b81548152906001019060200180831161275f57829003601f168201915b50505050508152602001600382018054612795906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546127c1906151d0565b801561280e5780601f106127e35761010080835404028352916020019161280e565b820191906000526020600020905b8154815290600101906020018083116127f157829003601f168201915b50505050508152602001600482018054612827906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612853906151d0565b80156128a05780601f10612875576101008083540402835291602001916128a0565b820191906000526020600020905b81548152906001019060200180831161288357829003601f168201915b505050505081526020016005820180546128b9906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546128e5906151d0565b80156129325780601f1061290757610100808354040283529160200191612932565b820191906000526020600020905b81548152906001019060200180831161291557829003601f168201915b505050505081526020016006820154815260200160078201548152505083838061295b9061536c565b94508151811061296e5761296d615263565b5b60200260200101819052505b5b5b80806129879061536c565b915050611f6a565b508067ffffffffffffffff8111156129aa576129a9614446565b5b6040519080825280602002602001820160405280156129e357816020015b6129d061432f565b8152602001906001900390816129c85790505b50925060005b81811015612a3d57828181518110612a0457612a03615263565b5b6020026020010151848281518110612a1f57612a1e615263565b5b60200260200101819052508080612a359061536c565b9150506129e9565b5050509392505050565b60018160000151604051612a5b919061518a565b908152602001604051809103902060009054906101000a900460ff1615612ba1578060008260000151604051612a91919061518a565b90815260200160405180910390206000820151816000019080519060200190612abb929190614374565b506020820151816001019080519060200190612ad8929190614374565b506040820151816002019080519060200190612af5929190614374565b506060820151816003019080519060200190612b12929190614374565b506080820151816004019080519060200190612b2f929190614374565b5060a0820151816005019080519060200190612b4c929190614374565b5060c0820151816006015560e082015181600701559050507f1f0b7755550dd48676926d868a91257934b9a64d5f852cad45e85274c052c6b060c8604051612b9491906153fa565b60405180910390a1612bdb565b7f1f0b7755550dd48676926d868a91257934b9a64d5f852cad45e85274c052c6b0612711604051612bd29190615450565b60405180910390a15b50565b612be661432f565b600182604051612bf6919061518a565b908152602001604051809103902060009054906101000a900460ff1615612fc857600082604051612c27919061518a565b908152602001604051809103902060405180610100016040529081600082018054612c51906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612c7d906151d0565b8015612cca5780601f10612c9f57610100808354040283529160200191612cca565b820191906000526020600020905b815481529060010190602001808311612cad57829003601f168201915b50505050508152602001600182018054612ce3906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612d0f906151d0565b8015612d5c5780601f10612d3157610100808354040283529160200191612d5c565b820191906000526020600020905b815481529060010190602001808311612d3f57829003601f168201915b50505050508152602001600282018054612d75906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612da1906151d0565b8015612dee5780601f10612dc357610100808354040283529160200191612dee565b820191906000526020600020905b815481529060010190602001808311612dd157829003601f168201915b50505050508152602001600382018054612e07906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612e33906151d0565b8015612e805780601f10612e5557610100808354040283529160200191612e80565b820191906000526020600020905b815481529060010190602001808311612e6357829003601f168201915b50505050508152602001600482018054612e99906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612ec5906151d0565b8015612f125780601f10612ee757610100808354040283529160200191612f12565b820191906000526020600020905b815481529060010190602001808311612ef557829003601f168201915b50505050508152602001600582018054612f2b906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612f57906151d0565b8015612fa45780601f10612f7957610100808354040283529160200191612fa4565b820191906000526020600020905b815481529060010190602001808311612f8757829003601f168201915b50505050508152602001600682015481526020016007820154815250509050612fc9565b5b919050565b6060600060028054905067ffffffffffffffff811115612ff157612ff0614446565b5b60405190808252806020026020018201604052801561302a57816020015b61301761432f565b81526020019060019003908161300f5790505b5090506000805b600280549050811015613a565761310e60006002838154811061305757613056615263565b5b9060005260206000200160405161306e9190615326565b9081526020016040518091039020600301805461308a906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546130b6906151d0565b80156131035780601f106130d857610100808354040283529160200191613103565b820191906000526020600020905b8154815290600101906020018083116130e657829003601f168201915b50505050508a6111d4565b80156131e657506131e560006002838154811061312e5761312d615263565b5b906000526020600020016040516131459190615326565b90815260200160405180910390206002018054613161906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461318d906151d0565b80156131da5780601f106131af576101008083540402835291602001916131da565b820191906000526020600020905b8154815290600101906020018083116131bd57829003601f168201915b5050505050896111d4565b5b15613a43577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8714156136095760006002828154811061322957613228615263565b5b906000526020600020016040516132409190615326565b90815260200160405180910390206040518061010001604052908160008201805461326a906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054613296906151d0565b80156132e35780601f106132b8576101008083540402835291602001916132e3565b820191906000526020600020905b8154815290600101906020018083116132c657829003601f168201915b505050505081526020016001820180546132fc906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054613328906151d0565b80156133755780601f1061334a57610100808354040283529160200191613375565b820191906000526020600020905b81548152906001019060200180831161335857829003601f168201915b5050505050815260200160028201805461338e906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546133ba906151d0565b80156134075780601f106133dc57610100808354040283529160200191613407565b820191906000526020600020905b8154815290600101906020018083116133ea57829003601f168201915b50505050508152602001600382018054613420906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461344c906151d0565b80156134995780601f1061346e57610100808354040283529160200191613499565b820191906000526020600020905b81548152906001019060200180831161347c57829003601f168201915b505050505081526020016004820180546134b2906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546134de906151d0565b801561352b5780601f106135005761010080835404028352916020019161352b565b820191906000526020600020905b81548152906001019060200180831161350e57829003601f168201915b50505050508152602001600582018054613544906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054613570906151d0565b80156135bd5780601f10613592576101008083540402835291602001916135bd565b820191906000526020600020905b8154815290600101906020018083116135a057829003601f168201915b50505050508152602001600682015481526020016007820154815250508383806135e69061536c565b9450815181106135f9576135f8615263565b5b6020026020010181905250613a42565b866000600283815481106136205761361f615263565b5b906000526020600020016040516136379190615326565b9081526020016040518091039020600601541415613a415760006002828154811061366557613664615263565b5b9060005260206000200160405161367c9190615326565b9081526020016040518091039020604051806101000160405290816000820180546136a6906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546136d2906151d0565b801561371f5780601f106136f45761010080835404028352916020019161371f565b820191906000526020600020905b81548152906001019060200180831161370257829003601f168201915b50505050508152602001600182018054613738906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054613764906151d0565b80156137b15780601f10613786576101008083540402835291602001916137b1565b820191906000526020600020905b81548152906001019060200180831161379457829003601f168201915b505050505081526020016002820180546137ca906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546137f6906151d0565b80156138435780601f1061381857610100808354040283529160200191613843565b820191906000526020600020905b81548152906001019060200180831161382657829003601f168201915b5050505050815260200160038201805461385c906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054613888906151d0565b80156138d55780601f106138aa576101008083540402835291602001916138d5565b820191906000526020600020905b8154815290600101906020018083116138b857829003601f168201915b505050505081526020016004820180546138ee906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461391a906151d0565b80156139675780601f1061393c57610100808354040283529160200191613967565b820191906000526020600020905b81548152906001019060200180831161394a57829003601f168201915b50505050508152602001600582018054613980906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546139ac906151d0565b80156139f95780601f106139ce576101008083540402835291602001916139f9565b820191906000526020600020905b8154815290600101906020018083116139dc57829003601f168201915b5050505050815260200160068201548152602001600782015481525050838380613a229061536c565b945081518110613a3557613a34615263565b5b60200260200101819052505b5b5b8080613a4e9061536c565b915050613031565b5084841080613a655750600081145b15613a71575050613b6f565b600181613a7e919061546b565b841115613a9557600181613a92919061546b565b93505b60018585613aa3919061546b565b613aad919061549f565b67ffffffffffffffff811115613ac657613ac5614446565b5b604051908082528060200260200182016040528015613aff57816020015b613aec61432f565b815260200190600190039081613ae45790505b5092506000905060008590505b848111613b6b57828181518110613b2657613b25615263565b5b6020026020010151848380613b3a9061536c565b945081518110613b4d57613b4c615263565b5b60200260200101819052508080613b639061536c565b915050613b0c565b5050505b95945050505050565b60005b8151811015613dba576001828281518110613b9957613b98615263565b5b602002602001015160000151604051613bb2919061518a565b908152602001604051809103902060009054906101000a900460ff16613da157818181518110613be557613be4615263565b5b60200260200101516000838381518110613c0257613c01615263565b5b602002602001015160000151604051613c1b919061518a565b90815260200160405180910390206000820151816000019080519060200190613c45929190614374565b506020820151816001019080519060200190613c62929190614374565b506040820151816002019080519060200190613c7f929190614374565b506060820151816003019080519060200190613c9c929190614374565b506080820151816004019080519060200190613cb9929190614374565b5060a0820151816005019080519060200190613cd6929190614374565b5060c0820151816006015560e08201518160070155905050600180838381518110613d0457613d03615263565b5b602002602001015160000151604051613d1d919061518a565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506002828281518110613d5757613d56615263565b5b602002602001015160000151908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190613d9b929190614374565b50613da6565b613da7565b5b8080613db29061536c565b915050613b7b565b5050565b6060600060028054905067ffffffffffffffff811115613de157613de0614446565b5b604051908082528060200260200182016040528015613e1a57816020015b613e0761432f565b815260200190600190039081613dff5790505b5090506000805b6002805490508110156142795784600060028381548110613e4557613e44615263565b5b90600052602060002001604051613e5c9190615326565b908152602001604051809103902060060154141561426657600060028281548110613e8a57613e89615263565b5b90600052602060002001604051613ea19190615326565b908152602001604051809103902060405180610100016040529081600082018054613ecb906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054613ef7906151d0565b8015613f445780601f10613f1957610100808354040283529160200191613f44565b820191906000526020600020905b815481529060010190602001808311613f2757829003601f168201915b50505050508152602001600182018054613f5d906151d0565b80601f0160208091040260200160405190810160405280929190818152602001828054613f89906151d0565b8015613fd65780601f10613fab57610100808354040283529160200191613fd6565b820191906000526020600020905b815481529060010190602001808311613fb957829003601f168201915b50505050508152602001600282018054613fef906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461401b906151d0565b80156140685780601f1061403d57610100808354040283529160200191614068565b820191906000526020600020905b81548152906001019060200180831161404b57829003601f168201915b50505050508152602001600382018054614081906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546140ad906151d0565b80156140fa5780601f106140cf576101008083540402835291602001916140fa565b820191906000526020600020905b8154815290600101906020018083116140dd57829003601f168201915b50505050508152602001600482018054614113906151d0565b80601f016020809104026020016040519081016040528092919081815260200182805461413f906151d0565b801561418c5780601f106141615761010080835404028352916020019161418c565b820191906000526020600020905b81548152906001019060200180831161416f57829003601f168201915b505050505081526020016005820180546141a5906151d0565b80601f01602080910402602001604051908101604052809291908181526020018280546141d1906151d0565b801561421e5780601f106141f35761010080835404028352916020019161421e565b820191906000526020600020905b81548152906001019060200180831161420157829003601f168201915b50505050508152602001600682015481526020016007820154815250508383806142479061536c565b94508151811061425a57614259615263565b5b60200260200101819052505b80806142719061536c565b915050613e21565b508067ffffffffffffffff81111561429457614293614446565b5b6040519080825280602002602001820160405280156142cd57816020015b6142ba61432f565b8152602001906001900390816142b25790505b50925060005b81811015614327578281815181106142ee576142ed615263565b5b602002602001015184828151811061430957614308615263565b5b6020026020010181905250808061431f9061536c565b9150506142d3565b505050919050565b60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160008152602001600081525090565b828054614380906151d0565b90600052602060002090601f0160209004810192826143a257600085556143e9565b82601f106143bb57805160ff19168380011785556143e9565b828001600101855582156143e9579182015b828111156143e85782518255916020019190600101906143cd565b5b5090506143f691906143fa565b5090565b5b808211156144135760008160009055506001016143fb565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61447e82614435565b810181811067ffffffffffffffff8211171561449d5761449c614446565b5b80604052505050565b60006144b0614417565b90506144bc8282614475565b919050565b600067ffffffffffffffff8211156144dc576144db614446565b5b6144e582614435565b9050602081019050919050565b82818337600083830152505050565b600061451461450f846144c1565b6144a6565b9050828152602081018484840111156145305761452f614430565b5b61453b8482856144f2565b509392505050565b600082601f8301126145585761455761442b565b5b8135614568848260208601614501565b91505092915050565b60006020828403121561458757614586614421565b5b600082013567ffffffffffffffff8111156145a5576145a4614426565b5b6145b184828501614543565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156145f45780820151818401526020810190506145d9565b83811115614603576000848401525b50505050565b6000614614826145ba565b61461e81856145c5565b935061462e8185602086016145d6565b61463781614435565b840191505092915050565b6000602082019050818103600083015261465c8184614609565b905092915050565b600082825260208201905092915050565b6000614680826145ba565b61468a8185614664565b935061469a8185602086016145d6565b6146a381614435565b840191505092915050565b6000819050919050565b6146c1816146ae565b82525050565b6000819050919050565b6146da816146c7565b82525050565b60006101008301600083015184820360008601526146fe8282614675565b915050602083015184820360208601526147188282614675565b915050604083015184820360408601526147328282614675565b9150506060830151848203606086015261474c8282614675565b915050608083015184820360808601526147668282614675565b91505060a083015184820360a08601526147808282614675565b91505060c083015161479560c08601826146b8565b5060e08301516147a860e08601826146d1565b508091505092915050565b600060208201905081810360008301526147cd81846146e0565b905092915050565b600067ffffffffffffffff8211156147f0576147ef614446565b5b602082029050602081019050919050565b600080fd5b61480f816146ae565b811461481a57600080fd5b50565b60008135905061482c81614806565b92915050565b6000614845614840846147d5565b6144a6565b9050808382526020820190506020840283018581111561486857614867614801565b5b835b81811015614891578061487d888261481d565b84526020840193505060208101905061486a565b5050509392505050565b600082601f8301126148b0576148af61442b565b5b81356148c0848260208601614832565b91505092915050565b600080604083850312156148e0576148df614421565b5b600083013567ffffffffffffffff8111156148fe576148fd614426565b5b61490a8582860161489b565b925050602083013567ffffffffffffffff81111561492b5761492a614426565b5b61493785828601614543565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061010083016000830151848203600086015261498b8282614675565b915050602083015184820360208601526149a58282614675565b915050604083015184820360408601526149bf8282614675565b915050606083015184820360608601526149d98282614675565b915050608083015184820360808601526149f38282614675565b91505060a083015184820360a0860152614a0d8282614675565b91505060c0830151614a2260c08601826146b8565b5060e0830151614a3560e08601826146d1565b508091505092915050565b6000614a4c838361496d565b905092915050565b6000602082019050919050565b6000614a6c82614941565b614a76818561494c565b935083602082028501614a888561495d565b8060005b85811015614ac45784840389528151614aa58582614a40565b9450614ab083614a54565b925060208a01995050600181019050614a8c565b50829750879550505050505092915050565b60006020820190508181036000830152614af08184614a61565b905092915050565b614b01816146ae565b82525050565b614b10816146c7565b82525050565b6000610100820190508181036000830152614b31818b614609565b90508181036020830152614b45818a614609565b90508181036040830152614b598189614609565b90508181036060830152614b6d8188614609565b90508181036080830152614b818187614609565b905081810360a0830152614b958186614609565b9050614ba460c0830185614af8565b614bb160e0830184614b07565b9998505050505050505050565b60008060408385031215614bd557614bd4614421565b5b600083013567ffffffffffffffff811115614bf357614bf2614426565b5b614bff85828601614543565b925050602083013567ffffffffffffffff811115614c2057614c1f614426565b5b614c2c85828601614543565b9150509250929050565b60008115159050919050565b614c4b81614c36565b82525050565b6000602082019050614c666000830184614c42565b92915050565b60008060408385031215614c8357614c82614421565b5b600083013567ffffffffffffffff811115614ca157614ca0614426565b5b614cad85828601614543565b9250506020614cbe8582860161481d565b9150509250929050565b600080600060608486031215614ce157614ce0614421565b5b600084013567ffffffffffffffff811115614cff57614cfe614426565b5b614d0b86828701614543565b935050602084013567ffffffffffffffff811115614d2c57614d2b614426565b5b614d3886828701614543565b9250506040614d498682870161481d565b9150509250925092565b600080fd5b600080fd5b614d66816146c7565b8114614d7157600080fd5b50565b600081359050614d8381614d5d565b92915050565b60006101008284031215614da057614d9f614d53565b5b614dab6101006144a6565b9050600082013567ffffffffffffffff811115614dcb57614dca614d58565b5b614dd784828501614543565b600083015250602082013567ffffffffffffffff811115614dfb57614dfa614d58565b5b614e0784828501614543565b602083015250604082013567ffffffffffffffff811115614e2b57614e2a614d58565b5b614e3784828501614543565b604083015250606082013567ffffffffffffffff811115614e5b57614e5a614d58565b5b614e6784828501614543565b606083015250608082013567ffffffffffffffff811115614e8b57614e8a614d58565b5b614e9784828501614543565b60808301525060a082013567ffffffffffffffff811115614ebb57614eba614d58565b5b614ec784828501614543565b60a08301525060c0614edb8482850161481d565b60c08301525060e0614eef84828501614d74565b60e08301525092915050565b600060208284031215614f1157614f10614421565b5b600082013567ffffffffffffffff811115614f2f57614f2e614426565b5b614f3b84828501614d89565b91505092915050565b600080600080600060a08688031215614f6057614f5f614421565b5b600086013567ffffffffffffffff811115614f7e57614f7d614426565b5b614f8a88828901614543565b955050602086013567ffffffffffffffff811115614fab57614faa614426565b5b614fb788828901614543565b9450506040614fc88882890161481d565b9350506060614fd988828901614d74565b9250506080614fea88828901614d74565b9150509295509295909350565b600067ffffffffffffffff82111561501257615011614446565b5b602082029050602081019050919050565b600061503661503184614ff7565b6144a6565b9050808382526020820190506020840283018581111561505957615058614801565b5b835b818110156150a057803567ffffffffffffffff81111561507e5761507d61442b565b5b80860161508b8982614d89565b8552602085019450505060208101905061505b565b5050509392505050565b600082601f8301126150bf576150be61442b565b5b81356150cf848260208601615023565b91505092915050565b6000602082840312156150ee576150ed614421565b5b600082013567ffffffffffffffff81111561510c5761510b614426565b5b615118848285016150aa565b91505092915050565b60006020828403121561513757615136614421565b5b60006151458482850161481d565b91505092915050565b600081905092915050565b6000615164826145ba565b61516e818561514e565b935061517e8185602086016145d6565b80840191505092915050565b60006151968284615159565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806151e857607f821691505b602082108114156151fc576151fb6151a1565b5b50919050565b7f3100000000000000000000000000000000000000000000000000000000000000600082015250565b600061523860018361514e565b915061524382615202565b600182019050919050565b60006152598261522b565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b600081546152b4816151d0565b6152be818661514e565b945060018216600081146152d957600181146152ea5761531d565b60ff1983168652818601935061531d565b6152f385615292565b60005b83811015615315578154818901526001820191506020810190506152f6565b838801955050505b50505092915050565b600061533282846152a7565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000615377826146c7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156153aa576153a961533d565b5b600182019050919050565b6000819050919050565b6000819050919050565b60006153e46153df6153da846153b5565b6153bf565b6146c7565b9050919050565b6153f4816153c9565b82525050565b600060208201905061540f60008301846153eb565b92915050565b6000819050919050565b600061543a61543561543084615415565b6153bf565b6146c7565b9050919050565b61544a8161541f565b82525050565b60006020820190506154656000830184615441565b92915050565b6000615476826146c7565b9150615481836146c7565b9250828210156154945761549361533d565b5b828203905092915050565b60006154aa826146c7565b91506154b5836146c7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156154ea576154e961533d565b5b82820190509291505056fea2646970667358221220f7b7897c065dffcf649ca1139c1afed19fb4cb9afeb3d5ff507a06cfd7a144a464736f6c634300080a0033";

    public static final String FUNC_ASSETDETAILS = "assetDetails";

    public static final String FUNC_GETASSETDETAIL = "getAssetDetail";

    public static final String FUNC_GETASSETIDBYASSETDETAILID = "getAssetIdByAssetDetailId";

    public static final String FUNC_GETBYCURRENTSTATUS = "getByCurrentStatus";

    public static final String FUNC_GETBYPRIMARYKEY = "getByPrimaryKey";

    public static final String FUNC_GETLIST = "getList";

    public static final String FUNC_GETLISTBYSTATUS = "getListByStatus";

    public static final String FUNC_GETLISTBYSTATUSANDPLACEID = "getListByStatusAndPlaceId";

    public static final String FUNC_GETSTATUSLISTBYPLACEID = "getStatusListByPlaceId";

    public static final String FUNC_INSERTASSETDETAIL = "insertAssetDetail";

    public static final String FUNC_ISEQUAL = "isEqual";

    public static final String FUNC_PAGEGETSTATUSLISTBYPLACEID = "pageGetStatusListByPlaceId";

    public static final String FUNC_UPDATE = "update";

    public static final Event ISUPDATESUCCESS_EVENT = new Event("isUpdateSuccess",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected AssetDetailContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AssetDetailContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AssetDetailContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AssetDetailContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<IsUpdateSuccessEventResponse> getIsUpdateSuccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ISUPDATESUCCESS_EVENT, transactionReceipt);
        ArrayList<IsUpdateSuccessEventResponse> responses = new ArrayList<IsUpdateSuccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IsUpdateSuccessEventResponse typedResponse = new IsUpdateSuccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IsUpdateSuccessEventResponse> isUpdateSuccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IsUpdateSuccessEventResponse>() {
            @Override
            public IsUpdateSuccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ISUPDATESUCCESS_EVENT, log);
                IsUpdateSuccessEventResponse typedResponse = new IsUpdateSuccessEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IsUpdateSuccessEventResponse> isUpdateSuccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ISUPDATESUCCESS_EVENT));
        return isUpdateSuccessEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple8<String, String, String, String, String, String, BigInteger, BigInteger>> assetDetails(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETDETAILS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple8<String, String, String, String, String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple8<String, String, String, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<String, String, String, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<AssetDetail> getAssetDetail() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETDETAIL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<AssetDetail>() {}));
        return executeRemoteCallSingleValueReturn(function, AssetDetail.class);
    }

    public RemoteFunctionCall<String> getAssetIdByAssetDetailId(String _assetDetailId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETIDBYASSETDETAILID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetDetailId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getByCurrentStatus(BigInteger _currentStatus) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBYCURRENTSTATUS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int256(_currentStatus)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<AssetDetail> getByPrimaryKey(String _assetDetialId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBYPRIMARYKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetDetialId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<AssetDetail>() {}));
        return executeRemoteCallSingleValueReturn(function, AssetDetail.class);
    }

    public RemoteFunctionCall<List> getList(String _assetId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getListByStatus(String _assetId, BigInteger _currentStatus) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYSTATUS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId),
                        new org.web3j.abi.datatypes.generated.Int256(_currentStatus)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getListByStatusAndPlaceId(List<BigInteger> _currentStatus, String _placeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYSTATUSANDPLACEID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Int256>(
                                org.web3j.abi.datatypes.generated.Int256.class,
                                org.web3j.abi.Utils.typeMap(_currentStatus, org.web3j.abi.datatypes.generated.Int256.class)),
                        new org.web3j.abi.datatypes.Utf8String(_placeId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getStatusListByPlaceId(String _placeId, String _assetId, BigInteger _currentStatus) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSTATUSLISTBYPLACEID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_placeId),
                        new org.web3j.abi.datatypes.Utf8String(_assetId),
                        new org.web3j.abi.datatypes.generated.Int256(_currentStatus)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> insertAssetDetail(List<AssetDetail> _assetDetailList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INSERTASSETDETAIL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<AssetDetail>(AssetDetail.class, _assetDetailList)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isEqual(String a, String b) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISEQUAL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a),
                        new org.web3j.abi.datatypes.Utf8String(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<List> pageGetStatusListByPlaceId(String _placeId, String _assetId, BigInteger _currentStatus, BigInteger _begin, BigInteger _end) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAGEGETSTATUSLISTBYPLACEID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_placeId),
                        new org.web3j.abi.datatypes.Utf8String(_assetId),
                        new org.web3j.abi.datatypes.generated.Int256(_currentStatus),
                        new org.web3j.abi.datatypes.generated.Uint256(_begin),
                        new org.web3j.abi.datatypes.generated.Uint256(_end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> update(AssetDetail _assetDetail) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATE,
                Arrays.<Type>asList(_assetDetail),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AssetDetailContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetDetailContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AssetDetailContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetDetailContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AssetDetailContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AssetDetailContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AssetDetailContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AssetDetailContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetDetailContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetDetailContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetDetailContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetDetailContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Getter
    @Setter
    @ToString
    public static class AssetDetail extends DynamicStruct {
        public String assetDetailId;

        public String currentUserAccount;

        public String assetId;

        public String placeId;

        public String beginTime;

        public String endTime;

        public BigInteger currentStatus;

        public BigInteger status;

        public AssetDetail(String assetDetailId, String currentUserAccount, String assetId, String placeId, String beginTime, String endTime, BigInteger currentStatus, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(assetDetailId),new org.web3j.abi.datatypes.Utf8String(currentUserAccount),new org.web3j.abi.datatypes.Utf8String(assetId),new org.web3j.abi.datatypes.Utf8String(placeId),new org.web3j.abi.datatypes.Utf8String(beginTime),new org.web3j.abi.datatypes.Utf8String(endTime),new org.web3j.abi.datatypes.generated.Int256(currentStatus),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.assetDetailId = assetDetailId;
            this.currentUserAccount = currentUserAccount;
            this.assetId = assetId;
            this.placeId = placeId;
            this.beginTime = beginTime;
            this.endTime = endTime;
            this.currentStatus = currentStatus;
            this.status = status;
        }

        public AssetDetail(Utf8String assetDetailId, Utf8String currentUserAccount, Utf8String assetId, Utf8String placeId, Utf8String beginTime, Utf8String endTime, Int256 currentStatus, Uint256 status) {
            super(assetDetailId,currentUserAccount,assetId,placeId,beginTime,endTime,currentStatus,status);
            this.assetDetailId = assetDetailId.getValue();
            this.currentUserAccount = currentUserAccount.getValue();
            this.assetId = assetId.getValue();
            this.placeId = placeId.getValue();
            this.beginTime = beginTime.getValue();
            this.endTime = endTime.getValue();
            this.currentStatus = currentStatus.getValue();
            this.status = status.getValue();
        }
    }

    @Getter
    public static class IsUpdateSuccessEventResponse extends BaseEventResponse {
        public BigInteger code;
    }
}