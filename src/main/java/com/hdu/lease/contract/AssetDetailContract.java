package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class AssetDetailContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b50612318806100296000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063403ad55911610066578063403ad55914610136578063465c410514610166578063487daf02146101965780634cd446ea146101c6578063cd17ba57146101e257610093565b8063054987a5146100985780630811251a146100c85780632e5f4451146100e657806335e43c201461011a575b600080fd5b6100b260048036038101906100ad91906117fc565b610212565b6040516100bf91906118cd565b60405180910390f35b6100d061030e565b6040516100dd91906119d6565b60405180910390f35b61010060048036038101906100fb91906117fc565b61050c565b604051610111959493929190611a07565b60405180910390f35b610134600480360381019061012f9190611b85565b6106f0565b005b610150600480360381019061014b91906117fc565b610830565b60405161015d91906119d6565b60405180910390f35b610180600480360381019061017b9190611bce565b610a69565b60405161018d9190611c61565b60405180910390f35b6101b060048036038101906101ab91906117fc565b610b46565b6040516101bd9190611dc2565b60405180910390f35b6101e060048036038101906101db9190611eca565b610f8e565b005b6101fc60048036038101906101f79190611f13565b61113e565b6040516102099190611dc2565b60405180910390f35b60606001826040516102249190611fab565b908152602001604051809103902060009054906101000a900460ff16156102f6576000826040516102559190611fab565b9081526020016040518091039020600201805461027190611ff1565b80601f016020809104026020016040519081016040528092919081815260200182805461029d90611ff1565b80156102ea5780601f106102bf576101008083540402835291602001916102ea565b820191906000526020600020905b8154815290600101906020018083116102cd57829003601f168201915b50505050509050610309565b6040518060200160405280600081525090505b919050565b6103166115d0565b60006040516103249061206f565b90815260200160405180910390206040518060a001604052908160008201805461034d90611ff1565b80601f016020809104026020016040519081016040528092919081815260200182805461037990611ff1565b80156103c65780601f1061039b576101008083540402835291602001916103c6565b820191906000526020600020905b8154815290600101906020018083116103a957829003601f168201915b505050505081526020016001820180546103df90611ff1565b80601f016020809104026020016040519081016040528092919081815260200182805461040b90611ff1565b80156104585780601f1061042d57610100808354040283529160200191610458565b820191906000526020600020905b81548152906001019060200180831161043b57829003601f168201915b5050505050815260200160028201805461047190611ff1565b80601f016020809104026020016040519081016040528092919081815260200182805461049d90611ff1565b80156104ea5780601f106104bf576101008083540402835291602001916104ea565b820191906000526020600020905b8154815290600101906020018083116104cd57829003601f168201915b5050505050815260200160038201548152602001600482015481525050905090565b60008180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461054590611ff1565b80601f016020809104026020016040519081016040528092919081815260200182805461057190611ff1565b80156105be5780601f10610593576101008083540402835291602001916105be565b820191906000526020600020905b8154815290600101906020018083116105a157829003601f168201915b5050505050908060010180546105d390611ff1565b80601f01602080910402602001604051908101604052809291908181526020018280546105ff90611ff1565b801561064c5780601f106106215761010080835404028352916020019161064c565b820191906000526020600020905b81548152906001019060200180831161062f57829003601f168201915b50505050509080600201805461066190611ff1565b80601f016020809104026020016040519081016040528092919081815260200182805461068d90611ff1565b80156106da5780601f106106af576101008083540402835291602001916106da565b820191906000526020600020905b8154815290600101906020018083116106bd57829003601f168201915b5050505050908060030154908060040154905085565b600181600001516040516107049190611fab565b908152602001604051809103902060009054906101000a900460ff16156107f357806000826000015160405161073a9190611fab565b908152602001604051809103902060008201518160000190805190602001906107649291906115ff565b5060208201518160010190805190602001906107819291906115ff565b50604082015181600201908051906020019061079e9291906115ff565b5060608201518160030155608082015181600401559050507f1f0b7755550dd48676926d868a91257934b9a64d5f852cad45e85274c052c6b060c86040516107e691906120c9565b60405180910390a161082d565b7f1f0b7755550dd48676926d868a91257934b9a64d5f852cad45e85274c052c6b0612711604051610824919061211f565b60405180910390a15b50565b6108386115d0565b6001826040516108489190611fab565b908152602001604051809103902060009054906101000a900460ff1615610a63576000826040516108799190611fab565b90815260200160405180910390206040518060a00160405290816000820180546108a290611ff1565b80601f01602080910402602001604051908101604052809291908181526020018280546108ce90611ff1565b801561091b5780601f106108f05761010080835404028352916020019161091b565b820191906000526020600020905b8154815290600101906020018083116108fe57829003601f168201915b5050505050815260200160018201805461093490611ff1565b80601f016020809104026020016040519081016040528092919081815260200182805461096090611ff1565b80156109ad5780601f10610982576101008083540402835291602001916109ad565b820191906000526020600020905b81548152906001019060200180831161099057829003601f168201915b505050505081526020016002820180546109c690611ff1565b80601f01602080910402602001604051908101604052809291908181526020018280546109f290611ff1565b8015610a3f5780601f10610a1457610100808354040283529160200191610a3f565b820191906000526020600020905b815481529060010190602001808311610a2257829003601f168201915b50505050508152602001600382015481526020016004820154815250509050610a64565b5b919050565b60008083905060008390508051825114610a8857600092505050610b40565b60005b8251811015610b3857818181518110610aa757610aa661213a565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838281518110610ae757610ae661213a565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610b255760009350505050610b40565b8080610b3090612198565b915050610a8b565b506001925050505b92915050565b60606000603267ffffffffffffffff811115610b6557610b646116d1565b5b604051908082528060200260200182016040528015610b9e57816020015b610b8b6115d0565b815260200190600190039081610b835790505b5090506000805b600354811015610ed257610c7f600060028381548110610bc857610bc761213a565b5b90600052602060002001604051610bdf9190612275565b90815260200160405180910390206002018054610bfb90611ff1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2790611ff1565b8015610c745780601f10610c4957610100808354040283529160200191610c74565b820191906000526020600020905b815481529060010190602001808311610c5757829003601f168201915b505050505086610a69565b15610ebf57600060028281548110610c9a57610c9961213a565b5b90600052602060002001604051610cb19190612275565b90815260200160405180910390206040518060a0016040529081600082018054610cda90611ff1565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0690611ff1565b8015610d535780601f10610d2857610100808354040283529160200191610d53565b820191906000526020600020905b815481529060010190602001808311610d3657829003601f168201915b50505050508152602001600182018054610d6c90611ff1565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9890611ff1565b8015610de55780601f10610dba57610100808354040283529160200191610de5565b820191906000526020600020905b815481529060010190602001808311610dc857829003601f168201915b50505050508152602001600282018054610dfe90611ff1565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2a90611ff1565b8015610e775780601f10610e4c57610100808354040283529160200191610e77565b820191906000526020600020905b815481529060010190602001808311610e5a57829003601f168201915b5050505050815260200160038201548152602001600482015481525050838380610ea090612198565b945081518110610eb357610eb261213a565b5b60200260200101819052505b8080610eca90612198565b915050610ba5565b5060008167ffffffffffffffff811115610eef57610eee6116d1565b5b604051908082528060200260200182016040528015610f2857816020015b610f156115d0565b815260200190600190039081610f0d5790505b50905060005b82811015610f8257838181518110610f4957610f4861213a565b5b6020026020010151828281518110610f6457610f6361213a565b5b60200260200101819052508080610f7a90612198565b915050610f2e565b50809350505050919050565b606060005b825181101561113957828181518110610faf57610fae61213a565b5b6020026020010151600001519150600182604051610fcd9190611fab565b908152602001604051809103902060009054906101000a900460ff166111205782818151811061100057610fff61213a565b5b60200260200101516000836040516110189190611fab565b908152602001604051809103902060008201518160000190805190602001906110429291906115ff565b50602082015181600101908051906020019061105f9291906115ff565b50604082015181600201908051906020019061107c9291906115ff565b506060820151816003015560808201518160040155905050600180836040516110a59190611fab565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506002829080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906111059291906115ff565b506001600354611115919061228c565b600381905550611125565b611126565b5b808061113190612198565b915050610f93565b505050565b60606000603267ffffffffffffffff81111561115d5761115c6116d1565b5b60405190808252806020026020018201604052801561119657816020015b6111836115d0565b81526020019060019003908161117b5790505b5090506000805b600354811015611513576112776000600283815481106111c0576111bf61213a565b5b906000526020600020016040516111d79190612275565b908152602001604051809103902060020180546111f390611ff1565b80601f016020809104026020016040519081016040528092919081815260200182805461121f90611ff1565b801561126c5780601f106112415761010080835404028352916020019161126c565b820191906000526020600020905b81548152906001019060200180831161124f57829003601f168201915b505050505087610a69565b80156112c05750846000600283815481106112955761129461213a565b5b906000526020600020016040516112ac9190612275565b908152602001604051809103902060030154145b15611500576000600282815481106112db576112da61213a565b5b906000526020600020016040516112f29190612275565b90815260200160405180910390206040518060a001604052908160008201805461131b90611ff1565b80601f016020809104026020016040519081016040528092919081815260200182805461134790611ff1565b80156113945780601f1061136957610100808354040283529160200191611394565b820191906000526020600020905b81548152906001019060200180831161137757829003601f168201915b505050505081526020016001820180546113ad90611ff1565b80601f01602080910402602001604051908101604052809291908181526020018280546113d990611ff1565b80156114265780601f106113fb57610100808354040283529160200191611426565b820191906000526020600020905b81548152906001019060200180831161140957829003601f168201915b5050505050815260200160028201805461143f90611ff1565b80601f016020809104026020016040519081016040528092919081815260200182805461146b90611ff1565b80156114b85780601f1061148d576101008083540402835291602001916114b8565b820191906000526020600020905b81548152906001019060200180831161149b57829003601f168201915b50505050508152602001600382015481526020016004820154815250508383806114e190612198565b9450815181106114f4576114f361213a565b5b60200260200101819052505b808061150b90612198565b91505061119d565b5060008167ffffffffffffffff8111156115305761152f6116d1565b5b60405190808252806020026020018201604052801561156957816020015b6115566115d0565b81526020019060019003908161154e5790505b50905060005b828110156115c35783818151811061158a5761158961213a565b5b60200260200101518282815181106115a5576115a461213a565b5b602002602001018190525080806115bb90612198565b91505061156f565b5080935050505092915050565b6040518060a0016040528060608152602001606081526020016060815260200160008152602001600081525090565b82805461160b90611ff1565b90600052602060002090601f01602090048101928261162d5760008555611674565b82601f1061164657805160ff1916838001178555611674565b82800160010185558215611674579182015b82811115611673578251825591602001919060010190611658565b5b5090506116819190611685565b5090565b5b8082111561169e576000816000905550600101611686565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611709826116c0565b810181811067ffffffffffffffff82111715611728576117276116d1565b5b80604052505050565b600061173b6116a2565b90506117478282611700565b919050565b600067ffffffffffffffff821115611767576117666116d1565b5b611770826116c0565b9050602081019050919050565b82818337600083830152505050565b600061179f61179a8461174c565b611731565b9050828152602081018484840111156117bb576117ba6116bb565b5b6117c684828561177d565b509392505050565b600082601f8301126117e3576117e26116b6565b5b81356117f384826020860161178c565b91505092915050565b600060208284031215611812576118116116ac565b5b600082013567ffffffffffffffff8111156118305761182f6116b1565b5b61183c848285016117ce565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561187f578082015181840152602081019050611864565b8381111561188e576000848401525b50505050565b600061189f82611845565b6118a98185611850565b93506118b9818560208601611861565b6118c2816116c0565b840191505092915050565b600060208201905081810360008301526118e78184611894565b905092915050565b600082825260208201905092915050565b600061190b82611845565b61191581856118ef565b9350611925818560208601611861565b61192e816116c0565b840191505092915050565b6000819050919050565b61194c81611939565b82525050565b600060a083016000830151848203600086015261196f8282611900565b915050602083015184820360208601526119898282611900565b915050604083015184820360408601526119a38282611900565b91505060608301516119b86060860182611943565b5060808301516119cb6080860182611943565b508091505092915050565b600060208201905081810360008301526119f08184611952565b905092915050565b611a0181611939565b82525050565b600060a0820190508181036000830152611a218188611894565b90508181036020830152611a358187611894565b90508181036040830152611a498186611894565b9050611a5860608301856119f8565b611a6560808301846119f8565b9695505050505050565b600080fd5b600080fd5b611a8281611939565b8114611a8d57600080fd5b50565b600081359050611a9f81611a79565b92915050565b600060a08284031215611abb57611aba611a6f565b5b611ac560a0611731565b9050600082013567ffffffffffffffff811115611ae557611ae4611a74565b5b611af1848285016117ce565b600083015250602082013567ffffffffffffffff811115611b1557611b14611a74565b5b611b21848285016117ce565b602083015250604082013567ffffffffffffffff811115611b4557611b44611a74565b5b611b51848285016117ce565b6040830152506060611b6584828501611a90565b6060830152506080611b7984828501611a90565b60808301525092915050565b600060208284031215611b9b57611b9a6116ac565b5b600082013567ffffffffffffffff811115611bb957611bb86116b1565b5b611bc584828501611aa5565b91505092915050565b60008060408385031215611be557611be46116ac565b5b600083013567ffffffffffffffff811115611c0357611c026116b1565b5b611c0f858286016117ce565b925050602083013567ffffffffffffffff811115611c3057611c2f6116b1565b5b611c3c858286016117ce565b9150509250929050565b60008115159050919050565b611c5b81611c46565b82525050565b6000602082019050611c766000830184611c52565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060a0830160008301518482036000860152611cc58282611900565b91505060208301518482036020860152611cdf8282611900565b91505060408301518482036040860152611cf98282611900565b9150506060830151611d0e6060860182611943565b506080830151611d216080860182611943565b508091505092915050565b6000611d388383611ca8565b905092915050565b6000602082019050919050565b6000611d5882611c7c565b611d628185611c87565b935083602082028501611d7485611c98565b8060005b85811015611db05784840389528151611d918582611d2c565b9450611d9c83611d40565b925060208a01995050600181019050611d78565b50829750879550505050505092915050565b60006020820190508181036000830152611ddc8184611d4d565b905092915050565b600067ffffffffffffffff821115611dff57611dfe6116d1565b5b602082029050602081019050919050565b600080fd5b6000611e28611e2384611de4565b611731565b90508083825260208201905060208402830185811115611e4b57611e4a611e10565b5b835b81811015611e9257803567ffffffffffffffff811115611e7057611e6f6116b6565b5b808601611e7d8982611aa5565b85526020850194505050602081019050611e4d565b5050509392505050565b600082601f830112611eb157611eb06116b6565b5b8135611ec1848260208601611e15565b91505092915050565b600060208284031215611ee057611edf6116ac565b5b600082013567ffffffffffffffff811115611efe57611efd6116b1565b5b611f0a84828501611e9c565b91505092915050565b60008060408385031215611f2a57611f296116ac565b5b600083013567ffffffffffffffff811115611f4857611f476116b1565b5b611f54858286016117ce565b9250506020611f6585828601611a90565b9150509250929050565b600081905092915050565b6000611f8582611845565b611f8f8185611f6f565b9350611f9f818560208601611861565b80840191505092915050565b6000611fb78284611f7a565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061200957607f821691505b6020821081141561201d5761201c611fc2565b5b50919050565b7f3100000000000000000000000000000000000000000000000000000000000000600082015250565b6000612059600183611f6f565b915061206482612023565b600182019050919050565b600061207a8261204c565b9150819050919050565b6000819050919050565b6000819050919050565b60006120b36120ae6120a984612084565b61208e565b611939565b9050919050565b6120c381612098565b82525050565b60006020820190506120de60008301846120ba565b92915050565b6000819050919050565b60006121096121046120ff846120e4565b61208e565b611939565b9050919050565b612119816120ee565b82525050565b60006020820190506121346000830184612110565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121a382611939565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156121d6576121d5612169565b5b600182019050919050565b60008190508160005260206000209050919050565b6000815461220381611ff1565b61220d8186611f6f565b9450600182166000811461222857600181146122395761226c565b60ff1983168652818601935061226c565b612242856121e1565b60005b8381101561226457815481890152600182019150602081019050612245565b838801955050505b50505092915050565b600061228182846121f6565b915081905092915050565b600061229782611939565b91506122a283611939565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122d7576122d6612169565b5b82820190509291505056fea26469706673582212201c239483f8c154f9818ba96d16b962a09cee99f996f1b72c3936aef819dff11464736f6c634300080a0033";

    public static final String FUNC_ASSETDETAILS = "assetDetails";

    public static final String FUNC_GETASSETDETAIL = "getAssetDetail";

    public static final String FUNC_GETASSETDETAILBYASSETDETAILID = "getAssetDetailByAssetDetailId";

    public static final String FUNC_GETASSETIDBYASSETDETAILID = "getAssetIdByAssetDetailId";

    public static final String FUNC_GETLIST = "getList";

    public static final String FUNC_GETLISTBYSTATUS = "getListByStatus";

    public static final String FUNC_INSERTASSETDETAIL = "insertAssetDetail";

    public static final String FUNC_ISEQUAL = "isEqual";

    public static final String FUNC_UPDATE = "update";

    public static final Event ISUPDATESUCCESS_EVENT = new Event("isUpdateSuccess",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected AssetDetailContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AssetDetailContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AssetDetailContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AssetDetailContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<IsUpdateSuccessEventResponse> getIsUpdateSuccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ISUPDATESUCCESS_EVENT, transactionReceipt);
        ArrayList<IsUpdateSuccessEventResponse> responses = new ArrayList<IsUpdateSuccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IsUpdateSuccessEventResponse typedResponse = new IsUpdateSuccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IsUpdateSuccessEventResponse> isUpdateSuccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IsUpdateSuccessEventResponse>() {
            @Override
            public IsUpdateSuccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ISUPDATESUCCESS_EVENT, log);
                IsUpdateSuccessEventResponse typedResponse = new IsUpdateSuccessEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IsUpdateSuccessEventResponse> isUpdateSuccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ISUPDATESUCCESS_EVENT));
        return isUpdateSuccessEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, BigInteger, BigInteger>> assetDetails(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETDETAILS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<AssetDetail> getAssetDetail() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETDETAIL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<AssetDetail>() {}));
        return executeRemoteCallSingleValueReturn(function, AssetDetail.class);
    }

    public RemoteFunctionCall<AssetDetail> getAssetDetailByAssetDetailId(String _assetDetailId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETDETAILBYASSETDETAILID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetDetailId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<AssetDetail>() {}));
        return executeRemoteCallSingleValueReturn(function, AssetDetail.class);
    }

    public RemoteFunctionCall<String> getAssetIdByAssetDetailId(String _assetDetailId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETIDBYASSETDETAILID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetDetailId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getList(String _assetId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getListByStatus(String _assetId, BigInteger _currentStatus) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYSTATUS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId),
                        new org.web3j.abi.datatypes.generated.Uint256(_currentStatus)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AssetDetail>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> insertAssetDetail(List<AssetDetail> _assetDetailList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INSERTASSETDETAIL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<AssetDetail>(AssetDetail.class, _assetDetailList)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isEqual(String a, String b) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISEQUAL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a),
                        new org.web3j.abi.datatypes.Utf8String(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> update(AssetDetail _assetDetail) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATE,
                Arrays.<Type>asList(_assetDetail),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AssetDetailContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetDetailContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AssetDetailContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetDetailContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AssetDetailContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AssetDetailContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AssetDetailContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AssetDetailContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetDetailContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetDetailContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetDetailContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetDetailContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetDetailContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Getter
    @Setter
    @ToString
    public static class AssetDetail extends DynamicStruct {
        public String assetDetailId;

        public String currentUserAccount;

        public String assetId;

        public BigInteger currentStatus;

        public BigInteger status;

        public AssetDetail(String assetDetailId, String currentUserAccount, String assetId, BigInteger currentStatus, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(assetDetailId),new org.web3j.abi.datatypes.Utf8String(currentUserAccount),new org.web3j.abi.datatypes.Utf8String(assetId),new org.web3j.abi.datatypes.generated.Uint256(currentStatus),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.assetDetailId = assetDetailId;
            this.currentUserAccount = currentUserAccount;
            this.assetId = assetId;
            this.currentStatus = currentStatus;
            this.status = status;
        }

        public AssetDetail(Utf8String assetDetailId, Utf8String currentUserAccount, Utf8String assetId, Uint256 currentStatus, Uint256 status) {
            super(assetDetailId,currentUserAccount,assetId,currentStatus,status);
            this.assetDetailId = assetDetailId.getValue();
            this.currentUserAccount = currentUserAccount.getValue();
            this.assetId = assetId.getValue();
            this.currentStatus = currentStatus.getValue();
            this.status = status.getValue();
        }
    }

    public static class IsUpdateSuccessEventResponse extends BaseEventResponse {
        public BigInteger code;
    }
}