package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class AssetContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b506124f5806100296000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806389d81dd51161006657806389d81dd5146101855780639f9d06a9146101b5578063ce34b829146101d3578063dea809d2146101ef578063f3bfddb71461020b5761009e565b8063232ad707146100a35780632e3e1924146100d35780635fd1c06f1461010357806362b2ab3914610133578063859362281461014f575b600080fd5b6100bd60048036038101906100b89190611706565b61023b565b6040516100ca919061176a565b60405180910390f35b6100ed60048036038101906100e891906117e3565b610271565b6040516100fa9190611a5b565b60405180910390f35b61011d60048036038101906101189190611aa9565b6105ca565b60405161012a9190611b20565b60405180910390f35b61014d60048036038101906101489190611c80565b610676565b005b61016960048036038101906101649190611706565b6107ee565b60405161017c9796959493929190611cd8565b60405180910390f35b61019f600480360381019061019a91906117e3565b6109eb565b6040516101ac9190611e06565b60405180910390f35b6101bd610d1f565b6040516101ca9190611a5b565b60405180910390f35b6101ed60048036038101906101e89190611e28565b610ff6565b005b61020960048036038101906102049190611c80565b6110e7565b005b61022560048036038101906102209190611706565b61126c565b6040516102329190611e06565b60405180910390f35b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b606060008373ffffffffffffffffffffffffffffffffffffffff1663e31bcfca846040518263ffffffff1660e01b81526004016102ae9190611b20565b600060405180830381865afa1580156102cb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102f49190611ff6565b90506000815167ffffffffffffffff811115610313576103126115db565b5b60405190808252806020026020018201604052801561034c57816020015b6103396114ca565b8152602001906001900390816103315790505b50905060005b82518110156105be5760008382815181106103705761036f61203f565b5b602002602001015160405161038591906120aa565b90815260200160405180910390206040518060e00160405290816000820180546103ae906120f0565b80601f01602080910402602001604051908101604052809291908181526020018280546103da906120f0565b80156104275780601f106103fc57610100808354040283529160200191610427565b820191906000526020600020905b81548152906001019060200180831161040a57829003601f168201915b50505050508152602001600182018054610440906120f0565b80601f016020809104026020016040519081016040528092919081815260200182805461046c906120f0565b80156104b95780601f1061048e576101008083540402835291602001916104b9565b820191906000526020600020905b81548152906001019060200180831161049c57829003601f168201915b505050505081526020016002820160009054906101000a900460ff161515151581526020016003820180546104ed906120f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610519906120f0565b80156105665780601f1061053b57610100808354040283529160200191610566565b820191906000526020600020905b81548152906001019060200180831161054957829003601f168201915b5050505050815260200160048201548152602001600582015481526020016006820154815250508282815181106105a05761059f61203f565b5b602002602001018190525080806105b690612151565b915050610352565b50809250505092915050565b600281815481106105da57600080fd5b9060005260206000200160009150905080546105f5906120f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610621906120f0565b801561066e5780601f106106435761010080835404028352916020019161066e565b820191906000526020600020905b81548152906001019060200180831161065157829003601f168201915b505050505081565b60006001826000015160405161068c91906120aa565b908152602001604051809103902060009054906101000a900460ff161561076d5781600083600001516040516106c291906120aa565b908152602001604051809103902060008201518160000190805190602001906106ec929190611509565b506020820151816001019080519060200190610709929190611509565b5060408201518160020160006101000a81548160ff0219169083151502179055506060820151816003019080519060200190610746929190611509565b506080820151816004015560a0820151816005015560c08201518160060155905050600190505b80156107b0577fd84c42cb6893025fe452496bca57d0a76c942999c2ce4f4fa29bd862aa46923360c86040516107a391906121df565b60405180910390a16107ea565b7fd84c42cb6893025fe452496bca57d0a76c942999c2ce4f4fa29bd862aa4692336127116040516107e19190612235565b60405180910390a15b5050565b600081805160208101820180518482526020830160208501208183528095505050505050600091509050806000018054610827906120f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610853906120f0565b80156108a05780601f10610875576101008083540402835291602001916108a0565b820191906000526020600020905b81548152906001019060200180831161088357829003601f168201915b5050505050908060010180546108b5906120f0565b80601f01602080910402602001604051908101604052809291908181526020018280546108e1906120f0565b801561092e5780601f106109035761010080835404028352916020019161092e565b820191906000526020600020905b81548152906001019060200180831161091157829003601f168201915b5050505050908060020160009054906101000a900460ff1690806003018054610956906120f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610982906120f0565b80156109cf5780601f106109a4576101008083540402835291602001916109cf565b820191906000526020600020905b8154815290600101906020018083116109b257829003601f168201915b5050505050908060040154908060050154908060060154905087565b6109f36114ca565b60008373ffffffffffffffffffffffffffffffffffffffff1663054987a5846040518263ffffffff1660e01b8152600401610a2e9190611b20565b600060405180830381865afa158015610a4b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a749190612250565b90506000819050600081600081518110610a9157610a9061203f565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610d1657600182604051610ad391906120aa565b908152602001604051809103902060009054906101000a900460ff1615610d1557600082604051610b0491906120aa565b90815260200160405180910390206040518060e0016040529081600082018054610b2d906120f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b59906120f0565b8015610ba65780601f10610b7b57610100808354040283529160200191610ba6565b820191906000526020600020905b815481529060010190602001808311610b8957829003601f168201915b50505050508152602001600182018054610bbf906120f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610beb906120f0565b8015610c385780601f10610c0d57610100808354040283529160200191610c38565b820191906000526020600020905b815481529060010190602001808311610c1b57829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382018054610c6c906120f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610c98906120f0565b8015610ce55780601f10610cba57610100808354040283529160200191610ce5565b820191906000526020600020905b815481529060010190602001808311610cc857829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505092505050610d19565b5b50505b92915050565b6060600060035467ffffffffffffffff811115610d3f57610d3e6115db565b5b604051908082528060200260200182016040528015610d7857816020015b610d656114ca565b815260200190600190039081610d5d5790505b50905060005b600354811015610fee57600060028281548110610d9e57610d9d61203f565b5b90600052602060002001604051610db5919061232d565b90815260200160405180910390206040518060e0016040529081600082018054610dde906120f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0a906120f0565b8015610e575780601f10610e2c57610100808354040283529160200191610e57565b820191906000526020600020905b815481529060010190602001808311610e3a57829003601f168201915b50505050508152602001600182018054610e70906120f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9c906120f0565b8015610ee95780601f10610ebe57610100808354040283529160200191610ee9565b820191906000526020600020905b815481529060010190602001808311610ecc57829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382018054610f1d906120f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610f49906120f0565b8015610f965780601f10610f6b57610100808354040283529160200191610f96565b820191906000526020600020905b815481529060010190602001808311610f7957829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682015481525050828281518110610fd057610fcf61203f565b5b60200260200101819052508080610fe690612151565b915050610d7e565b508091505090565b600060018360405161100891906120aa565b908152602001604051809103902060009054906101000a900460ff161561106457600190508160008460405161103e91906120aa565b90815260200160405180910390206003019080519060200190611062929190611509565b505b80156110a8577f39859739613dd11b0e780ae98a04d89e5c2230793b95ff01e96432f26036753661271060405161109b91906123f1565b60405180910390a16110e2565b7f39859739613dd11b0e780ae98a04d89e5c2230793b95ff01e96432f2603675366127116040516110d99190612491565b60405180910390a15b505050565b600181600001516040516110fb91906120aa565b908152602001604051809103902060009054906101000a900460ff1661126957806000826000015160405161113091906120aa565b9081526020016040518091039020600082015181600001908051906020019061115a929190611509565b506020820151816001019080519060200190611177929190611509565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160030190805190602001906111b4929190611509565b506080820151816004015560a0820151816005015560c0820151816006015590505060018082600001516040516111eb91906120aa565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506002816000015190806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061124f929190611509565b506003600081548092919061126390612151565b91905055505b50565b6112746114ca565b60018260405161128491906120aa565b908152602001604051809103902060009054906101000a900460ff16156114c4576000826040516112b591906120aa565b90815260200160405180910390206040518060e00160405290816000820180546112de906120f0565b80601f016020809104026020016040519081016040528092919081815260200182805461130a906120f0565b80156113575780601f1061132c57610100808354040283529160200191611357565b820191906000526020600020905b81548152906001019060200180831161133a57829003601f168201915b50505050508152602001600182018054611370906120f0565b80601f016020809104026020016040519081016040528092919081815260200182805461139c906120f0565b80156113e95780601f106113be576101008083540402835291602001916113e9565b820191906000526020600020905b8154815290600101906020018083116113cc57829003601f168201915b505050505081526020016002820160009054906101000a900460ff1615151515815260200160038201805461141d906120f0565b80601f0160208091040260200160405190810160405280929190818152602001828054611449906120f0565b80156114965780601f1061146b57610100808354040283529160200191611496565b820191906000526020600020905b81548152906001019060200180831161147957829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505090506114c5565b5b919050565b6040518060e001604052806060815260200160608152602001600015158152602001606081526020016000815260200160008152602001600081525090565b828054611515906120f0565b90600052602060002090601f016020900481019282611537576000855561157e565b82601f1061155057805160ff191683800117855561157e565b8280016001018555821561157e579182015b8281111561157d578251825591602001919060010190611562565b5b50905061158b919061158f565b5090565b5b808211156115a8576000816000905550600101611590565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611613826115ca565b810181811067ffffffffffffffff82111715611632576116316115db565b5b80604052505050565b60006116456115ac565b9050611651828261160a565b919050565b600067ffffffffffffffff821115611671576116706115db565b5b61167a826115ca565b9050602081019050919050565b82818337600083830152505050565b60006116a96116a484611656565b61163b565b9050828152602081018484840111156116c5576116c46115c5565b5b6116d0848285611687565b509392505050565b600082601f8301126116ed576116ec6115c0565b5b81356116fd848260208601611696565b91505092915050565b60006020828403121561171c5761171b6115b6565b5b600082013567ffffffffffffffff81111561173a576117396115bb565b5b611746848285016116d8565b91505092915050565b60008115159050919050565b6117648161174f565b82525050565b600060208201905061177f600083018461175b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117b082611785565b9050919050565b6117c0816117a5565b81146117cb57600080fd5b50565b6000813590506117dd816117b7565b92915050565b600080604083850312156117fa576117f96115b6565b5b6000611808858286016117ce565b925050602083013567ffffffffffffffff811115611829576118286115bb565b5b611835858286016116d8565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156118a557808201518184015260208101905061188a565b838111156118b4576000848401525b50505050565b60006118c58261186b565b6118cf8185611876565b93506118df818560208601611887565b6118e8816115ca565b840191505092915050565b6118fc8161174f565b82525050565b6000819050919050565b61191581611902565b82525050565b600060e083016000830151848203600086015261193882826118ba565b9150506020830151848203602086015261195282826118ba565b915050604083015161196760408601826118f3565b506060830151848203606086015261197f82826118ba565b9150506080830151611994608086018261190c565b5060a08301516119a760a086018261190c565b5060c08301516119ba60c086018261190c565b508091505092915050565b60006119d1838361191b565b905092915050565b6000602082019050919050565b60006119f18261183f565b6119fb818561184a565b935083602082028501611a0d8561185b565b8060005b85811015611a495784840389528151611a2a85826119c5565b9450611a35836119d9565b925060208a01995050600181019050611a11565b50829750879550505050505092915050565b60006020820190508181036000830152611a7581846119e6565b905092915050565b611a8681611902565b8114611a9157600080fd5b50565b600081359050611aa381611a7d565b92915050565b600060208284031215611abf57611abe6115b6565b5b6000611acd84828501611a94565b91505092915050565b600082825260208201905092915050565b6000611af28261186b565b611afc8185611ad6565b9350611b0c818560208601611887565b611b15816115ca565b840191505092915050565b60006020820190508181036000830152611b3a8184611ae7565b905092915050565b600080fd5b600080fd5b611b558161174f565b8114611b6057600080fd5b50565b600081359050611b7281611b4c565b92915050565b600060e08284031215611b8e57611b8d611b42565b5b611b9860e061163b565b9050600082013567ffffffffffffffff811115611bb857611bb7611b47565b5b611bc4848285016116d8565b600083015250602082013567ffffffffffffffff811115611be857611be7611b47565b5b611bf4848285016116d8565b6020830152506040611c0884828501611b63565b604083015250606082013567ffffffffffffffff811115611c2c57611c2b611b47565b5b611c38848285016116d8565b6060830152506080611c4c84828501611a94565b60808301525060a0611c6084828501611a94565b60a08301525060c0611c7484828501611a94565b60c08301525092915050565b600060208284031215611c9657611c956115b6565b5b600082013567ffffffffffffffff811115611cb457611cb36115bb565b5b611cc084828501611b78565b91505092915050565b611cd281611902565b82525050565b600060e0820190508181036000830152611cf2818a611ae7565b90508181036020830152611d068189611ae7565b9050611d15604083018861175b565b8181036060830152611d278187611ae7565b9050611d366080830186611cc9565b611d4360a0830185611cc9565b611d5060c0830184611cc9565b98975050505050505050565b600060e0830160008301518482036000860152611d7982826118ba565b91505060208301518482036020860152611d9382826118ba565b9150506040830151611da860408601826118f3565b5060608301518482036060860152611dc082826118ba565b9150506080830151611dd5608086018261190c565b5060a0830151611de860a086018261190c565b5060c0830151611dfb60c086018261190c565b508091505092915050565b60006020820190508181036000830152611e208184611d5c565b905092915050565b60008060408385031215611e3f57611e3e6115b6565b5b600083013567ffffffffffffffff811115611e5d57611e5c6115bb565b5b611e69858286016116d8565b925050602083013567ffffffffffffffff811115611e8a57611e896115bb565b5b611e96858286016116d8565b9150509250929050565b600067ffffffffffffffff821115611ebb57611eba6115db565b5b602082029050602081019050919050565b600080fd5b6000611ee4611edf84611656565b61163b565b905082815260208101848484011115611f0057611eff6115c5565b5b611f0b848285611887565b509392505050565b600082601f830112611f2857611f276115c0565b5b8151611f38848260208601611ed1565b91505092915050565b6000611f54611f4f84611ea0565b61163b565b90508083825260208201905060208402830185811115611f7757611f76611ecc565b5b835b81811015611fbe57805167ffffffffffffffff811115611f9c57611f9b6115c0565b5b808601611fa98982611f13565b85526020850194505050602081019050611f79565b5050509392505050565b600082601f830112611fdd57611fdc6115c0565b5b8151611fed848260208601611f41565b91505092915050565b60006020828403121561200c5761200b6115b6565b5b600082015167ffffffffffffffff81111561202a576120296115bb565b5b61203684828501611fc8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b60006120848261186b565b61208e818561206e565b935061209e818560208601611887565b80840191505092915050565b60006120b68284612079565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061210857607f821691505b6020821081141561211c5761211b6120c1565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061215c82611902565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561218f5761218e612122565b5b600182019050919050565b6000819050919050565b6000819050919050565b60006121c96121c46121bf8461219a565b6121a4565b611902565b9050919050565b6121d9816121ae565b82525050565b60006020820190506121f460008301846121d0565b92915050565b6000819050919050565b600061221f61221a612215846121fa565b6121a4565b611902565b9050919050565b61222f81612204565b82525050565b600060208201905061224a6000830184612226565b92915050565b600060208284031215612266576122656115b6565b5b600082015167ffffffffffffffff811115612284576122836115bb565b5b61229084828501611f13565b91505092915050565b60008190508160005260206000209050919050565b600081546122bb816120f0565b6122c5818661206e565b945060018216600081146122e057600181146122f157612324565b60ff19831686528186019350612324565b6122fa85612299565b60005b8381101561231c578154818901526001820191506020810190506122fd565b838801955050505b50505092915050565b600061233982846122ae565b915081905092915050565b7f6d6f64696679204173736574277320706963747572652055726c20737563636560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006123a0602283611ad6565b91506123ab82612344565b604082019050919050565b6000819050919050565b60006123db6123d66123d1846123b6565b6121a4565b611902565b9050919050565b6123eb816123c0565b82525050565b6000604082019050818103600083015261240a81612393565b905061241960208301846123e2565b92915050565b7f6d6f64696679206173736574277320706963747572652055726c206661696c6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b600061247b602183611ad6565b91506124868261241f565b604082019050919050565b600060408201905081810360008301526124aa8161246e565b90506124b96020830184612226565b9291505056fea26469706673582212204d29ca144c94a2f9e72a0e2b14358e945acd2aa2b40546eaa3473aa28403800264736f6c634300080a0033";

    public static final String FUNC_ASSETINSERTED = "assetInserted";

    public static final String FUNC_ASSETKEY = "assetKey";

    public static final String FUNC_ASSETS = "assets";

    public static final String FUNC_CREATEASSET = "createAsset";

    public static final String FUNC_GETALLLIST = "getAllList";

    public static final String FUNC_GETASSETBYASSETDETAILID = "getAssetByAssetDetailId";

    public static final String FUNC_GETASSETLISTPLACEID = "getAssetListPlaceId";

    public static final String FUNC_GETBYID = "getById";

    public static final String FUNC_MODIFYPICTUREURL = "modifyPictureUrl";

    public static final String FUNC_UPDATE = "update";

    public static final Event MODIFIERPICURLEVENT_EVENT = new Event("modifierPicUrlEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATEEVENT_EVENT = new Event("updateEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected AssetContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AssetContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AssetContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AssetContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ModifierPicUrlEventEventResponse> getModifierPicUrlEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MODIFIERPICURLEVENT_EVENT, transactionReceipt);
        ArrayList<ModifierPicUrlEventEventResponse> responses = new ArrayList<ModifierPicUrlEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ModifierPicUrlEventEventResponse typedResponse = new ModifierPicUrlEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ModifierPicUrlEventEventResponse> modifierPicUrlEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ModifierPicUrlEventEventResponse>() {
            @Override
            public ModifierPicUrlEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MODIFIERPICURLEVENT_EVENT, log);
                ModifierPicUrlEventEventResponse typedResponse = new ModifierPicUrlEventEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ModifierPicUrlEventEventResponse> modifierPicUrlEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MODIFIERPICURLEVENT_EVENT));
        return modifierPicUrlEventEventFlowable(filter);
    }

    public List<UpdateEventEventResponse> getUpdateEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEEVENT_EVENT, transactionReceipt);
        ArrayList<UpdateEventEventResponse> responses = new ArrayList<UpdateEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateEventEventResponse typedResponse = new UpdateEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateEventEventResponse> updateEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdateEventEventResponse>() {
            @Override
            public UpdateEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEEVENT_EVENT, log);
                UpdateEventEventResponse typedResponse = new UpdateEventEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateEventEventResponse> updateEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEEVENT_EVENT));
        return updateEventEventFlowable(filter);
    }

    public RemoteFunctionCall<Boolean> assetInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> assetKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger>> assets(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (Boolean) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> createAsset(Asset _asset) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEASSET,
                Arrays.<Type>asList(_asset),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAllList() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALLLIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Asset>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Asset> getAssetByAssetDetailId(String _assetDetailContract, String _assetDetailId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETBYASSETDETAILID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _assetDetailContract),
                        new org.web3j.abi.datatypes.Utf8String(_assetDetailId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Asset>() {}));
        return executeRemoteCallSingleValueReturn(function, Asset.class);
    }

    public RemoteFunctionCall<List> getAssetListPlaceId(String _placeAssetContract, String _placeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETLISTPLACEID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _placeAssetContract),
                        new org.web3j.abi.datatypes.Utf8String(_placeId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Asset>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Asset> getById(String _assetId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBYID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Asset>() {}));
        return executeRemoteCallSingleValueReturn(function, Asset.class);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyPictureUrl(String _assetId, String _pictureUrl) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYPICTUREURL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId),
                        new org.web3j.abi.datatypes.Utf8String(_pictureUrl)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> update(Asset _asset) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATE,
                Arrays.<Type>asList(_asset),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AssetContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AssetContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AssetContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AssetContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AssetContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AssetContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AssetContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<AssetContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Getter
    @Setter
    @ToString
    public static class Asset extends DynamicStruct {
        public String assetId;

        public String assetName;

        public Boolean isApply;

        public String picUrl;

        public BigInteger price;

        public BigInteger count;

        public BigInteger status;

        public Asset(String assetId, String assetName, Boolean isApply, String picUrl, BigInteger price, BigInteger count, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(assetId),new org.web3j.abi.datatypes.Utf8String(assetName),new org.web3j.abi.datatypes.Bool(isApply),new org.web3j.abi.datatypes.Utf8String(picUrl),new org.web3j.abi.datatypes.generated.Uint256(price),new org.web3j.abi.datatypes.generated.Uint256(count),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.assetId = assetId;
            this.assetName = assetName;
            this.isApply = isApply;
            this.picUrl = picUrl;
            this.price = price;
            this.count = count;
            this.status = status;
        }

        public Asset(Utf8String assetId, Utf8String assetName, Bool isApply, Utf8String picUrl, Uint256 price, Uint256 count, Uint256 status) {
            super(assetId,assetName,isApply,picUrl,price,count,status);
            this.assetId = assetId.getValue();
            this.assetName = assetName.getValue();
            this.isApply = isApply.getValue();
            this.picUrl = picUrl.getValue();
            this.price = price.getValue();
            this.count = count.getValue();
            this.status = status.getValue();
        }
    }

    @Getter
    public static class ModifierPicUrlEventEventResponse extends BaseEventResponse {
        public String message;

        public BigInteger value;
    }

    @Getter
    public static class UpdateEventEventResponse extends BaseEventResponse {
        public BigInteger code;
    }
}
