package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class AssetContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b50611ca1806100296000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063859362281161005b578063859362281461011257806389d81dd514610148578063ce34b82914610178578063dea809d2146101945761007d565b8063232ad707146100825780632e3e1924146100b25780635fd1c06f146100e2575b600080fd5b61009c60048036038101906100979190610fce565b6101b0565b6040516100a99190611032565b60405180910390f35b6100cc60048036038101906100c791906110ab565b6101e6565b6040516100d99190611323565b60405180910390f35b6100fc60048036038101906100f79190611371565b61053f565b60405161010991906113e8565b60405180910390f35b61012c60048036038101906101279190610fce565b6105eb565b60405161013f9796959493929190611419565b60405180910390f35b610162600480360381019061015d91906110ab565b6107e8565b60405161016f9190611547565b60405180910390f35b610192600480360381019061018d9190611569565b610b1c565b005b6101ae60048036038101906101a9919061171f565b610c0d565b005b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b606060008373ffffffffffffffffffffffffffffffffffffffff1663e31bcfca846040518263ffffffff1660e01b815260040161022391906113e8565b600060405180830381865afa158015610240573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061026991906118be565b90506000815167ffffffffffffffff81111561028857610287610ea3565b5b6040519080825280602002602001820160405280156102c157816020015b6102ae610d92565b8152602001906001900390816102a65790505b50905060005b82518110156105335760008382815181106102e5576102e4611907565b5b60200260200101516040516102fa9190611972565b90815260200160405180910390206040518060e0016040529081600082018054610323906119b8565b80601f016020809104026020016040519081016040528092919081815260200182805461034f906119b8565b801561039c5780601f106103715761010080835404028352916020019161039c565b820191906000526020600020905b81548152906001019060200180831161037f57829003601f168201915b505050505081526020016001820180546103b5906119b8565b80601f01602080910402602001604051908101604052809291908181526020018280546103e1906119b8565b801561042e5780601f106104035761010080835404028352916020019161042e565b820191906000526020600020905b81548152906001019060200180831161041157829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382018054610462906119b8565b80601f016020809104026020016040519081016040528092919081815260200182805461048e906119b8565b80156104db5780601f106104b0576101008083540402835291602001916104db565b820191906000526020600020905b8154815290600101906020018083116104be57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505082828151811061051557610514611907565b5b6020026020010181905250808061052b90611a19565b9150506102c7565b50809250505092915050565b6002818154811061054f57600080fd5b90600052602060002001600091509050805461056a906119b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610596906119b8565b80156105e35780601f106105b8576101008083540402835291602001916105e3565b820191906000526020600020905b8154815290600101906020018083116105c657829003601f168201915b505050505081565b600081805160208101820180518482526020830160208501208183528095505050505050600091509050806000018054610624906119b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610650906119b8565b801561069d5780601f106106725761010080835404028352916020019161069d565b820191906000526020600020905b81548152906001019060200180831161068057829003601f168201915b5050505050908060010180546106b2906119b8565b80601f01602080910402602001604051908101604052809291908181526020018280546106de906119b8565b801561072b5780601f106107005761010080835404028352916020019161072b565b820191906000526020600020905b81548152906001019060200180831161070e57829003601f168201915b5050505050908060020160009054906101000a900460ff1690806003018054610753906119b8565b80601f016020809104026020016040519081016040528092919081815260200182805461077f906119b8565b80156107cc5780601f106107a1576101008083540402835291602001916107cc565b820191906000526020600020905b8154815290600101906020018083116107af57829003601f168201915b5050505050908060040154908060050154908060060154905087565b6107f0610d92565b60008373ffffffffffffffffffffffffffffffffffffffff1663054987a5846040518263ffffffff1660e01b815260040161082b91906113e8565b600060405180830381865afa158015610848573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108719190611a62565b9050600081905060008160008151811061088e5761088d611907565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610b13576001826040516108d09190611972565b908152602001604051809103902060009054906101000a900460ff1615610b12576000826040516109019190611972565b90815260200160405180910390206040518060e001604052908160008201805461092a906119b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610956906119b8565b80156109a35780601f10610978576101008083540402835291602001916109a3565b820191906000526020600020905b81548152906001019060200180831161098657829003601f168201915b505050505081526020016001820180546109bc906119b8565b80601f01602080910402602001604051908101604052809291908181526020018280546109e8906119b8565b8015610a355780601f10610a0a57610100808354040283529160200191610a35565b820191906000526020600020905b815481529060010190602001808311610a1857829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382018054610a69906119b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610a95906119b8565b8015610ae25780601f10610ab757610100808354040283529160200191610ae2565b820191906000526020600020905b815481529060010190602001808311610ac557829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505092505050610b16565b5b50505b92915050565b6000600183604051610b2e9190611972565b908152602001604051809103902060009054906101000a900460ff1615610b8a576001905081600084604051610b649190611972565b90815260200160405180910390206003019080519060200190610b88929190610dd1565b505b8015610bce577f39859739613dd11b0e780ae98a04d89e5c2230793b95ff01e96432f260367536612710604051610bc19190611b62565b60405180910390a1610c08565b7f39859739613dd11b0e780ae98a04d89e5c2230793b95ff01e96432f260367536612711604051610bff9190611c3d565b60405180910390a15b505050565b60018160000151604051610c219190611972565b908152602001604051809103902060009054906101000a900460ff16610d8f578060008260000151604051610c569190611972565b90815260200160405180910390206000820151816000019080519060200190610c80929190610dd1565b506020820151816001019080519060200190610c9d929190610dd1565b5060408201518160020160006101000a81548160ff0219169083151502179055506060820151816003019080519060200190610cda929190610dd1565b506080820151816004015560a0820151816005015560c082015181600601559050506001808260000151604051610d119190611972565b908152602001604051809103902060006101000a81548160ff02191690831515021790555060028160000151908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610d75929190610dd1565b5060036000815480929190610d8990611a19565b91905055505b50565b6040518060e001604052806060815260200160608152602001600015158152602001606081526020016000815260200160008152602001600081525090565b828054610ddd906119b8565b90600052602060002090601f016020900481019282610dff5760008555610e46565b82601f10610e1857805160ff1916838001178555610e46565b82800160010185558215610e46579182015b82811115610e45578251825591602001919060010190610e2a565b5b509050610e539190610e57565b5090565b5b80821115610e70576000816000905550600101610e58565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610edb82610e92565b810181811067ffffffffffffffff82111715610efa57610ef9610ea3565b5b80604052505050565b6000610f0d610e74565b9050610f198282610ed2565b919050565b600067ffffffffffffffff821115610f3957610f38610ea3565b5b610f4282610e92565b9050602081019050919050565b82818337600083830152505050565b6000610f71610f6c84610f1e565b610f03565b905082815260208101848484011115610f8d57610f8c610e8d565b5b610f98848285610f4f565b509392505050565b600082601f830112610fb557610fb4610e88565b5b8135610fc5848260208601610f5e565b91505092915050565b600060208284031215610fe457610fe3610e7e565b5b600082013567ffffffffffffffff81111561100257611001610e83565b5b61100e84828501610fa0565b91505092915050565b60008115159050919050565b61102c81611017565b82525050565b60006020820190506110476000830184611023565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110788261104d565b9050919050565b6110888161106d565b811461109357600080fd5b50565b6000813590506110a58161107f565b92915050565b600080604083850312156110c2576110c1610e7e565b5b60006110d085828601611096565b925050602083013567ffffffffffffffff8111156110f1576110f0610e83565b5b6110fd85828601610fa0565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561116d578082015181840152602081019050611152565b8381111561117c576000848401525b50505050565b600061118d82611133565b611197818561113e565b93506111a781856020860161114f565b6111b081610e92565b840191505092915050565b6111c481611017565b82525050565b6000819050919050565b6111dd816111ca565b82525050565b600060e08301600083015184820360008601526112008282611182565b9150506020830151848203602086015261121a8282611182565b915050604083015161122f60408601826111bb565b50606083015184820360608601526112478282611182565b915050608083015161125c60808601826111d4565b5060a083015161126f60a08601826111d4565b5060c083015161128260c08601826111d4565b508091505092915050565b600061129983836111e3565b905092915050565b6000602082019050919050565b60006112b982611107565b6112c38185611112565b9350836020820285016112d585611123565b8060005b8581101561131157848403895281516112f2858261128d565b94506112fd836112a1565b925060208a019950506001810190506112d9565b50829750879550505050505092915050565b6000602082019050818103600083015261133d81846112ae565b905092915050565b61134e816111ca565b811461135957600080fd5b50565b60008135905061136b81611345565b92915050565b60006020828403121561138757611386610e7e565b5b60006113958482850161135c565b91505092915050565b600082825260208201905092915050565b60006113ba82611133565b6113c4818561139e565b93506113d481856020860161114f565b6113dd81610e92565b840191505092915050565b6000602082019050818103600083015261140281846113af565b905092915050565b611413816111ca565b82525050565b600060e0820190508181036000830152611433818a6113af565b9050818103602083015261144781896113af565b90506114566040830188611023565b818103606083015261146881876113af565b9050611477608083018661140a565b61148460a083018561140a565b61149160c083018461140a565b98975050505050505050565b600060e08301600083015184820360008601526114ba8282611182565b915050602083015184820360208601526114d48282611182565b91505060408301516114e960408601826111bb565b50606083015184820360608601526115018282611182565b915050608083015161151660808601826111d4565b5060a083015161152960a08601826111d4565b5060c083015161153c60c08601826111d4565b508091505092915050565b60006020820190508181036000830152611561818461149d565b905092915050565b600080604083850312156115805761157f610e7e565b5b600083013567ffffffffffffffff81111561159e5761159d610e83565b5b6115aa85828601610fa0565b925050602083013567ffffffffffffffff8111156115cb576115ca610e83565b5b6115d785828601610fa0565b9150509250929050565b600080fd5b600080fd5b6115f481611017565b81146115ff57600080fd5b50565b600081359050611611816115eb565b92915050565b600060e0828403121561162d5761162c6115e1565b5b61163760e0610f03565b9050600082013567ffffffffffffffff811115611657576116566115e6565b5b61166384828501610fa0565b600083015250602082013567ffffffffffffffff811115611687576116866115e6565b5b61169384828501610fa0565b60208301525060406116a784828501611602565b604083015250606082013567ffffffffffffffff8111156116cb576116ca6115e6565b5b6116d784828501610fa0565b60608301525060806116eb8482850161135c565b60808301525060a06116ff8482850161135c565b60a08301525060c06117138482850161135c565b60c08301525092915050565b60006020828403121561173557611734610e7e565b5b600082013567ffffffffffffffff81111561175357611752610e83565b5b61175f84828501611617565b91505092915050565b600067ffffffffffffffff82111561178357611782610ea3565b5b602082029050602081019050919050565b600080fd5b60006117ac6117a784610f1e565b610f03565b9050828152602081018484840111156117c8576117c7610e8d565b5b6117d384828561114f565b509392505050565b600082601f8301126117f0576117ef610e88565b5b8151611800848260208601611799565b91505092915050565b600061181c61181784611768565b610f03565b9050808382526020820190506020840283018581111561183f5761183e611794565b5b835b8181101561188657805167ffffffffffffffff81111561186457611863610e88565b5b80860161187189826117db565b85526020850194505050602081019050611841565b5050509392505050565b600082601f8301126118a5576118a4610e88565b5b81516118b5848260208601611809565b91505092915050565b6000602082840312156118d4576118d3610e7e565b5b600082015167ffffffffffffffff8111156118f2576118f1610e83565b5b6118fe84828501611890565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b600061194c82611133565b6119568185611936565b935061196681856020860161114f565b80840191505092915050565b600061197e8284611941565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806119d057607f821691505b602082108114156119e4576119e3611989565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a24826111ca565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611a5757611a566119ea565b5b600182019050919050565b600060208284031215611a7857611a77610e7e565b5b600082015167ffffffffffffffff811115611a9657611a95610e83565b5b611aa2848285016117db565b91505092915050565b7f6d6f64696679204173736574277320706963747572652055726c20737563636560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611b0760228361139e565b9150611b1282611aab565b604082019050919050565b6000819050919050565b6000819050919050565b6000611b4c611b47611b4284611b1d565b611b27565b6111ca565b9050919050565b611b5c81611b31565b82525050565b60006040820190508181036000830152611b7b81611afa565b9050611b8a6020830184611b53565b92915050565b7f6d6f64696679206173736574277320706963747572652055726c206661696c6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000611bec60218361139e565b9150611bf782611b90565b604082019050919050565b6000819050919050565b6000611c27611c22611c1d84611c02565b611b27565b6111ca565b9050919050565b611c3781611c0c565b82525050565b60006040820190508181036000830152611c5681611bdf565b9050611c656020830184611c2e565b9291505056fea26469706673582212206ff1ff3d56ae055bf62be5f95f7f13e73f0be422088e48671751d196c362c92d64736f6c634300080a0033";

    public static final String FUNC_ASSETINSERTED = "assetInserted";

    public static final String FUNC_ASSETKEY = "assetKey";

    public static final String FUNC_ASSETS = "assets";

    public static final String FUNC_CREATEASSET = "createAsset";

    public static final String FUNC_GETASSETBYASSETDETAILID = "getAssetByAssetDetailId";

    public static final String FUNC_GETASSETLISTPLACEID = "getAssetListPlaceId";

    public static final String FUNC_MODIFYPICTUREURL = "modifyPictureUrl";

    public static final Event MODIFIERPICURLEVENT_EVENT = new Event("modifierPicUrlEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected AssetContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AssetContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AssetContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AssetContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ModifierPicUrlEventEventResponse> getModifierPicUrlEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MODIFIERPICURLEVENT_EVENT, transactionReceipt);
        ArrayList<ModifierPicUrlEventEventResponse> responses = new ArrayList<ModifierPicUrlEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ModifierPicUrlEventEventResponse typedResponse = new ModifierPicUrlEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ModifierPicUrlEventEventResponse> modifierPicUrlEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ModifierPicUrlEventEventResponse>() {
            @Override
            public ModifierPicUrlEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MODIFIERPICURLEVENT_EVENT, log);
                ModifierPicUrlEventEventResponse typedResponse = new ModifierPicUrlEventEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ModifierPicUrlEventEventResponse> modifierPicUrlEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MODIFIERPICURLEVENT_EVENT));
        return modifierPicUrlEventEventFlowable(filter);
    }

    public RemoteFunctionCall<Boolean> assetInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> assetKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger>> assets(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (Boolean) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> createAsset(Asset _asset) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEASSET,
                Arrays.<Type>asList(_asset),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Asset> getAssetByAssetDetailId(String _assetDetailContract, String _assetDetailId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETBYASSETDETAILID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _assetDetailContract),
                        new org.web3j.abi.datatypes.Utf8String(_assetDetailId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Asset>() {}));
        return executeRemoteCallSingleValueReturn(function, Asset.class);
    }

    public RemoteFunctionCall<List> getAssetListPlaceId(String _placeAssetContract, String _placeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETLISTPLACEID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _placeAssetContract),
                        new org.web3j.abi.datatypes.Utf8String(_placeId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Asset>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> modifyPictureUrl(String _assetId, String _pictureUrl) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYPICTUREURL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId),
                        new org.web3j.abi.datatypes.Utf8String(_pictureUrl)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AssetContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AssetContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AssetContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AssetContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AssetContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AssetContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AssetContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<AssetContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Getter
    @Setter
    @ToString
    public static class Asset extends DynamicStruct {
        public String assetId;

        public String assetName;

        public Boolean isApply;

        public String picUrl;

        public BigInteger price;

        public BigInteger count;

        public BigInteger status;

        public Asset(String assetId, String assetName, Boolean isApply, String picUrl, BigInteger price, BigInteger count, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(assetId),new org.web3j.abi.datatypes.Utf8String(assetName),new org.web3j.abi.datatypes.Bool(isApply),new org.web3j.abi.datatypes.Utf8String(picUrl),new org.web3j.abi.datatypes.generated.Uint256(price),new org.web3j.abi.datatypes.generated.Uint256(count),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.assetId = assetId;
            this.assetName = assetName;
            this.isApply = isApply;
            this.picUrl = picUrl;
            this.price = price;
            this.count = count;
            this.status = status;
        }

        public Asset(Utf8String assetId, Utf8String assetName, Bool isApply, Utf8String picUrl, Uint256 price, Uint256 count, Uint256 status) {
            super(assetId,assetName,isApply,picUrl,price,count,status);
            this.assetId = assetId.getValue();
            this.assetName = assetName.getValue();
            this.isApply = isApply.getValue();
            this.picUrl = picUrl.getValue();
            this.price = price.getValue();
            this.count = count.getValue();
            this.status = status.getValue();
        }
    }

    public static class ModifierPicUrlEventEventResponse extends BaseEventResponse {
        public String message;

        public BigInteger value;
    }
}

