package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class AssetContract extends Contract {
    public static final String BINARY = "608060405260028054905060035534801561001957600080fd5b50611f3a806100296000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806389d81dd51161005b57806389d81dd514610153578063ce34b82914610183578063dea809d21461019f578063f3bfddb7146101bb57610088565b8063232ad7071461008d5780632e3e1924146100bd5780635fd1c06f146100ed578063859362281461011d575b600080fd5b6100a760048036038101906100a29190611267565b6101eb565b6040516100b491906112cb565b60405180910390f35b6100d760048036038101906100d29190611344565b610221565b6040516100e491906115bc565b60405180910390f35b6101076004803603810190610102919061160a565b61057a565b6040516101149190611681565b60405180910390f35b61013760048036038101906101329190611267565b610626565b60405161014a97969594939291906116b2565b60405180910390f35b61016d60048036038101906101689190611344565b610823565b60405161017a91906117e0565b60405180910390f35b61019d60048036038101906101989190611802565b610b57565b005b6101b960048036038101906101b491906119b8565b610c48565b005b6101d560048036038101906101d09190611267565b610dcd565b6040516101e291906117e0565b60405180910390f35b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b606060008373ffffffffffffffffffffffffffffffffffffffff1663e31bcfca846040518263ffffffff1660e01b815260040161025e9190611681565b600060405180830381865afa15801561027b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102a49190611b57565b90506000815167ffffffffffffffff8111156102c3576102c261113c565b5b6040519080825280602002602001820160405280156102fc57816020015b6102e961102b565b8152602001906001900390816102e15790505b50905060005b825181101561056e5760008382815181106103205761031f611ba0565b5b60200260200101516040516103359190611c0b565b90815260200160405180910390206040518060e001604052908160008201805461035e90611c51565b80601f016020809104026020016040519081016040528092919081815260200182805461038a90611c51565b80156103d75780601f106103ac576101008083540402835291602001916103d7565b820191906000526020600020905b8154815290600101906020018083116103ba57829003601f168201915b505050505081526020016001820180546103f090611c51565b80601f016020809104026020016040519081016040528092919081815260200182805461041c90611c51565b80156104695780601f1061043e57610100808354040283529160200191610469565b820191906000526020600020905b81548152906001019060200180831161044c57829003601f168201915b505050505081526020016002820160009054906101000a900460ff1615151515815260200160038201805461049d90611c51565b80601f01602080910402602001604051908101604052809291908181526020018280546104c990611c51565b80156105165780601f106104eb57610100808354040283529160200191610516565b820191906000526020600020905b8154815290600101906020018083116104f957829003601f168201915b5050505050815260200160048201548152602001600582015481526020016006820154815250508282815181106105505761054f611ba0565b5b6020026020010181905250808061056690611cb2565b915050610302565b50809250505092915050565b6002818154811061058a57600080fd5b9060005260206000200160009150905080546105a590611c51565b80601f01602080910402602001604051908101604052809291908181526020018280546105d190611c51565b801561061e5780601f106105f35761010080835404028352916020019161061e565b820191906000526020600020905b81548152906001019060200180831161060157829003601f168201915b505050505081565b60008180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461065f90611c51565b80601f016020809104026020016040519081016040528092919081815260200182805461068b90611c51565b80156106d85780601f106106ad576101008083540402835291602001916106d8565b820191906000526020600020905b8154815290600101906020018083116106bb57829003601f168201915b5050505050908060010180546106ed90611c51565b80601f016020809104026020016040519081016040528092919081815260200182805461071990611c51565b80156107665780601f1061073b57610100808354040283529160200191610766565b820191906000526020600020905b81548152906001019060200180831161074957829003601f168201915b5050505050908060020160009054906101000a900460ff169080600301805461078e90611c51565b80601f01602080910402602001604051908101604052809291908181526020018280546107ba90611c51565b80156108075780601f106107dc57610100808354040283529160200191610807565b820191906000526020600020905b8154815290600101906020018083116107ea57829003601f168201915b5050505050908060040154908060050154908060060154905087565b61082b61102b565b60008373ffffffffffffffffffffffffffffffffffffffff1663054987a5846040518263ffffffff1660e01b81526004016108669190611681565b600060405180830381865afa158015610883573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108ac9190611cfb565b905060008190506000816000815181106108c9576108c8611ba0565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610b4e5760018260405161090b9190611c0b565b908152602001604051809103902060009054906101000a900460ff1615610b4d5760008260405161093c9190611c0b565b90815260200160405180910390206040518060e001604052908160008201805461096590611c51565b80601f016020809104026020016040519081016040528092919081815260200182805461099190611c51565b80156109de5780601f106109b3576101008083540402835291602001916109de565b820191906000526020600020905b8154815290600101906020018083116109c157829003601f168201915b505050505081526020016001820180546109f790611c51565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2390611c51565b8015610a705780601f10610a4557610100808354040283529160200191610a70565b820191906000526020600020905b815481529060010190602001808311610a5357829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382018054610aa490611c51565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad090611c51565b8015610b1d5780601f10610af257610100808354040283529160200191610b1d565b820191906000526020600020905b815481529060010190602001808311610b0057829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152505092505050610b51565b5b50505b92915050565b6000600183604051610b699190611c0b565b908152602001604051809103902060009054906101000a900460ff1615610bc5576001905081600084604051610b9f9190611c0b565b90815260200160405180910390206003019080519060200190610bc392919061106a565b505b8015610c09577f39859739613dd11b0e780ae98a04d89e5c2230793b95ff01e96432f260367536612710604051610bfc9190611dfb565b60405180910390a1610c43565b7f39859739613dd11b0e780ae98a04d89e5c2230793b95ff01e96432f260367536612711604051610c3a9190611ed6565b60405180910390a15b505050565b60018160000151604051610c5c9190611c0b565b908152602001604051809103902060009054906101000a900460ff16610dca578060008260000151604051610c919190611c0b565b90815260200160405180910390206000820151816000019080519060200190610cbb92919061106a565b506020820151816001019080519060200190610cd892919061106a565b5060408201518160020160006101000a81548160ff0219169083151502179055506060820151816003019080519060200190610d1592919061106a565b506080820151816004015560a0820151816005015560c082015181600601559050506001808260000151604051610d4c9190611c0b565b908152602001604051809103902060006101000a81548160ff02191690831515021790555060028160000151908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610db092919061106a565b5060036000815480929190610dc490611cb2565b91905055505b50565b610dd561102b565b600182604051610de59190611c0b565b908152602001604051809103902060009054906101000a900460ff161561102557600082604051610e169190611c0b565b90815260200160405180910390206040518060e0016040529081600082018054610e3f90611c51565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6b90611c51565b8015610eb85780601f10610e8d57610100808354040283529160200191610eb8565b820191906000526020600020905b815481529060010190602001808311610e9b57829003601f168201915b50505050508152602001600182018054610ed190611c51565b80601f0160208091040260200160405190810160405280929190818152602001828054610efd90611c51565b8015610f4a5780601f10610f1f57610100808354040283529160200191610f4a565b820191906000526020600020905b815481529060010190602001808311610f2d57829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382018054610f7e90611c51565b80601f0160208091040260200160405190810160405280929190818152602001828054610faa90611c51565b8015610ff75780601f10610fcc57610100808354040283529160200191610ff7565b820191906000526020600020905b815481529060010190602001808311610fda57829003601f168201915b5050505050815260200160048201548152602001600582015481526020016006820154815250509050611026565b5b919050565b6040518060e001604052806060815260200160608152602001600015158152602001606081526020016000815260200160008152602001600081525090565b82805461107690611c51565b90600052602060002090601f01602090048101928261109857600085556110df565b82601f106110b157805160ff19168380011785556110df565b828001600101855582156110df579182015b828111156110de5782518255916020019190600101906110c3565b5b5090506110ec91906110f0565b5090565b5b808211156111095760008160009055506001016110f1565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6111748261112b565b810181811067ffffffffffffffff821117156111935761119261113c565b5b80604052505050565b60006111a661110d565b90506111b2828261116b565b919050565b600067ffffffffffffffff8211156111d2576111d161113c565b5b6111db8261112b565b9050602081019050919050565b82818337600083830152505050565b600061120a611205846111b7565b61119c565b90508281526020810184848401111561122657611225611126565b5b6112318482856111e8565b509392505050565b600082601f83011261124e5761124d611121565b5b813561125e8482602086016111f7565b91505092915050565b60006020828403121561127d5761127c611117565b5b600082013567ffffffffffffffff81111561129b5761129a61111c565b5b6112a784828501611239565b91505092915050565b60008115159050919050565b6112c5816112b0565b82525050565b60006020820190506112e060008301846112bc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611311826112e6565b9050919050565b61132181611306565b811461132c57600080fd5b50565b60008135905061133e81611318565b92915050565b6000806040838503121561135b5761135a611117565b5b60006113698582860161132f565b925050602083013567ffffffffffffffff81111561138a5761138961111c565b5b61139685828601611239565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114065780820151818401526020810190506113eb565b83811115611415576000848401525b50505050565b6000611426826113cc565b61143081856113d7565b93506114408185602086016113e8565b6114498161112b565b840191505092915050565b61145d816112b0565b82525050565b6000819050919050565b61147681611463565b82525050565b600060e0830160008301518482036000860152611499828261141b565b915050602083015184820360208601526114b3828261141b565b91505060408301516114c86040860182611454565b50606083015184820360608601526114e0828261141b565b91505060808301516114f5608086018261146d565b5060a083015161150860a086018261146d565b5060c083015161151b60c086018261146d565b508091505092915050565b6000611532838361147c565b905092915050565b6000602082019050919050565b6000611552826113a0565b61155c81856113ab565b93508360208202850161156e856113bc565b8060005b858110156115aa578484038952815161158b8582611526565b94506115968361153a565b925060208a01995050600181019050611572565b50829750879550505050505092915050565b600060208201905081810360008301526115d68184611547565b905092915050565b6115e781611463565b81146115f257600080fd5b50565b600081359050611604816115de565b92915050565b6000602082840312156116205761161f611117565b5b600061162e848285016115f5565b91505092915050565b600082825260208201905092915050565b6000611653826113cc565b61165d8185611637565b935061166d8185602086016113e8565b6116768161112b565b840191505092915050565b6000602082019050818103600083015261169b8184611648565b905092915050565b6116ac81611463565b82525050565b600060e08201905081810360008301526116cc818a611648565b905081810360208301526116e08189611648565b90506116ef60408301886112bc565b81810360608301526117018187611648565b905061171060808301866116a3565b61171d60a08301856116a3565b61172a60c08301846116a3565b98975050505050505050565b600060e0830160008301518482036000860152611753828261141b565b9150506020830151848203602086015261176d828261141b565b91505060408301516117826040860182611454565b506060830151848203606086015261179a828261141b565b91505060808301516117af608086018261146d565b5060a08301516117c260a086018261146d565b5060c08301516117d560c086018261146d565b508091505092915050565b600060208201905081810360008301526117fa8184611736565b905092915050565b6000806040838503121561181957611818611117565b5b600083013567ffffffffffffffff8111156118375761183661111c565b5b61184385828601611239565b925050602083013567ffffffffffffffff8111156118645761186361111c565b5b61187085828601611239565b9150509250929050565b600080fd5b600080fd5b61188d816112b0565b811461189857600080fd5b50565b6000813590506118aa81611884565b92915050565b600060e082840312156118c6576118c561187a565b5b6118d060e061119c565b9050600082013567ffffffffffffffff8111156118f0576118ef61187f565b5b6118fc84828501611239565b600083015250602082013567ffffffffffffffff8111156119205761191f61187f565b5b61192c84828501611239565b60208301525060406119408482850161189b565b604083015250606082013567ffffffffffffffff8111156119645761196361187f565b5b61197084828501611239565b6060830152506080611984848285016115f5565b60808301525060a0611998848285016115f5565b60a08301525060c06119ac848285016115f5565b60c08301525092915050565b6000602082840312156119ce576119cd611117565b5b600082013567ffffffffffffffff8111156119ec576119eb61111c565b5b6119f8848285016118b0565b91505092915050565b600067ffffffffffffffff821115611a1c57611a1b61113c565b5b602082029050602081019050919050565b600080fd5b6000611a45611a40846111b7565b61119c565b905082815260208101848484011115611a6157611a60611126565b5b611a6c8482856113e8565b509392505050565b600082601f830112611a8957611a88611121565b5b8151611a99848260208601611a32565b91505092915050565b6000611ab5611ab084611a01565b61119c565b90508083825260208201905060208402830185811115611ad857611ad7611a2d565b5b835b81811015611b1f57805167ffffffffffffffff811115611afd57611afc611121565b5b808601611b0a8982611a74565b85526020850194505050602081019050611ada565b5050509392505050565b600082601f830112611b3e57611b3d611121565b5b8151611b4e848260208601611aa2565b91505092915050565b600060208284031215611b6d57611b6c611117565b5b600082015167ffffffffffffffff811115611b8b57611b8a61111c565b5b611b9784828501611b29565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b6000611be5826113cc565b611bef8185611bcf565b9350611bff8185602086016113e8565b80840191505092915050565b6000611c178284611bda565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611c6957607f821691505b60208210811415611c7d57611c7c611c22565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611cbd82611463565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611cf057611cef611c83565b5b600182019050919050565b600060208284031215611d1157611d10611117565b5b600082015167ffffffffffffffff811115611d2f57611d2e61111c565b5b611d3b84828501611a74565b91505092915050565b7f6d6f64696679204173736574277320706963747572652055726c20737563636560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611da0602283611637565b9150611dab82611d44565b604082019050919050565b6000819050919050565b6000819050919050565b6000611de5611de0611ddb84611db6565b611dc0565b611463565b9050919050565b611df581611dca565b82525050565b60006040820190508181036000830152611e1481611d93565b9050611e236020830184611dec565b92915050565b7f6d6f64696679206173736574277320706963747572652055726c206661696c6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000611e85602183611637565b9150611e9082611e29565b604082019050919050565b6000819050919050565b6000611ec0611ebb611eb684611e9b565b611dc0565b611463565b9050919050565b611ed081611ea5565b82525050565b60006040820190508181036000830152611eef81611e78565b9050611efe6020830184611ec7565b9291505056fea2646970667358221220ca648e90535b3cd379e871b18e03ee4530fba317cb27cdc3faa6238eb2b845df64736f6c634300080a0033";

    public static final String FUNC_ASSETINSERTED = "assetInserted";

    public static final String FUNC_ASSETKEY = "assetKey";

    public static final String FUNC_ASSETS = "assets";

    public static final String FUNC_CREATEASSET = "createAsset";

    public static final String FUNC_GETASSETBYASSETDETAILID = "getAssetByAssetDetailId";

    public static final String FUNC_GETASSETLISTPLACEID = "getAssetListPlaceId";

    public static final String FUNC_GETBYID = "getById";

    public static final String FUNC_MODIFYPICTUREURL = "modifyPictureUrl";

    public static final Event MODIFIERPICURLEVENT_EVENT = new Event("modifierPicUrlEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected AssetContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AssetContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AssetContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AssetContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ModifierPicUrlEventEventResponse> getModifierPicUrlEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MODIFIERPICURLEVENT_EVENT, transactionReceipt);
        ArrayList<ModifierPicUrlEventEventResponse> responses = new ArrayList<ModifierPicUrlEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ModifierPicUrlEventEventResponse typedResponse = new ModifierPicUrlEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ModifierPicUrlEventEventResponse> modifierPicUrlEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ModifierPicUrlEventEventResponse>() {
            @Override
            public ModifierPicUrlEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MODIFIERPICURLEVENT_EVENT, log);
                ModifierPicUrlEventEventResponse typedResponse = new ModifierPicUrlEventEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ModifierPicUrlEventEventResponse> modifierPicUrlEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MODIFIERPICURLEVENT_EVENT));
        return modifierPicUrlEventEventFlowable(filter);
    }

    public RemoteFunctionCall<Boolean> assetInserted(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETINSERTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> assetKey(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger>> assets(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, Boolean, String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (Boolean) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> createAsset(Asset _asset) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEASSET,
                Arrays.<Type>asList(_asset),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Asset> getAssetByAssetDetailId(String _assetDetailContract, String _assetDetailId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETBYASSETDETAILID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _assetDetailContract),
                        new org.web3j.abi.datatypes.Utf8String(_assetDetailId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Asset>() {}));
        return executeRemoteCallSingleValueReturn(function, Asset.class);
    }

    public RemoteFunctionCall<List> getAssetListPlaceId(String _placeAssetContract, String _placeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETLISTPLACEID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _placeAssetContract),
                        new org.web3j.abi.datatypes.Utf8String(_placeId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Asset>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Asset> getById(String _assetId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBYID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Asset>() {}));
        return executeRemoteCallSingleValueReturn(function, Asset.class);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyPictureUrl(String _assetId, String _pictureUrl) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MODIFYPICTUREURL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_assetId),
                        new org.web3j.abi.datatypes.Utf8String(_pictureUrl)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AssetContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AssetContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AssetContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AssetContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AssetContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AssetContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AssetContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<AssetContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AssetContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AssetContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AssetContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Getter
    @Setter
    @ToString
    public static class Asset extends DynamicStruct {
        public String assetId;

        public String assetName;

        public Boolean isApply;

        public String picUrl;

        public BigInteger price;

        public BigInteger count;

        public BigInteger status;

        public Asset(String assetId, String assetName, Boolean isApply, String picUrl, BigInteger price, BigInteger count, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(assetId),new org.web3j.abi.datatypes.Utf8String(assetName),new org.web3j.abi.datatypes.Bool(isApply),new org.web3j.abi.datatypes.Utf8String(picUrl),new org.web3j.abi.datatypes.generated.Uint256(price),new org.web3j.abi.datatypes.generated.Uint256(count),new org.web3j.abi.datatypes.generated.Uint256(status));
            this.assetId = assetId;
            this.assetName = assetName;
            this.isApply = isApply;
            this.picUrl = picUrl;
            this.price = price;
            this.count = count;
            this.status = status;
        }

        public Asset(Utf8String assetId, Utf8String assetName, Bool isApply, Utf8String picUrl, Uint256 price, Uint256 count, Uint256 status) {
            super(assetId,assetName,isApply,picUrl,price,count,status);
            this.assetId = assetId.getValue();
            this.assetName = assetName.getValue();
            this.isApply = isApply.getValue();
            this.picUrl = picUrl.getValue();
            this.price = price.getValue();
            this.count = count.getValue();
            this.status = status.getValue();
        }
    }

    public static class ModifierPicUrlEventEventResponse extends BaseEventResponse {
        public String message;

        public BigInteger value;
    }
}
