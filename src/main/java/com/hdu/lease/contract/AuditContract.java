package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple11;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class AuditContract extends Contract {
    public static final String BINARY = "608060405260038054905060045534801561001957600080fd5b50614790806100296000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c207dee21161005b578063c207dee21461013d578063d44930f41461015b578063d51b27b814610177578063dfa72543146101b157610088565b806319098f881461008d578063756164df146100bf5780637de6ba7c146100f05780639a5f9cb01461010c575b600080fd5b6100a760048036038101906100a291906133c5565b6101e1565b6040516100b6939291906134af565b60405180910390f35b6100d960048036038101906100d491906133c5565b6102a9565b6040516100e79291906136c8565b60405180910390f35b61010a600480360381019061010591906139b1565b610813565b005b61012660048036038101906101219190613a61565b610a36565b604051610134929190613da1565b60405180910390f35b610145611935565b6040516101529190613e76565b60405180910390f35b61017560048036038101906101709190613e98565b611a45565b005b610191600480360381019061018c91906133c5565b611ca3565b6040516101a89b9a99989796959493929190613f16565b60405180910390f35b6101cb60048036038101906101c69190614118565b6120cb565b6040516101d89190614321565b60405180910390f35b60018180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461021a90614372565b80601f016020809104026020016040519081016040528092919081815260200182805461024690614372565b80156102935780601f1061026857610100808354040283529160200191610293565b820191906000526020600020905b81548152906001019060200180831161027657829003601f168201915b5050505050908060010154908060020154905083565b6102b1613117565b6102b9613171565b6002836040516102c991906143e0565b908152602001604051809103902060009054906101000a900460ff161561080e576000836040516102fa91906143e0565b90815260200160405180910390206040518061016001604052908160008201805461032490614372565b80601f016020809104026020016040519081016040528092919081815260200182805461035090614372565b801561039d5780601f106103725761010080835404028352916020019161039d565b820191906000526020600020905b81548152906001019060200180831161038057829003601f168201915b505050505081526020016001820180546103b690614372565b80601f01602080910402602001604051908101604052809291908181526020018280546103e290614372565b801561042f5780601f106104045761010080835404028352916020019161042f565b820191906000526020600020905b81548152906001019060200180831161041257829003601f168201915b5050505050815260200160028201805461044890614372565b80601f016020809104026020016040519081016040528092919081815260200182805461047490614372565b80156104c15780601f10610496576101008083540402835291602001916104c1565b820191906000526020600020905b8154815290600101906020018083116104a457829003601f168201915b505050505081526020016003820180546104da90614372565b80601f016020809104026020016040519081016040528092919081815260200182805461050690614372565b80156105535780601f1061052857610100808354040283529160200191610553565b820191906000526020600020905b81548152906001019060200180831161053657829003601f168201915b5050505050815260200160048201805461056c90614372565b80601f016020809104026020016040519081016040528092919081815260200182805461059890614372565b80156105e55780601f106105ba576101008083540402835291602001916105e5565b820191906000526020600020905b8154815290600101906020018083116105c857829003601f168201915b505050505081526020016005820154815260200160068201805461060890614372565b80601f016020809104026020016040519081016040528092919081815260200182805461063490614372565b80156106815780601f1061065657610100808354040283529160200191610681565b820191906000526020600020905b81548152906001019060200180831161066457829003601f168201915b50505050508152602001600782015481526020016008820180546106a490614372565b80601f01602080910402602001604051908101604052809291908181526020018280546106d090614372565b801561071d5780601f106106f25761010080835404028352916020019161071d565b820191906000526020600020905b81548152906001019060200180831161070057829003601f168201915b5050505050815260200160098201548152602001600a82015481525050915060018360405161074c91906143e0565b908152602001604051809103902060405180606001604052908160008201805461077590614372565b80601f01602080910402602001604051908101604052809291908181526020018280546107a190614372565b80156107ee5780601f106107c3576101008083540402835291602001916107ee565b820191906000526020600020905b8154815290600101906020018083116107d157829003601f168201915b505050505081526020016001820154815260200160028201548152505090505b915091565b6002826000015160405161082791906143e0565b908152602001604051809103902060009054906101000a900460ff16156109f857816000836000015160405161085d91906143e0565b90815260200160405180910390206000820151816000019080519060200190610887929190613192565b5060208201518160010190805190602001906108a4929190613192565b5060408201518160020190805190602001906108c1929190613192565b5060608201518160030190805190602001906108de929190613192565b5060808201518160040190805190602001906108fb929190613192565b5060a0820151816005015560c0820151816006019080519060200190610922929190613192565b5060e0820151816007015561010082015181600801908051906020019061094a929190613192565b50610120820151816009015561014082015181600a0155905050806001836000015160405161097991906143e0565b908152602001604051809103902060008201518160000190805190602001906109a3929190613192565b5060208201518160010155604082015181600201559050507f1f0b7755550dd48676926d868a91257934b9a64d5f852cad45e85274c052c6b060c86040516109eb919061443c565b60405180910390a1610a32565b7f1f0b7755550dd48676926d868a91257934b9a64d5f852cad45e85274c052c6b0612711604051610a299190614492565b60405180910390a15b5050565b606080606080600060038054905067ffffffffffffffff811115610a5d57610a5c61329a565b5b604051908082528060200260200182016040528015610a9657816020015b610a83613117565b815260200190600190039081610a7b5790505b509050600060038054905067ffffffffffffffff811115610aba57610ab961329a565b5b604051908082528060200260200182016040528015610af357816020015b610ae0613171565b815260200190600190039081610ad85790505b509050600089156112a45760005b6003805490508110156111565789600160038381548110610b2557610b246144ad565b5b90600052602060002001604051610b3c9190614570565b90815260200160405180910390206001015410158015610b9a575088600160038381548110610b6e57610b6d6144ad565b5b90600052602060002001604051610b859190614570565b90815260200160405180910390206002015411155b1561114357600060038281548110610bb557610bb46144ad565b5b90600052602060002001604051610bcc9190614570565b908152602001604051809103902060405180610160016040529081600082018054610bf690614372565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2290614372565b8015610c6f5780601f10610c4457610100808354040283529160200191610c6f565b820191906000526020600020905b815481529060010190602001808311610c5257829003601f168201915b50505050508152602001600182018054610c8890614372565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb490614372565b8015610d015780601f10610cd657610100808354040283529160200191610d01565b820191906000526020600020905b815481529060010190602001808311610ce457829003601f168201915b50505050508152602001600282018054610d1a90614372565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4690614372565b8015610d935780601f10610d6857610100808354040283529160200191610d93565b820191906000526020600020905b815481529060010190602001808311610d7657829003601f168201915b50505050508152602001600382018054610dac90614372565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd890614372565b8015610e255780601f10610dfa57610100808354040283529160200191610e25565b820191906000526020600020905b815481529060010190602001808311610e0857829003601f168201915b50505050508152602001600482018054610e3e90614372565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6a90614372565b8015610eb75780601f10610e8c57610100808354040283529160200191610eb7565b820191906000526020600020905b815481529060010190602001808311610e9a57829003601f168201915b5050505050815260200160058201548152602001600682018054610eda90614372565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0690614372565b8015610f535780601f10610f2857610100808354040283529160200191610f53565b820191906000526020600020905b815481529060010190602001808311610f3657829003601f168201915b5050505050815260200160078201548152602001600882018054610f7690614372565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa290614372565b8015610fef5780601f10610fc457610100808354040283529160200191610fef565b820191906000526020600020905b815481529060010190602001808311610fd257829003601f168201915b5050505050815260200160098201548152602001600a8201548152505084838151811061101f5761101e6144ad565b5b60200260200101819052506001600382815481106110405761103f6144ad565b5b906000526020600020016040516110579190614570565b908152602001604051809103902060405180606001604052908160008201805461108090614372565b80601f01602080910402602001604051908101604052809291908181526020018280546110ac90614372565b80156110f95780601f106110ce576101008083540402835291602001916110f9565b820191906000526020600020905b8154815290600101906020018083116110dc57829003601f168201915b5050505050815260200160018201548152602001600282015481525050838381518110611129576111286144ad565b5b6020026020010181905250818061113f906145b6565b9250505b808061114e906145b6565b915050610b01565b508067ffffffffffffffff8111156111715761117061329a565b5b6040519080825280602002602001820160405280156111aa57816020015b611197613117565b81526020019060019003908161118f5790505b5094508067ffffffffffffffff8111156111c7576111c661329a565b5b60405190808252806020026020018201604052801561120057816020015b6111ed613171565b8152602001906001900390816111e55790505b50935060005b8181101561129357838181518110611221576112206144ad565b5b602002602001015186828151811061123c5761123b6144ad565b5b602002602001018190525082818151811061125a576112596144ad565b5b6020026020010151858281518110611275576112746144ad565b5b6020026020010181905250808061128b906145b6565b915050611206565b50848496509650505050505061192d565b60038054905067ffffffffffffffff8111156112c3576112c261329a565b5b6040519080825280602002602001820160405280156112fc57816020015b6112e9613117565b8152602001906001900390816112e15790505b50945060038054905067ffffffffffffffff81111561131e5761131d61329a565b5b60405190808252806020026020018201604052801561135757816020015b611344613171565b81526020019060019003908161133c5790505b50935060005b600380549050811015611920576000600382815481106113805761137f6144ad565b5b906000526020600020016040516113979190614570565b9081526020016040518091039020604051806101600160405290816000820180546113c190614372565b80601f01602080910402602001604051908101604052809291908181526020018280546113ed90614372565b801561143a5780601f1061140f5761010080835404028352916020019161143a565b820191906000526020600020905b81548152906001019060200180831161141d57829003601f168201915b5050505050815260200160018201805461145390614372565b80601f016020809104026020016040519081016040528092919081815260200182805461147f90614372565b80156114cc5780601f106114a1576101008083540402835291602001916114cc565b820191906000526020600020905b8154815290600101906020018083116114af57829003601f168201915b505050505081526020016002820180546114e590614372565b80601f016020809104026020016040519081016040528092919081815260200182805461151190614372565b801561155e5780601f106115335761010080835404028352916020019161155e565b820191906000526020600020905b81548152906001019060200180831161154157829003601f168201915b5050505050815260200160038201805461157790614372565b80601f01602080910402602001604051908101604052809291908181526020018280546115a390614372565b80156115f05780601f106115c5576101008083540402835291602001916115f0565b820191906000526020600020905b8154815290600101906020018083116115d357829003601f168201915b5050505050815260200160048201805461160990614372565b80601f016020809104026020016040519081016040528092919081815260200182805461163590614372565b80156116825780601f1061165757610100808354040283529160200191611682565b820191906000526020600020905b81548152906001019060200180831161166557829003601f168201915b50505050508152602001600582015481526020016006820180546116a590614372565b80601f01602080910402602001604051908101604052809291908181526020018280546116d190614372565b801561171e5780601f106116f35761010080835404028352916020019161171e565b820191906000526020600020905b81548152906001019060200180831161170157829003601f168201915b505050505081526020016007820154815260200160088201805461174190614372565b80601f016020809104026020016040519081016040528092919081815260200182805461176d90614372565b80156117ba5780601f1061178f576101008083540402835291602001916117ba565b820191906000526020600020905b81548152906001019060200180831161179d57829003601f168201915b5050505050815260200160098201548152602001600a820154815250508683815181106117ea576117e96144ad565b5b602002602001018190525060016003828154811061180b5761180a6144ad565b5b906000526020600020016040516118229190614570565b908152602001604051809103902060405180606001604052908160008201805461184b90614372565b80601f016020809104026020016040519081016040528092919081815260200182805461187790614372565b80156118c45780601f10611899576101008083540402835291602001916118c4565b820191906000526020600020905b8154815290600101906020018083116118a757829003601f168201915b50505050508152602001600182015481526020016002820154815250508583815181106118f4576118f36144ad565b5b6020026020010181905250818061190a906145b6565b9250508080611918906145b6565b91505061135d565b5084849650965050505050505b935093915050565b61193d613218565b6040518060c001604052806040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600b81526020017f6163636f756e744e616d6500000000000000000000000000000000000000000081525081526020016040518060400160405280600981526020017f61737365744e616d65000000000000000000000000000000000000000000000081525081526020016040518060400160405280600c81526020017f626f72726f77526561736f6e00000000000000000000000000000000000000008152508152602001600081526020016000815250905090565b60028360000151604051611a5991906143e0565b908152602001604051809103902060009054906101000a900460ff16611c9e578260008460000151604051611a8e91906143e0565b90815260200160405180910390206000820151816000019080519060200190611ab8929190613192565b506020820151816001019080519060200190611ad5929190613192565b506040820151816002019080519060200190611af2929190613192565b506060820151816003019080519060200190611b0f929190613192565b506080820151816004019080519060200190611b2c929190613192565b5060a0820151816005015560c0820151816006019080519060200190611b53929190613192565b5060e08201518160070155610100820151816008019080519060200190611b7b929190613192565b50610120820151816009015561014082015181600a01559050506040518060600160405280846000015181526020018381526020018281525060018460000151604051611bc891906143e0565b90815260200160405180910390206000820151816000019080519060200190611bf2929190613192565b506020820151816001015560408201518160020155905050600160028460000151604051611c2091906143e0565b908152602001604051809103902060006101000a81548160ff02191690831515021790555060038360000151908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190611c84929190613192565b5060046000815480929190611c98906145b6565b91905055505b505050565b600081805160208101820180518482526020830160208501208183528095505050505050600091509050806000018054611cdc90614372565b80601f0160208091040260200160405190810160405280929190818152602001828054611d0890614372565b8015611d555780601f10611d2a57610100808354040283529160200191611d55565b820191906000526020600020905b815481529060010190602001808311611d3857829003601f168201915b505050505090806001018054611d6a90614372565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9690614372565b8015611de35780601f10611db857610100808354040283529160200191611de3565b820191906000526020600020905b815481529060010190602001808311611dc657829003601f168201915b505050505090806002018054611df890614372565b80601f0160208091040260200160405190810160405280929190818152602001828054611e2490614372565b8015611e715780601f10611e4657610100808354040283529160200191611e71565b820191906000526020600020905b815481529060010190602001808311611e5457829003601f168201915b505050505090806003018054611e8690614372565b80601f0160208091040260200160405190810160405280929190818152602001828054611eb290614372565b8015611eff5780601f10611ed457610100808354040283529160200191611eff565b820191906000526020600020905b815481529060010190602001808311611ee257829003601f168201915b505050505090806004018054611f1490614372565b80601f0160208091040260200160405190810160405280929190818152602001828054611f4090614372565b8015611f8d5780601f10611f6257610100808354040283529160200191611f8d565b820191906000526020600020905b815481529060010190602001808311611f7057829003601f168201915b505050505090806005015490806006018054611fa890614372565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd490614372565b80156120215780601f10611ff657610100808354040283529160200191612021565b820191906000526020600020905b81548152906001019060200180831161200457829003601f168201915b50505050509080600701549080600801805461203c90614372565b80601f016020809104026020016040519081016040528092919081815260200182805461206890614372565b80156120b55780601f1061208a576101008083540402835291602001916120b5565b820191906000526020600020905b81548152906001019060200180831161209857829003601f168201915b50505050509080600901549080600a015490508b565b6060600060038054905067ffffffffffffffff8111156120ee576120ed61329a565b5b60405190808252806020026020018201604052801561212757816020015b612114613218565b81526020019060019003908161210c5790505b50905060006060808a15612cce577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8860008151811061216a576121696144ad565b5b60200260200101511415612726576000600367ffffffffffffffff8111156121955761219461329a565b5b6040519080825280602002602001820160405280156121c35781602001602082028036833780820191505090505b5090506001816000815181106121dc576121db6144ad565b5b6020026020010181815250506002816001815181106121fe576121fd6144ad565b5b6020026020010181815250506003816002815181106122205761221f6144ad565b5b60200260200101818152505060005b815181101561271f5760005b60038054905081101561270b5782828151811061225b5761225a6144ad565b5b6020026020010151600060038381548110612279576122786144ad565b5b906000526020600020016040516122909190614570565b9081526020016040518091039020600701541480156122ed57508c6001600383815481106122c1576122c06144ad565b5b906000526020600020016040516122d89190614570565b90815260200160405180910390206001015410155b801561233757508b60016003838154811061230b5761230a6144ad565b5b906000526020600020016040516123229190614570565b90815260200160405180910390206002015411155b156126f8578973ffffffffffffffffffffffffffffffffffffffff1663e6dca11360006003848154811061236e5761236d6144ad565b5b906000526020600020016040516123859190614570565b90815260200160405180910390206003016040518263ffffffff1660e01b81526004016123b2919061467f565b600060405180830381865afa1580156123cf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906123f89190614711565b94508873ffffffffffffffffffffffffffffffffffffffff166344a65faf60006003848154811061242c5761242b6144ad565b5b906000526020600020016040516124439190614570565b90815260200160405180910390206001016040518263ffffffff1660e01b8152600401612470919061467f565b600060405180830381865afa15801561248d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124b69190614711565b93506040518060c00160405280600383815481106124d7576124d66144ad565b5b9060005260206000200180546124ec90614372565b80601f016020809104026020016040519081016040528092919081815260200182805461251890614372565b80156125655780601f1061253a57610100808354040283529160200191612565565b820191906000526020600020905b81548152906001019060200180831161254857829003601f168201915b50505050508152602001868152602001858152602001600060038481548110612591576125906144ad565b5b906000526020600020016040516125a89190614570565b908152602001604051809103902060040180546125c490614372565b80601f01602080910402602001604051908101604052809291908181526020018280546125f090614372565b801561263d5780601f106126125761010080835404028352916020019161263d565b820191906000526020600020905b81548152906001019060200180831161262057829003601f168201915b5050505050815260200160006003848154811061265d5761265c6144ad565b5b906000526020600020016040516126749190614570565b90815260200160405180910390206007015481526020016000600384815481106126a1576126a06144ad565b5b906000526020600020016040516126b89190614570565b9081526020016040518091039020600901548152508787806126d9906145b6565b9850815181106126ec576126eb6144ad565b5b60200260200101819052505b8080612703906145b6565b91505061223b565b508080612717906145b6565b91505061222f565b5050612c1b565b60005b8851811015612c195760005b600380549050811015612c0557898281518110612755576127546144ad565b5b6020026020010151600060038381548110612773576127726144ad565b5b9060005260206000200160405161278a9190614570565b9081526020016040518091039020600701541480156127e757508b6001600383815481106127bb576127ba6144ad565b5b906000526020600020016040516127d29190614570565b90815260200160405180910390206001015410155b801561283157508a600160038381548110612805576128046144ad565b5b9060005260206000200160405161281c9190614570565b90815260200160405180910390206002015411155b15612bf2578873ffffffffffffffffffffffffffffffffffffffff1663e6dca113600060038481548110612868576128676144ad565b5b9060005260206000200160405161287f9190614570565b90815260200160405180910390206003016040518263ffffffff1660e01b81526004016128ac919061467f565b600060405180830381865afa1580156128c9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906128f29190614711565b93508773ffffffffffffffffffffffffffffffffffffffff166344a65faf600060038481548110612926576129256144ad565b5b9060005260206000200160405161293d9190614570565b90815260200160405180910390206001016040518263ffffffff1660e01b815260040161296a919061467f565b600060405180830381865afa158015612987573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906129b09190614711565b92506040518060c00160405280600383815481106129d1576129d06144ad565b5b9060005260206000200180546129e690614372565b80601f0160208091040260200160405190810160405280929190818152602001828054612a1290614372565b8015612a5f5780601f10612a3457610100808354040283529160200191612a5f565b820191906000526020600020905b815481529060010190602001808311612a4257829003601f168201915b50505050508152602001858152602001848152602001600060038481548110612a8b57612a8a6144ad565b5b90600052602060002001604051612aa29190614570565b90815260200160405180910390206004018054612abe90614372565b80601f0160208091040260200160405190810160405280929190818152602001828054612aea90614372565b8015612b375780601f10612b0c57610100808354040283529160200191612b37565b820191906000526020600020905b815481529060010190602001808311612b1a57829003601f168201915b50505050508152602001600060038481548110612b5757612b566144ad565b5b90600052602060002001604051612b6e9190614570565b9081526020016040518091039020600701548152602001600060038481548110612b9b57612b9a6144ad565b5b90600052602060002001604051612bb29190614570565b908152602001604051809103902060090154815250868680612bd3906145b6565b975081518110612be657612be56144ad565b5b60200260200101819052505b8080612bfd906145b6565b915050612735565b508080612c11906145b6565b915050612729565b505b8267ffffffffffffffff811115612c3557612c3461329a565b5b604051908082528060200260200182016040528015612c6e57816020015b612c5b613218565b815260200190600190039081612c535790505b50945060005b83811015612cc857848181518110612c8f57612c8e6144ad565b5b6020026020010151868281518110612caa57612ca96144ad565b5b60200260200101819052508080612cc0906145b6565b915050612c74565b50613109565b60038054905067ffffffffffffffff811115612ced57612cec61329a565b5b604051908082528060200260200182016040528015612d2657816020015b612d13613218565b815260200190600190039081612d0b5790505b50945060005b600380549050811015613107578773ffffffffffffffffffffffffffffffffffffffff1663e6dca113600060038481548110612d6b57612d6a6144ad565b5b90600052602060002001604051612d829190614570565b90815260200160405180910390206003016040518263ffffffff1660e01b8152600401612daf919061467f565b600060405180830381865afa158015612dcc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612df59190614711565b92508673ffffffffffffffffffffffffffffffffffffffff166344a65faf600060038481548110612e2957612e286144ad565b5b90600052602060002001604051612e409190614570565b90815260200160405180910390206001016040518263ffffffff1660e01b8152600401612e6d919061467f565b600060405180830381865afa158015612e8a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612eb39190614711565b91506040518060c0016040528060038381548110612ed457612ed36144ad565b5b906000526020600020018054612ee990614372565b80601f0160208091040260200160405190810160405280929190818152602001828054612f1590614372565b8015612f625780601f10612f3757610100808354040283529160200191612f62565b820191906000526020600020905b815481529060010190602001808311612f4557829003601f168201915b50505050508152602001848152602001838152602001600060038481548110612f8e57612f8d6144ad565b5b90600052602060002001604051612fa59190614570565b90815260200160405180910390206004018054612fc190614372565b80601f0160208091040260200160405190810160405280929190818152602001828054612fed90614372565b801561303a5780601f1061300f5761010080835404028352916020019161303a565b820191906000526020600020905b81548152906001019060200180831161301d57829003601f168201915b5050505050815260200160006003848154811061305a576130596144ad565b5b906000526020600020016040516130719190614570565b908152602001604051809103902060070154815260200160006003848154811061309e5761309d6144ad565b5b906000526020600020016040516130b59190614570565b9081526020016040518091039020600901548152508685806130d6906145b6565b9650815181106130e9576130e86144ad565b5b602002602001018190525080806130ff906145b6565b915050612d2c565b505b505050509695505050505050565b60405180610160016040528060608152602001606081526020016060815260200160608152602001606081526020016000815260200160608152602001600081526020016060815260200160008152602001600081525090565b60405180606001604052806060815260200160008152602001600081525090565b82805461319e90614372565b90600052602060002090601f0160209004810192826131c05760008555613207565b82601f106131d957805160ff1916838001178555613207565b82800160010185558215613207579182015b828111156132065782518255916020019190600101906131eb565b5b509050613214919061324e565b5090565b6040518060c001604052806060815260200160608152602001606081526020016060815260200160008152602001600081525090565b5b8082111561326757600081600090555060010161324f565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132d282613289565b810181811067ffffffffffffffff821117156132f1576132f061329a565b5b80604052505050565b600061330461326b565b905061331082826132c9565b919050565b600067ffffffffffffffff8211156133305761332f61329a565b5b61333982613289565b9050602081019050919050565b82818337600083830152505050565b600061336861336384613315565b6132fa565b90508281526020810184848401111561338457613383613284565b5b61338f848285613346565b509392505050565b600082601f8301126133ac576133ab61327f565b5b81356133bc848260208601613355565b91505092915050565b6000602082840312156133db576133da613275565b5b600082013567ffffffffffffffff8111156133f9576133f861327a565b5b61340584828501613397565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561344857808201518184015260208101905061342d565b83811115613457576000848401525b50505050565b60006134688261340e565b6134728185613419565b935061348281856020860161342a565b61348b81613289565b840191505092915050565b6000819050919050565b6134a981613496565b82525050565b600060608201905081810360008301526134c9818661345d565b90506134d860208301856134a0565b6134e560408301846134a0565b949350505050565b600082825260208201905092915050565b60006135098261340e565b61351381856134ed565b935061352381856020860161342a565b61352c81613289565b840191505092915050565b61354081613496565b82525050565b6000819050919050565b61355981613546565b82525050565b600061016083016000830151848203600086015261357d82826134fe565b9150506020830151848203602086015261359782826134fe565b915050604083015184820360408601526135b182826134fe565b915050606083015184820360608601526135cb82826134fe565b915050608083015184820360808601526135e582826134fe565b91505060a08301516135fa60a0860182613537565b5060c083015184820360c086015261361282826134fe565b91505060e083015161362760e0860182613550565b5061010083015184820361010086015261364182826134fe565b915050610120830151613658610120860182613537565b5061014083015161366d610140860182613537565b508091505092915050565b6000606083016000830151848203600086015261369582826134fe565b91505060208301516136aa6020860182613537565b5060408301516136bd6040860182613537565b508091505092915050565b600060408201905081810360008301526136e2818561355f565b905081810360208301526136f68184613678565b90509392505050565b600080fd5b600080fd5b61371281613496565b811461371d57600080fd5b50565b60008135905061372f81613709565b92915050565b61373e81613546565b811461374957600080fd5b50565b60008135905061375b81613735565b92915050565b60006101608284031215613778576137776136ff565b5b6137836101606132fa565b9050600082013567ffffffffffffffff8111156137a3576137a2613704565b5b6137af84828501613397565b600083015250602082013567ffffffffffffffff8111156137d3576137d2613704565b5b6137df84828501613397565b602083015250604082013567ffffffffffffffff81111561380357613802613704565b5b61380f84828501613397565b604083015250606082013567ffffffffffffffff81111561383357613832613704565b5b61383f84828501613397565b606083015250608082013567ffffffffffffffff81111561386357613862613704565b5b61386f84828501613397565b60808301525060a061388384828501613720565b60a08301525060c082013567ffffffffffffffff8111156138a7576138a6613704565b5b6138b384828501613397565b60c08301525060e06138c78482850161374c565b60e08301525061010082013567ffffffffffffffff8111156138ec576138eb613704565b5b6138f884828501613397565b6101008301525061012061390e84828501613720565b6101208301525061014061392484828501613720565b6101408301525092915050565b600060608284031215613947576139466136ff565b5b61395160606132fa565b9050600082013567ffffffffffffffff81111561397157613970613704565b5b61397d84828501613397565b600083015250602061399184828501613720565b60208301525060406139a584828501613720565b60408301525092915050565b600080604083850312156139c8576139c7613275565b5b600083013567ffffffffffffffff8111156139e6576139e561327a565b5b6139f285828601613761565b925050602083013567ffffffffffffffff811115613a1357613a1261327a565b5b613a1f85828601613931565b9150509250929050565b60008115159050919050565b613a3e81613a29565b8114613a4957600080fd5b50565b600081359050613a5b81613a35565b92915050565b600080600060608486031215613a7a57613a79613275565b5b6000613a8886828701613a4c565b9350506020613a9986828701613720565b9250506040613aaa86828701613720565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000610160830160008301518482036000860152613afe82826134fe565b91505060208301518482036020860152613b1882826134fe565b91505060408301518482036040860152613b3282826134fe565b91505060608301518482036060860152613b4c82826134fe565b91505060808301518482036080860152613b6682826134fe565b91505060a0830151613b7b60a0860182613537565b5060c083015184820360c0860152613b9382826134fe565b91505060e0830151613ba860e0860182613550565b50610100830151848203610100860152613bc282826134fe565b915050610120830151613bd9610120860182613537565b50610140830151613bee610140860182613537565b508091505092915050565b6000613c058383613ae0565b905092915050565b6000602082019050919050565b6000613c2582613ab4565b613c2f8185613abf565b935083602082028501613c4185613ad0565b8060005b85811015613c7d5784840389528151613c5e8582613bf9565b9450613c6983613c0d565b925060208a01995050600181019050613c45565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006060830160008301518482036000860152613cd882826134fe565b9150506020830151613ced6020860182613537565b506040830151613d006040860182613537565b508091505092915050565b6000613d178383613cbb565b905092915050565b6000602082019050919050565b6000613d3782613c8f565b613d418185613c9a565b935083602082028501613d5385613cab565b8060005b85811015613d8f5784840389528151613d708582613d0b565b9450613d7b83613d1f565b925060208a01995050600181019050613d57565b50829750879550505050505092915050565b60006040820190508181036000830152613dbb8185613c1a565b90508181036020830152613dcf8184613d2c565b90509392505050565b600060c0830160008301518482036000860152613df582826134fe565b91505060208301518482036020860152613e0f82826134fe565b91505060408301518482036040860152613e2982826134fe565b91505060608301518482036060860152613e4382826134fe565b9150506080830151613e586080860182613550565b5060a0830151613e6b60a0860182613537565b508091505092915050565b60006020820190508181036000830152613e908184613dd8565b905092915050565b600080600060608486031215613eb157613eb0613275565b5b600084013567ffffffffffffffff811115613ecf57613ece61327a565b5b613edb86828701613761565b9350506020613eec86828701613720565b9250506040613efd86828701613720565b9150509250925092565b613f1081613546565b82525050565b6000610160820190508181036000830152613f31818e61345d565b90508181036020830152613f45818d61345d565b90508181036040830152613f59818c61345d565b90508181036060830152613f6d818b61345d565b90508181036080830152613f81818a61345d565b9050613f9060a08301896134a0565b81810360c0830152613fa2818861345d565b9050613fb160e0830187613f07565b818103610100830152613fc4818661345d565b9050613fd46101208301856134a0565b613fe26101408301846134a0565b9c9b505050505050505050505050565b600067ffffffffffffffff82111561400d5761400c61329a565b5b602082029050602081019050919050565b600080fd5b600061403661403184613ff2565b6132fa565b905080838252602082019050602084028301858111156140595761405861401e565b5b835b81811015614082578061406e888261374c565b84526020840193505060208101905061405b565b5050509392505050565b600082601f8301126140a1576140a061327f565b5b81356140b1848260208601614023565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006140e5826140ba565b9050919050565b6140f5816140da565b811461410057600080fd5b50565b600081359050614112816140ec565b92915050565b60008060008060008060c0878903121561413557614134613275565b5b600061414389828a01613a4c565b965050602061415489828a01613720565b955050604061416589828a01613720565b945050606087013567ffffffffffffffff8111156141865761418561327a565b5b61419289828a0161408c565b93505060806141a389828a01614103565b92505060a06141b489828a01614103565b9150509295509295509295565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060c083016000830151848203600086015261420a82826134fe565b9150506020830151848203602086015261422482826134fe565b9150506040830151848203604086015261423e82826134fe565b9150506060830151848203606086015261425882826134fe565b915050608083015161426d6080860182613550565b5060a083015161428060a0860182613537565b508091505092915050565b600061429783836141ed565b905092915050565b6000602082019050919050565b60006142b7826141c1565b6142c181856141cc565b9350836020820285016142d3856141dd565b8060005b8581101561430f57848403895281516142f0858261428b565b94506142fb8361429f565b925060208a019950506001810190506142d7565b50829750879550505050505092915050565b6000602082019050818103600083015261433b81846142ac565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061438a57607f821691505b6020821081141561439e5761439d614343565b5b50919050565b600081905092915050565b60006143ba8261340e565b6143c481856143a4565b93506143d481856020860161342a565b80840191505092915050565b60006143ec82846143af565b915081905092915050565b6000819050919050565b6000819050919050565b600061442661442161441c846143f7565b614401565b613496565b9050919050565b6144368161440b565b82525050565b6000602082019050614451600083018461442d565b92915050565b6000819050919050565b600061447c61447761447284614457565b614401565b613496565b9050919050565b61448c81614461565b82525050565b60006020820190506144a76000830184614483565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b600081546144fe81614372565b61450881866143a4565b94506001821660008114614523576001811461453457614567565b60ff19831686528186019350614567565b61453d856144dc565b60005b8381101561455f57815481890152600182019150602081019050614540565b838801955050505b50505092915050565b600061457c82846144f1565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006145c182613496565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156145f4576145f3614587565b5b600182019050919050565b6000815461460c81614372565b6146168186613419565b94506001821660008114614631576001811461464357614676565b60ff1983168652602086019350614676565b61464c856144dc565b60005b8381101561466e5781548189015260018201915060208101905061464f565b808801955050505b50505092915050565b6000602082019050818103600083015261469981846145ff565b905092915050565b60006146b46146af84613315565b6132fa565b9050828152602081018484840111156146d0576146cf613284565b5b6146db84828561342a565b509392505050565b600082601f8301126146f8576146f761327f565b5b81516147088482602086016146a1565b91505092915050565b60006020828403121561472757614726613275565b5b600082015167ffffffffffffffff8111156147455761474461327a565b5b614751848285016146e3565b9150509291505056fea264697066735822122014474ef54ed554c1337952f5a2ed5e42f9be9d082df628dfaa79043f9532137264736f6c634300080a0033";

    public static final String FUNC_AUDITBETIMES = "auditBETimes";

    public static final String FUNC_AUDITS = "audits";

    public static final String FUNC_GETAUDITBYPRIMARYKEY = "getAuditByPrimaryKey";

    public static final String FUNC_GETAUDITDTOTEST = "getAuditDTOTest";

    public static final String FUNC_GETLISTBYTIME = "getListByTime";

    public static final String FUNC_GETLISTBYTYPEANDTIME = "getListByTypeAndTime";

    public static final String FUNC_INSERTAUDIT = "insertAudit";

    public static final String FUNC_UPDATEAUDITINFO = "updateAuditInfo";

    public static final Event ISUPDATESUCCESS_EVENT = new Event("isUpdateSuccess",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected AuditContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AuditContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AuditContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AuditContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<IsUpdateSuccessEventResponse> getIsUpdateSuccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ISUPDATESUCCESS_EVENT, transactionReceipt);
        ArrayList<IsUpdateSuccessEventResponse> responses = new ArrayList<IsUpdateSuccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IsUpdateSuccessEventResponse typedResponse = new IsUpdateSuccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IsUpdateSuccessEventResponse> isUpdateSuccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IsUpdateSuccessEventResponse>() {
            @Override
            public IsUpdateSuccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ISUPDATESUCCESS_EVENT, log);
                IsUpdateSuccessEventResponse typedResponse = new IsUpdateSuccessEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IsUpdateSuccessEventResponse> isUpdateSuccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ISUPDATESUCCESS_EVENT));
        return isUpdateSuccessEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>> auditBETimes(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AUDITBETIMES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple11<String, String, String, String, String, BigInteger, String, BigInteger, String, BigInteger, BigInteger>> audits(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AUDITS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple11<String, String, String, String, String, BigInteger, String, BigInteger, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple11<String, String, String, String, String, BigInteger, String, BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple11<String, String, String, String, String, BigInteger, String, BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<String, String, String, String, String, BigInteger, String, BigInteger, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (String) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue(),
                                (String) results.get(8).getValue(),
                                (BigInteger) results.get(9).getValue(),
                                (BigInteger) results.get(10).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<Audit, AduitBeginEndTime>> getAuditByPrimaryKey(String _auditId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAUDITBYPRIMARYKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_auditId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Audit>() {}, new TypeReference<AduitBeginEndTime>() {}));
        return new RemoteFunctionCall<Tuple2<Audit, AduitBeginEndTime>>(function,
                new Callable<Tuple2<Audit, AduitBeginEndTime>>() {
                    @Override
                    public Tuple2<Audit, AduitBeginEndTime> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Audit, AduitBeginEndTime>(
                                (Audit) results.get(0),
                                (AduitBeginEndTime) results.get(1));
                    }
                });
    }

    public RemoteFunctionCall<AuditDTO> getAuditDTOTest() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAUDITDTOTEST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<AuditDTO>() {}));
        return executeRemoteCallSingleValueReturn(function, AuditDTO.class);
    }

    public RemoteFunctionCall<Tuple2<List<Audit>, List<AduitBeginEndTime>>> getListByTime(Boolean _timeRange, BigInteger _beginTime, BigInteger _endTime) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYTIME,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_timeRange),
                        new org.web3j.abi.datatypes.generated.Uint256(_beginTime),
                        new org.web3j.abi.datatypes.generated.Uint256(_endTime)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Audit>>() {}, new TypeReference<DynamicArray<AduitBeginEndTime>>() {}));
        return new RemoteFunctionCall<Tuple2<List<Audit>, List<AduitBeginEndTime>>>(function,
                new Callable<Tuple2<List<Audit>, List<AduitBeginEndTime>>>() {
                    @Override
                    public Tuple2<List<Audit>, List<AduitBeginEndTime>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<Audit>, List<AduitBeginEndTime>>(
                                convertToNative((List<Audit>) results.get(0).getValue()),
                                convertToNative((List<AduitBeginEndTime>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<List> getListByTypeAndTime(Boolean _timeRange, BigInteger _beginTime, BigInteger _endTime, List<BigInteger> _list, String _userContract, String _assetContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYTYPEANDTIME,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_timeRange),
                        new org.web3j.abi.datatypes.generated.Uint256(_beginTime),
                        new org.web3j.abi.datatypes.generated.Uint256(_endTime),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Int256>(
                                org.web3j.abi.datatypes.generated.Int256.class,
                                org.web3j.abi.Utils.typeMap(_list, org.web3j.abi.datatypes.generated.Int256.class)),
                        new org.web3j.abi.datatypes.Address(160, _userContract),
                        new org.web3j.abi.datatypes.Address(160, _assetContract)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<AuditDTO>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> insertAudit(Audit _audit, BigInteger _beginTime, BigInteger _endTime) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INSERTAUDIT,
                Arrays.<Type>asList(_audit,
                        new org.web3j.abi.datatypes.generated.Uint256(_beginTime),
                        new org.web3j.abi.datatypes.generated.Uint256(_endTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateAuditInfo(Audit _audit, AduitBeginEndTime _bEtime) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEAUDITINFO,
                Arrays.<Type>asList(_audit,
                        _bEtime),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AuditContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AuditContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AuditContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AuditContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AuditContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AuditContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AuditContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AuditContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AuditContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AuditContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AuditContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AuditContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<AuditContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AuditContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AuditContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AuditContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Getter
    @Setter
    @ToString
    public static class Audit extends DynamicStruct {
        public String auditId;

        public String assetId;

        public String placeId;

        public String borrowerAccount;

        public String borrowReason;

        public BigInteger count;

        public String auditAccount;

        public BigInteger reviewStatus;

        public String reviewReason;

        public BigInteger applyTime;

        public BigInteger reviewTime;

        public Audit(String auditId, String assetId, String placeId, String borrowerAccount, String borrowReason, BigInteger count, String auditAccount, BigInteger reviewStatus, String reviewReason, BigInteger applyTime, BigInteger reviewTime) {
            super(new org.web3j.abi.datatypes.Utf8String(auditId),new org.web3j.abi.datatypes.Utf8String(assetId),new org.web3j.abi.datatypes.Utf8String(placeId),new org.web3j.abi.datatypes.Utf8String(borrowerAccount),new org.web3j.abi.datatypes.Utf8String(borrowReason),new org.web3j.abi.datatypes.generated.Uint256(count),new org.web3j.abi.datatypes.Utf8String(auditAccount),new org.web3j.abi.datatypes.generated.Int256(reviewStatus),new org.web3j.abi.datatypes.Utf8String(reviewReason),new org.web3j.abi.datatypes.generated.Uint256(applyTime),new org.web3j.abi.datatypes.generated.Uint256(reviewTime));
            this.auditId = auditId;
            this.assetId = assetId;
            this.placeId = placeId;
            this.borrowerAccount = borrowerAccount;
            this.borrowReason = borrowReason;
            this.count = count;
            this.auditAccount = auditAccount;
            this.reviewStatus = reviewStatus;
            this.reviewReason = reviewReason;
            this.applyTime = applyTime;
            this.reviewTime = reviewTime;
        }

        public Audit(Utf8String auditId, Utf8String assetId, Utf8String placeId, Utf8String borrowerAccount, Utf8String borrowReason, Uint256 count, Utf8String auditAccount, Int256 reviewStatus, Utf8String reviewReason, Uint256 applyTime, Uint256 reviewTime) {
            super(auditId,assetId,placeId,borrowerAccount,borrowReason,count,auditAccount,reviewStatus,reviewReason,applyTime,reviewTime);
            this.auditId = auditId.getValue();
            this.assetId = assetId.getValue();
            this.placeId = placeId.getValue();
            this.borrowerAccount = borrowerAccount.getValue();
            this.borrowReason = borrowReason.getValue();
            this.count = count.getValue();
            this.auditAccount = auditAccount.getValue();
            this.reviewStatus = reviewStatus.getValue();
            this.reviewReason = reviewReason.getValue();
            this.applyTime = applyTime.getValue();
            this.reviewTime = reviewTime.getValue();
        }
    }

    @Getter
    @Setter
    @ToString
    public static class AduitBeginEndTime extends DynamicStruct {
        public String auditId;

        public BigInteger beginTime;

        public BigInteger endTime;

        public AduitBeginEndTime(String auditId, BigInteger beginTime, BigInteger endTime) {
            super(new org.web3j.abi.datatypes.Utf8String(auditId),new org.web3j.abi.datatypes.generated.Uint256(beginTime),new org.web3j.abi.datatypes.generated.Uint256(endTime));
            this.auditId = auditId;
            this.beginTime = beginTime;
            this.endTime = endTime;
        }

        public AduitBeginEndTime(Utf8String auditId, Uint256 beginTime, Uint256 endTime) {
            super(auditId,beginTime,endTime);
            this.auditId = auditId.getValue();
            this.beginTime = beginTime.getValue();
            this.endTime = endTime.getValue();
        }
    }

    @Getter
    @Setter
    @ToString
    public static class AuditDTO extends DynamicStruct {
        public String auditId;

        public String borrowerName;

        public String assetName;

        public String borrowReason;

        public BigInteger reviewStatus;

        public BigInteger applyTime;

        public AuditDTO(String auditId, String borrowerName, String assetName, String borrowReason, BigInteger reviewStatus, BigInteger applyTime) {
            super(new org.web3j.abi.datatypes.Utf8String(auditId),new org.web3j.abi.datatypes.Utf8String(borrowerName),new org.web3j.abi.datatypes.Utf8String(assetName),new org.web3j.abi.datatypes.Utf8String(borrowReason),new org.web3j.abi.datatypes.generated.Int256(reviewStatus),new org.web3j.abi.datatypes.generated.Uint256(applyTime));
            this.auditId = auditId;
            this.borrowerName = borrowerName;
            this.assetName = assetName;
            this.borrowReason = borrowReason;
            this.reviewStatus = reviewStatus;
            this.applyTime = applyTime;
        }

        public AuditDTO(Utf8String auditId, Utf8String borrowerName, Utf8String assetName, Utf8String borrowReason, Int256 reviewStatus, Uint256 applyTime) {
            super(auditId,borrowerName,assetName,borrowReason,reviewStatus,applyTime);
            this.auditId = auditId.getValue();
            this.borrowerName = borrowerName.getValue();
            this.assetName = assetName.getValue();
            this.borrowReason = borrowReason.getValue();
            this.reviewStatus = reviewStatus.getValue();
            this.applyTime = applyTime.getValue();
        }
    }

    @Getter
    public static class IsUpdateSuccessEventResponse extends BaseEventResponse {
        public BigInteger code;
    }
}
