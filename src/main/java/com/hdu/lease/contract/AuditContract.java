package com.hdu.lease.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple12;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class AuditContract extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_AUDITS = "audits";

    public static final String FUNC_GETAUDITBYPRIMARYKEY = "getAuditByPrimaryKey";

    public static final String FUNC_GETLISTBYTIME = "getListByTime";

    public static final String FUNC_INSERTAUDIT = "insertAudit";

    public static final String FUNC_UPDATEAUDITINFO = "updateAuditInfo";

    public static final Event ISUPDATESUCCESS_EVENT = new Event("isUpdateSuccess",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected AuditContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AuditContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AuditContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AuditContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<IsUpdateSuccessEventResponse> getIsUpdateSuccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ISUPDATESUCCESS_EVENT, transactionReceipt);
        ArrayList<IsUpdateSuccessEventResponse> responses = new ArrayList<IsUpdateSuccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IsUpdateSuccessEventResponse typedResponse = new IsUpdateSuccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IsUpdateSuccessEventResponse> isUpdateSuccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IsUpdateSuccessEventResponse>() {
            @Override
            public IsUpdateSuccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ISUPDATESUCCESS_EVENT, log);
                IsUpdateSuccessEventResponse typedResponse = new IsUpdateSuccessEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IsUpdateSuccessEventResponse> isUpdateSuccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ISUPDATESUCCESS_EVENT));
        return isUpdateSuccessEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple12<String, String, String, String, BigInteger, BigInteger, String, BigInteger, String, BigInteger, String, String>> audits(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AUDITS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple12<String, String, String, String, BigInteger, BigInteger, String, BigInteger, String, BigInteger, String, String>>(function,
                new Callable<Tuple12<String, String, String, String, BigInteger, BigInteger, String, BigInteger, String, BigInteger, String, String>>() {
                    @Override
                    public Tuple12<String, String, String, String, BigInteger, BigInteger, String, BigInteger, String, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<String, String, String, String, BigInteger, BigInteger, String, BigInteger, String, BigInteger, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (String) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue(),
                                (String) results.get(8).getValue(),
                                (BigInteger) results.get(9).getValue(),
                                (String) results.get(10).getValue(),
                                (String) results.get(11).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Audit> getAuditByPrimaryKey(String _auditId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAUDITBYPRIMARYKEY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_auditId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Audit>() {}));
        return executeRemoteCallSingleValueReturn(function, Audit.class);
    }

    public RemoteFunctionCall<List> getListByTime(Boolean _timeRange, BigInteger _beginTime, BigInteger _endTime) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTBYTIME,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_timeRange),
                        new org.web3j.abi.datatypes.generated.Uint256(_beginTime),
                        new org.web3j.abi.datatypes.generated.Uint256(_endTime)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Audit>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> insertAudit(Audit _audit) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INSERTAUDIT,
                Arrays.<Type>asList(_audit),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateAuditInfo(Audit _audit) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEAUDITINFO,
                Arrays.<Type>asList(_audit),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AuditContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AuditContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AuditContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AuditContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AuditContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AuditContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AuditContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AuditContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AuditContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AuditContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AuditContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AuditContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<AuditContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AuditContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AuditContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AuditContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Getter
    @Setter
    @ToString
    public static class Audit extends DynamicStruct {
        public String auditId;

        public String assetId;

        public String placeId;

        public String borrowerAccount;

        public BigInteger beginTime;

        public BigInteger endTime;

        public String borrowReason;

        public BigInteger count;

        public String auditAccount;

        public BigInteger reviewStatus;

        public String reviewReason;

        public String reviewTime;

        public Audit(String auditId, String assetId, String placeId, String borrowerAccount, BigInteger beginTime, BigInteger endTime, String borrowReason, BigInteger count, String auditAccount, BigInteger reviewStatus, String reviewReason, String reviewTime) {
            super(new org.web3j.abi.datatypes.Utf8String(auditId),new org.web3j.abi.datatypes.Utf8String(assetId),new org.web3j.abi.datatypes.Utf8String(placeId),new org.web3j.abi.datatypes.Utf8String(borrowerAccount),new org.web3j.abi.datatypes.generated.Uint256(beginTime),new org.web3j.abi.datatypes.generated.Uint256(endTime),new org.web3j.abi.datatypes.Utf8String(borrowReason),new org.web3j.abi.datatypes.generated.Uint256(count),new org.web3j.abi.datatypes.Utf8String(auditAccount),new org.web3j.abi.datatypes.generated.Uint256(reviewStatus),new org.web3j.abi.datatypes.Utf8String(reviewReason),new org.web3j.abi.datatypes.Utf8String(reviewTime));
            this.auditId = auditId;
            this.assetId = assetId;
            this.placeId = placeId;
            this.borrowerAccount = borrowerAccount;
            this.beginTime = beginTime;
            this.endTime = endTime;
            this.borrowReason = borrowReason;
            this.count = count;
            this.auditAccount = auditAccount;
            this.reviewStatus = reviewStatus;
            this.reviewReason = reviewReason;
            this.reviewTime = reviewTime;
        }

        public Audit(Utf8String auditId, Utf8String assetId, Utf8String placeId, Utf8String borrowerAccount, Uint256 beginTime, Uint256 endTime, Utf8String borrowReason, Uint256 count, Utf8String auditAccount, Uint256 reviewStatus, Utf8String reviewReason, Utf8String reviewTime) {
            super(auditId,assetId,placeId,borrowerAccount,beginTime,endTime,borrowReason,count,auditAccount,reviewStatus,reviewReason,reviewTime);
            this.auditId = auditId.getValue();
            this.assetId = assetId.getValue();
            this.placeId = placeId.getValue();
            this.borrowerAccount = borrowerAccount.getValue();
            this.beginTime = beginTime.getValue();
            this.endTime = endTime.getValue();
            this.borrowReason = borrowReason.getValue();
            this.count = count.getValue();
            this.auditAccount = auditAccount.getValue();
            this.reviewStatus = reviewStatus.getValue();
            this.reviewReason = reviewReason.getValue();
            this.reviewTime = reviewTime.getValue();
        }
    }

    @Getter
    public static class IsUpdateSuccessEventResponse extends BaseEventResponse {
        public BigInteger code;
    }
}
